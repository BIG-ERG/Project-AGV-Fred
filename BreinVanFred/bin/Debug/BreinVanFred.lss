
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000d66  00000e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d66  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  00000e1a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000152e  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000fe7  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000bed  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000258  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000776  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001e7  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000159  00000000  00000000  00004c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_35>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_45>
  b8:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a4 31       	cpi	r26, 0x14	; 20

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 108:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 110:	3f 98       	cbi	0x07, 7	; 7

00000112 <.Loc.3>:
    ddr_led|=(1<<led1);
 112:	27 9a       	sbi	0x04, 7	; 4

00000114 <.Loc.5>:
    port_led|=(1<<led1);
 114:	2f 9a       	sbi	0x05, 7	; 5

00000116 <.Loc.7>:
}
 116:	08 95       	ret

00000118 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 118:	37 99       	sbic	0x06, 7	; 6
 11a:	11 c0       	rjmp	.+34     	; 0x13e <.L3>

0000011c <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0

00000122 <.L1^B1>:
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <.L1^B1>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <L0^A>

0000012c <L0^A>:
	...

0000012e <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 12e:	37 99       	sbic	0x06, 7	; 6
 130:	10 c0       	rjmp	.+32     	; 0x152 <.L2>

00000132 <.Loc.23>:
        {
            gedetecteerd=0;
 132:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <gedetecteerd.0+0x1>
 136:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <gedetecteerd.0>

0000013a <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 13a:	2f 98       	cbi	0x05, 7	; 5
 13c:	08 95       	ret

0000013e <.L3>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0

00000144 <.L1^B2>:
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <.L1^B2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <L0^A>

0000014e <L0^A>:
	...

00000150 <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 150:	37 9b       	sbis	0x06, 7	; 6

00000152 <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 152:	08 95       	ret

00000154 <.Loc.39>:
            if(!gedetecteerd)
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gedetecteerd.0>
 158:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gedetecteerd.0+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <.L5>

00000160 <.Loc.41>:
                tel++;
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tel>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tel+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <tel+0x1>
 16e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <tel>

00000172 <.L5>:
            gedetecteerd=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gedetecteerd.0+0x1>
 17a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gedetecteerd.0>

0000017e <.Loc.45>:
            port_led|=(1<<led1);//led uit
 17e:	2f 9a       	sbi	0x05, 7	; 5

00000180 <.Loc.47>:
}
 180:	e8 cf       	rjmp	.-48     	; 0x152 <.L2>

00000182 <main>:
#include "main.h"

int main(void)
{

    while(1)
 182:	ff cf       	rjmp	.-2      	; 0x182 <main>

00000184 <rechtdoor>:

#include "navigatieLogica.h"
#include "ultrasoon.h"
#include "stepperDriver.h"

void rechtdoor(void){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <L0^A>

0000018a <L0^A>:
 18a:	0f 92       	push	r0
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62

00000190 <.Loc.1>:
    //start driving
    speedStepperLeft(TOPSPEED);
 190:	84 e6       	ldi	r24, 0x64	; 100
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 2c 03 	call	0x658	; 0x658 <speedStepperLeft>

00000198 <.LVL0>:
    speedStepperRight(TOPSPEED);
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 25 03 	call	0x64a	; 0x64a <speedStepperRight>

000001a0 <.LVL1>:
    //while agv binnen het pad is
    while(distance_right||distance_left<50){
 1a0:	4f c0       	rjmp	.+158    	; 0x240 <.L2>

000001a2 <.L6>:
        //bepaal ratio van afwijking en gebruik deze om de snelheid aan te passen
        if (distance_right < distance_left)
 1a2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 1a6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>
 1aa:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <distance_right+0x2>
 1ae:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <distance_right+0x3>
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	ab 83       	std	Y+3, r26	; 0x03
 1b8:	bc 83       	std	Y+4, r27	; 0x04
 1ba:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <distance_left>
 1be:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <distance_left+0x1>
 1c2:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <distance_left+0x2>
 1c6:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <distance_left+0x3>

000001ca <.Loc.7>:
 1ca:	bc 01       	movw	r22, r24
 1cc:	cd 01       	movw	r24, r26
 1ce:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpsf2>

000001d2 <.LVL2>:
 1d2:	88 23       	and	r24, r24
 1d4:	0c f0       	brlt	.+2      	; 0x1d8 <.Loc.8>

000001d6 <L0^A>:
 1d6:	6f c0       	rjmp	.+222    	; 0x2b6 <.L8>

000001d8 <.Loc.8>:
            speedStepperLeft(TOPSPEED*(distance_right/distance_left));
 1d8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 1dc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>
 1e0:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <distance_right+0x2>
 1e4:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <distance_right+0x3>
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	ab 83       	std	Y+3, r26	; 0x03
 1ee:	bc 83       	std	Y+4, r27	; 0x04
 1f0:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <distance_left>
 1f4:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <distance_left+0x1>
 1f8:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <distance_left+0x2>
 1fc:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <distance_left+0x3>
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

00000208 <.LVL3>:
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	48 ec       	ldi	r20, 0xC8	; 200
 20e:	52 e4       	ldi	r21, 0x42	; 66
 210:	69 83       	std	Y+1, r22	; 0x01
 212:	7a 83       	std	Y+2, r23	; 0x02
 214:	8b 83       	std	Y+3, r24	; 0x03
 216:	9c 83       	std	Y+4, r25	; 0x04
 218:	69 81       	ldd	r22, Y+1	; 0x01
 21a:	7a 81       	ldd	r23, Y+2	; 0x02
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

00000224 <.LVL4>:
 224:	69 83       	std	Y+1, r22	; 0x01
 226:	7a 83       	std	Y+2, r23	; 0x02
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	9c 83       	std	Y+4, r25	; 0x04
 22c:	69 81       	ldd	r22, Y+1	; 0x01
 22e:	7a 81       	ldd	r23, Y+2	; 0x02
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	0e 94 57 05 	call	0xaae	; 0xaae <__fixsfsi>

00000238 <.LVL5>:
 238:	86 2f       	mov	r24, r22
 23a:	97 2f       	mov	r25, r23
 23c:	0e 94 2c 03 	call	0x658	; 0x658 <speedStepperLeft>

00000240 <.L2>:
    while(distance_right||distance_left<50){
 240:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 244:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>
 248:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <distance_right+0x2>
 24c:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <distance_right+0x3>
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	ab 83       	std	Y+3, r26	; 0x03
 256:	bc 83       	std	Y+4, r27	; 0x04

00000258 <.Loc.14>:
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	a9 01       	movw	r20, r18
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpsf2>

00000266 <.LVL7>:
 266:	81 11       	cpse	r24, r1
 268:	9c cf       	rjmp	.-200    	; 0x1a2 <.L6>

0000026a <.Loc.15>:
 26a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <distance_left>
 26e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <distance_left+0x1>
 272:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <distance_left+0x2>
 276:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <distance_left+0x3>
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	ab 83       	std	Y+3, r26	; 0x03
 280:	bc 83       	std	Y+4, r27	; 0x04

00000282 <.Loc.16>:
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	48 e4       	ldi	r20, 0x48	; 72
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpsf2>

00000292 <.LVL8>:
 292:	88 23       	and	r24, r24
 294:	0c f4       	brge	.+2      	; 0x298 <.Loc.17>

00000296 <L0^A>:
 296:	85 cf       	rjmp	.-246    	; 0x1a2 <.L6>

00000298 <.Loc.17>:
        else
            speedStepperRight(TOPSPEED*(distance_left/distance_right));
    }
    //stop driving
    speedStepperLeft(0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 2c 03 	call	0x658	; 0x658 <speedStepperLeft>

000002a0 <.LVL9>:
    speedStepperRight(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 25 03 	call	0x64a	; 0x64a <speedStepperRight>

000002a8 <.LVL10>:
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <.L8>:
            speedStepperRight(TOPSPEED*(distance_left/distance_right));
 2b6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <distance_left>
 2ba:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <distance_left+0x1>
 2be:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <distance_left+0x2>
 2c2:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <distance_left+0x3>
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	ab 83       	std	Y+3, r26	; 0x03
 2cc:	bc 83       	std	Y+4, r27	; 0x04
 2ce:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <distance_right>
 2d2:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <distance_right+0x1>
 2d6:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <distance_right+0x2>
 2da:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <distance_right+0x3>
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

000002e6 <.LVL11>:
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	48 ec       	ldi	r20, 0xC8	; 200
 2ec:	52 e4       	ldi	r21, 0x42	; 66
 2ee:	69 83       	std	Y+1, r22	; 0x01
 2f0:	7a 83       	std	Y+2, r23	; 0x02
 2f2:	8b 83       	std	Y+3, r24	; 0x03
 2f4:	9c 83       	std	Y+4, r25	; 0x04
 2f6:	69 81       	ldd	r22, Y+1	; 0x01
 2f8:	7a 81       	ldd	r23, Y+2	; 0x02
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

00000302 <.LVL12>:
 302:	69 83       	std	Y+1, r22	; 0x01
 304:	7a 83       	std	Y+2, r23	; 0x02
 306:	8b 83       	std	Y+3, r24	; 0x03
 308:	9c 83       	std	Y+4, r25	; 0x04
 30a:	69 81       	ldd	r22, Y+1	; 0x01
 30c:	7a 81       	ldd	r23, Y+2	; 0x02
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	9c 81       	ldd	r25, Y+4	; 0x04
 312:	0e 94 57 05 	call	0xaae	; 0xaae <__fixsfsi>

00000316 <.LVL13>:
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
 31a:	0e 94 25 03 	call	0x64a	; 0x64a <speedStepperRight>

0000031e <.LVL14>:
 31e:	90 cf       	rjmp	.-224    	; 0x240 <.L2>

00000320 <rechtsom>:

void rechtsom(void){
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <L0^A>

00000332 <L0^A>:
 332:	00 d0       	rcall	.+0      	; 0x334 <L0^A>

00000334 <L0^A>:
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62

00000338 <.Loc.25>:
    double stepsOuter = ((((distance_left + breedteAGV + afstandWielAgv)*M_PI)/omtrekWiel)*360)/STEPANGLE;
 338:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <distance_left>
 33c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <distance_left+0x1>
 340:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <distance_left+0x2>
 344:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <distance_left+0x3>
 348:	29 83       	std	Y+1, r18	; 0x01
 34a:	3a 83       	std	Y+2, r19	; 0x02
 34c:	4b 83       	std	Y+3, r20	; 0x03
 34e:	5c 83       	std	Y+4, r21	; 0x04
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	46 e0       	ldi	r20, 0x06	; 6
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	69 81       	ldd	r22, Y+1	; 0x01
 35a:	7a 81       	ldd	r23, Y+2	; 0x02
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	9c 81       	ldd	r25, Y+4	; 0x04
 360:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3>

00000364 <.LVL15>:
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 ea       	ldi	r20, 0xA0	; 160
 36a:	50 e4       	ldi	r21, 0x40	; 64
 36c:	69 83       	std	Y+1, r22	; 0x01
 36e:	7a 83       	std	Y+2, r23	; 0x02
 370:	8b 83       	std	Y+3, r24	; 0x03
 372:	9c 83       	std	Y+4, r25	; 0x04
 374:	69 81       	ldd	r22, Y+1	; 0x01
 376:	7a 81       	ldd	r23, Y+2	; 0x02
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3>

00000380 <.LVL16>:
 380:	2b ed       	ldi	r18, 0xDB	; 219
 382:	3f e0       	ldi	r19, 0x0F	; 15
 384:	49 e4       	ldi	r20, 0x49	; 73
 386:	50 e4       	ldi	r21, 0x40	; 64
 388:	69 83       	std	Y+1, r22	; 0x01
 38a:	7a 83       	std	Y+2, r23	; 0x02
 38c:	8b 83       	std	Y+3, r24	; 0x03
 38e:	9c 83       	std	Y+4, r25	; 0x04
 390:	69 81       	ldd	r22, Y+1	; 0x01
 392:	7a 81       	ldd	r23, Y+2	; 0x02
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	9c 81       	ldd	r25, Y+4	; 0x04
 398:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

0000039c <.LVL17>:
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e8       	ldi	r19, 0x80	; 128
 3a0:	4c e3       	ldi	r20, 0x3C	; 60
 3a2:	53 e4       	ldi	r21, 0x43	; 67
 3a4:	69 83       	std	Y+1, r22	; 0x01
 3a6:	7a 83       	std	Y+2, r23	; 0x02
 3a8:	8b 83       	std	Y+3, r24	; 0x03
 3aa:	9c 83       	std	Y+4, r25	; 0x04
 3ac:	69 81       	ldd	r22, Y+1	; 0x01
 3ae:	7a 81       	ldd	r23, Y+2	; 0x02
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

000003b8 <.LVL18>:
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	44 eb       	ldi	r20, 0xB4	; 180
 3be:	53 e4       	ldi	r21, 0x43	; 67
 3c0:	69 83       	std	Y+1, r22	; 0x01
 3c2:	7a 83       	std	Y+2, r23	; 0x02
 3c4:	8b 83       	std	Y+3, r24	; 0x03
 3c6:	9c 83       	std	Y+4, r25	; 0x04
 3c8:	69 81       	ldd	r22, Y+1	; 0x01
 3ca:	7a 81       	ldd	r23, Y+2	; 0x02
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	9c 81       	ldd	r25, Y+4	; 0x04
 3d0:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

000003d4 <.LVL19>:
 3d4:	23 e3       	ldi	r18, 0x33	; 51
 3d6:	33 e3       	ldi	r19, 0x33	; 51
 3d8:	43 eb       	ldi	r20, 0xB3	; 179
 3da:	50 e4       	ldi	r21, 0x40	; 64
 3dc:	69 83       	std	Y+1, r22	; 0x01
 3de:	7a 83       	std	Y+2, r23	; 0x02
 3e0:	8b 83       	std	Y+3, r24	; 0x03
 3e2:	9c 83       	std	Y+4, r25	; 0x04
 3e4:	69 81       	ldd	r22, Y+1	; 0x01
 3e6:	7a 81       	ldd	r23, Y+2	; 0x02
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	9c 81       	ldd	r25, Y+4	; 0x04
 3ec:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

000003f0 <.LVL20>:
 3f0:	06 2f       	mov	r16, r22
 3f2:	17 2f       	mov	r17, r23
 3f4:	8e 83       	std	Y+6, r24	; 0x06
 3f6:	9d 83       	std	Y+5, r25	; 0x05

000003f8 <.Loc.32>:
    double stepsInner = ((((distance_right - afstandWielAgv)*M_PI)/omtrekWiel)*360)/STEPANGLE;
 3f8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <distance_right>
 3fc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <distance_right+0x1>
 400:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <distance_right+0x2>
 404:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <distance_right+0x3>

00000408 <.Loc.34>:
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	ab 83       	std	Y+3, r26	; 0x03
 40e:	bc 83       	std	Y+4, r27	; 0x04

00000410 <.Loc.35>:
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 ea       	ldi	r20, 0xA0	; 160
 416:	50 e4       	ldi	r21, 0x40	; 64
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__subsf3>

00000420 <.LVL24>:
 420:	2b ed       	ldi	r18, 0xDB	; 219
 422:	3f e0       	ldi	r19, 0x0F	; 15
 424:	49 e4       	ldi	r20, 0x49	; 73
 426:	50 e4       	ldi	r21, 0x40	; 64
 428:	69 83       	std	Y+1, r22	; 0x01

0000042a <.Loc.38>:
 42a:	7a 83       	std	Y+2, r23	; 0x02
 42c:	8b 83       	std	Y+3, r24	; 0x03
 42e:	9c 83       	std	Y+4, r25	; 0x04
 430:	69 81       	ldd	r22, Y+1	; 0x01
 432:	7a 81       	ldd	r23, Y+2	; 0x02
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

0000043c <.LVL26>:
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e8       	ldi	r19, 0x80	; 128
 440:	4c e3       	ldi	r20, 0x3C	; 60
 442:	53 e4       	ldi	r21, 0x43	; 67
 444:	69 83       	std	Y+1, r22	; 0x01
 446:	7a 83       	std	Y+2, r23	; 0x02
 448:	8b 83       	std	Y+3, r24	; 0x03
 44a:	9c 83       	std	Y+4, r25	; 0x04
 44c:	69 81       	ldd	r22, Y+1	; 0x01
 44e:	7a 81       	ldd	r23, Y+2	; 0x02
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

00000458 <.LVL27>:
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	44 eb       	ldi	r20, 0xB4	; 180
 45e:	53 e4       	ldi	r21, 0x43	; 67
 460:	69 83       	std	Y+1, r22	; 0x01
 462:	7a 83       	std	Y+2, r23	; 0x02
 464:	8b 83       	std	Y+3, r24	; 0x03
 466:	9c 83       	std	Y+4, r25	; 0x04
 468:	69 81       	ldd	r22, Y+1	; 0x01
 46a:	7a 81       	ldd	r23, Y+2	; 0x02
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	9c 81       	ldd	r25, Y+4	; 0x04
 470:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

00000474 <.LVL28>:
 474:	23 e3       	ldi	r18, 0x33	; 51
 476:	33 e3       	ldi	r19, 0x33	; 51
 478:	43 eb       	ldi	r20, 0xB3	; 179
 47a:	50 e4       	ldi	r21, 0x40	; 64
 47c:	69 83       	std	Y+1, r22	; 0x01
 47e:	7a 83       	std	Y+2, r23	; 0x02
 480:	8b 83       	std	Y+3, r24	; 0x03
 482:	9c 83       	std	Y+4, r25	; 0x04
 484:	69 81       	ldd	r22, Y+1	; 0x01
 486:	7a 81       	ldd	r23, Y+2	; 0x02
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

00000490 <.LVL29>:
    double stepRatio = stepsOuter/stepsInner;
 490:	26 2f       	mov	r18, r22
 492:	37 2f       	mov	r19, r23
 494:	48 2f       	mov	r20, r24
 496:	59 2f       	mov	r21, r25
 498:	09 83       	std	Y+1, r16	; 0x01
 49a:	1a 83       	std	Y+2, r17	; 0x02
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	9b 83       	std	Y+3, r25	; 0x03
 4a0:	ad 81       	ldd	r26, Y+5	; 0x05
 4a2:	ac 83       	std	Y+4, r26	; 0x04
 4a4:	69 81       	ldd	r22, Y+1	; 0x01
 4a6:	7a 81       	ldd	r23, Y+2	; 0x02
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	9c 81       	ldd	r25, Y+4	; 0x04
 4ac:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>

000004b0 <.LVL30>:
 4b0:	c6 2e       	mov	r12, r22
 4b2:	d7 2e       	mov	r13, r23
 4b4:	e8 2e       	mov	r14, r24
 4b6:	f9 2e       	mov	r15, r25

000004b8 <.Loc.43>:

    //clear stepcounter
    stepCounterLeft=0;
 4b8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stepCounterLeft+0x1>
 4bc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <stepCounterLeft>

000004c0 <.Loc.45>:
    //start turning
    while(stepCounterLeft<stepsOuter){
 4c0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 4c4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 4c8:	9c 01       	movw	r18, r24
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	29 83       	std	Y+1, r18	; 0x01
 4d0:	3a 83       	std	Y+2, r19	; 0x02
 4d2:	4b 83       	std	Y+3, r20	; 0x03
 4d4:	5c 83       	std	Y+4, r21	; 0x04
 4d6:	ca 01       	movw	r24, r20
 4d8:	b9 01       	movw	r22, r18
 4da:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__floatunsisf>

000004de <.LVL32>:
 4de:	26 2f       	mov	r18, r22
 4e0:	37 2f       	mov	r19, r23
 4e2:	48 2f       	mov	r20, r24
 4e4:	59 2f       	mov	r21, r25
 4e6:	09 83       	std	Y+1, r16	; 0x01
 4e8:	1a 83       	std	Y+2, r17	; 0x02
 4ea:	8e 81       	ldd	r24, Y+6	; 0x06
 4ec:	8b 83       	std	Y+3, r24	; 0x03
 4ee:	9d 81       	ldd	r25, Y+5	; 0x05
 4f0:	9c 83       	std	Y+4, r25	; 0x04
 4f2:	69 81       	ldd	r22, Y+1	; 0x01
 4f4:	7a 81       	ldd	r23, Y+2	; 0x02
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__gesf2>

000004fe <.LVL33>:
 4fe:	18 16       	cp	r1, r24
 500:	0c f0       	brlt	.+2      	; 0x504 <.L12>

00000502 <L0^A>:
 502:	3f c0       	rjmp	.+126    	; 0x582 <.L10>

00000504 <.L12>:
        speedStepperLeft(TOPSPEED);
 504:	84 e6       	ldi	r24, 0x64	; 100
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 2c 03 	call	0x658	; 0x658 <speedStepperLeft>

0000050c <.LVL34>:
        speedStepperRight(TOPSPEED*stepRatio);
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	48 ec       	ldi	r20, 0xC8	; 200
 512:	52 e4       	ldi	r21, 0x42	; 66
 514:	c9 82       	std	Y+1, r12	; 0x01
 516:	da 82       	std	Y+2, r13	; 0x02
 518:	eb 82       	std	Y+3, r14	; 0x03
 51a:	fc 82       	std	Y+4, r15	; 0x04
 51c:	69 81       	ldd	r22, Y+1	; 0x01
 51e:	7a 81       	ldd	r23, Y+2	; 0x02
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	9c 81       	ldd	r25, Y+4	; 0x04
 524:	0e 94 44 06 	call	0xc88	; 0xc88 <__mulsf3>

00000528 <.LVL35>:
 528:	69 83       	std	Y+1, r22	; 0x01
 52a:	7a 83       	std	Y+2, r23	; 0x02
 52c:	8b 83       	std	Y+3, r24	; 0x03
 52e:	9c 83       	std	Y+4, r25	; 0x04
 530:	69 81       	ldd	r22, Y+1	; 0x01
 532:	7a 81       	ldd	r23, Y+2	; 0x02
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	0e 94 57 05 	call	0xaae	; 0xaae <__fixsfsi>

0000053c <.LVL36>:
 53c:	86 2f       	mov	r24, r22
 53e:	97 2f       	mov	r25, r23
 540:	0e 94 25 03 	call	0x64a	; 0x64a <speedStepperRight>

00000544 <.LVL37>:
    while(stepCounterLeft<stepsOuter){
 544:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 548:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 54c:	9c 01       	movw	r18, r24
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	29 83       	std	Y+1, r18	; 0x01
 554:	3a 83       	std	Y+2, r19	; 0x02
 556:	4b 83       	std	Y+3, r20	; 0x03
 558:	5c 83       	std	Y+4, r21	; 0x04
 55a:	ca 01       	movw	r24, r20
 55c:	b9 01       	movw	r22, r18
 55e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__floatunsisf>

00000562 <.LVL38>:
 562:	20 2f       	mov	r18, r16
 564:	31 2f       	mov	r19, r17
 566:	4e 81       	ldd	r20, Y+6	; 0x06
 568:	5d 81       	ldd	r21, Y+5	; 0x05
 56a:	69 83       	std	Y+1, r22	; 0x01
 56c:	7a 83       	std	Y+2, r23	; 0x02
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	9c 83       	std	Y+4, r25	; 0x04
 572:	69 81       	ldd	r22, Y+1	; 0x01
 574:	7a 81       	ldd	r23, Y+2	; 0x02
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	9c 81       	ldd	r25, Y+4	; 0x04
 57a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpsf2>

0000057e <.LVL39>:
 57e:	88 23       	and	r24, r24
 580:	0c f2       	brlt	.-126    	; 0x504 <.L12>

00000582 <.L10>:
    }
    //stop turning
    speedStepperLeft(0);
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 2c 03 	call	0x658	; 0x658 <speedStepperLeft>

0000058a <.LVL40>:
    speedStepperRight(0);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 25 03 	call	0x64a	; 0x64a <speedStepperRight>

00000592 <.LVL41>:
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17

000005a4 <.Loc.55>:
 5a4:	0f 91       	pop	r16

000005a6 <.Loc.56>:
 5a6:	ff 90       	pop	r15

000005a8 <.Loc.57>:
 5a8:	ef 90       	pop	r14

000005aa <.Loc.58>:
 5aa:	df 90       	pop	r13

000005ac <.Loc.59>:
 5ac:	cf 90       	pop	r12

000005ae <.Loc.60>:
 5ae:	08 95       	ret

000005b0 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 5b0:	6b 9a       	sbi	0x0d, 3	; 13

000005b2 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 5b2:	a1 e0       	ldi	r26, 0x01	; 1
 5b4:	b1 e0       	ldi	r27, 0x01	; 1
 5b6:	8c 91       	ld	r24, X

000005b8 <.Loc.4>:
 5b8:	88 60       	ori	r24, 0x08	; 8
 5ba:	8c 93       	st	X, r24

000005bc <.Loc.5>:
	DDR_DIR_R |= (1<<PORT_DIR_R);
 5bc:	44 b3       	in	r20, 0x14	; 20

000005be <.Loc.7>:
 5be:	23 b3       	in	r18, 0x13	; 19

000005c0 <.Loc.8>:
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	bc 01       	movw	r22, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <.L2^B1>

000005c8 <.L1^B1>:
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23

000005cc <.L2^B1>:
 5cc:	4a 95       	dec	r20
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <.L1^B1>

000005d0 <.Loc.9>:
 5d0:	26 2b       	or	r18, r22
 5d2:	23 bb       	out	0x13, r18	; 19

000005d4 <.Loc.10>:
	DDR_DIR_L |= (1<<PORT_DIR_L);
 5d4:	e2 e0       	ldi	r30, 0x02	; 2
 5d6:	f1 e0       	ldi	r31, 0x01	; 1
 5d8:	30 81       	ld	r19, Z

000005da <.Loc.12>:
 5da:	2c 91       	ld	r18, X

000005dc <.Loc.13>:
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <.L2^B2>

000005de <.L1^B2>:
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25

000005e2 <.L2^B2>:
 5e2:	3a 95       	dec	r19
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <.L1^B2>

000005e6 <.Loc.14>:
 5e6:	82 2b       	or	r24, r18
 5e8:	8c 93       	st	X, r24

000005ea <.Loc.15>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 5ea:	73 98       	cbi	0x0e, 3	; 14

000005ec <.Loc.17>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 5ec:	80 81       	ld	r24, Z
 5ee:	87 7f       	andi	r24, 0xF7	; 247
 5f0:	80 83       	st	Z, r24

000005f2 <.Loc.19>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 5f2:	80 81       	ld	r24, Z
 5f4:	8f 7e       	andi	r24, 0xEF	; 239
 5f6:	80 83       	st	Z, r24

000005f8 <.Loc.21>:
	PORT_DIR_R &= ~(1<<DIRECTION_R);
 5f8:	a4 98       	cbi	0x14, 4	; 20

000005fa <.Loc.23>:
}
 5fa:	08 95       	ret

000005fc <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 5fc:	82 ec       	ldi	r24, 0xC2	; 194
 5fe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000602 <.Loc.27>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 602:	8c e1       	ldi	r24, 0x1C	; 28
 604:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000608 <.Loc.29>:

    //interrupt on inputcapture
    TIMSK3 = (1<<ICIE3);
 608:	80 e2       	ldi	r24, 0x20	; 32
 60a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

0000060e <.Loc.31>:

	//define step value
    OCR3A = STEPVALUE;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 616:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

0000061a <.Loc.33>:
}
 61a:	08 95       	ret

0000061c <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 61c:	82 ec       	ldi	r24, 0xC2	; 194
 61e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000622 <.Loc.37>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 622:	8c e1       	ldi	r24, 0x1C	; 28
 624:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000628 <.Loc.39>:

    //interrupt on inputcapture
    TIMSK4 = (1<<ICIE4);
 628:	80 e2       	ldi	r24, 0x20	; 32
 62a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

0000062e <.Loc.41>:

	//define step value
    OCR4A = STEPVALUE;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 636:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

0000063a <.Loc.43>:
}
 63a:	08 95       	ret

0000063c <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 63c:	0e 94 0e 03 	call	0x61c	; 0x61c <initTimer4Stepper>

00000640 <.LVL0>:
    initTimer3Stepper();
 640:	0e 94 fe 02 	call	0x5fc	; 0x5fc <initTimer3Stepper>

00000644 <.LVL1>:
    initPinsStepper();
 644:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <initPinsStepper>

00000648 <.LVL2>:
}
 648:	08 95       	ret

0000064a <speedStepperRight>:

void speedStepperRight(int PWMRight){
 64a:	28 2f       	mov	r18, r24
 64c:	39 2f       	mov	r19, r25

0000064e <.Loc.51>:
    ICR3 = PWMRight;
 64e:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 652:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000656 <.Loc.53>:
}
 656:	08 95       	ret

00000658 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 658:	28 2f       	mov	r18, r24
 65a:	39 2f       	mov	r19, r25

0000065c <.Loc.56>:
    ICR4 = PWMLeft;
 65c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 660:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000664 <.Loc.58>:
}
 664:	08 95       	ret

00000666 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    PORT_DIR_R ^= ~(1<<DIRECTION_R);
 666:	84 b3       	in	r24, 0x14	; 20
 668:	9f ee       	ldi	r25, 0xEF	; 239
 66a:	89 27       	eor	r24, r25

0000066c <.Loc.61>:
 66c:	84 bb       	out	0x14, r24	; 20

0000066e <.Loc.62>:
}
 66e:	08 95       	ret

00000670 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    PORT_DIR_L ^= (1<<DIRECTION_L);
 670:	e2 e0       	ldi	r30, 0x02	; 2
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	80 81       	ld	r24, Z

00000676 <.Loc.65>:
 676:	90 e1       	ldi	r25, 0x10	; 16
 678:	89 27       	eor	r24, r25
 67a:	80 83       	st	Z, r24

0000067c <.Loc.66>:
}
 67c:	08 95       	ret

0000067e <__vector_45>:

volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 67e:	8f 93       	push	r24
 680:	8f b7       	in	r24, 0x3f	; 63
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25

00000686 <.Loc.68>:
    stepCounterLeft++;
 686:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stepCounterLeft>
 68a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stepCounterLeft+0x1>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stepCounterLeft+0x1>
 694:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stepCounterLeft>

00000698 <.Loc.70>:
}
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	8f bf       	out	0x3f, r24	; 63
 69e:	8f 91       	pop	r24
 6a0:	18 95       	reti

000006a2 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 6a2:	8f 93       	push	r24
 6a4:	8f b7       	in	r24, 0x3f	; 63
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25

000006aa <.Loc.72>:
    stepCounterRight++;
 6aa:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stepCounterRight>
 6ae:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stepCounterRight+0x1>
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stepCounterRight+0x1>
 6b8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stepCounterRight>

000006bc <.Loc.74>:
}
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	8f bf       	out	0x3f, r24	; 63
 6c2:	8f 91       	pop	r24
 6c4:	18 95       	reti

000006c6 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 6c6:	8b e2       	ldi	r24, 0x2B	; 43
 6c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000006cc <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 6cc:	8a e5       	ldi	r24, 0x5A	; 90
 6ce:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000006d2 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 6d2:	81 e2       	ldi	r24, 0x21	; 33
 6d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000006d8 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 6e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000006e4 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 6e4:	84 e1       	ldi	r24, 0x14	; 20
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 6ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

000006f0 <.Loc.11>:
    OCR5C = 20;
 6f0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 6f4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

000006f8 <.Loc.13>:
    //set enable interrupt
    sei();
 6f8:	78 94       	sei

000006fa <.Loc.14>:
}
 6fa:	08 95       	ret

000006fc <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 6fc:	ea e0       	ldi	r30, 0x0A	; 10
 6fe:	f1 e0       	ldi	r31, 0x01	; 1
 700:	80 81       	ld	r24, Z

00000702 <.Loc.17>:
 702:	80 61       	ori	r24, 0x10	; 16
 704:	80 83       	st	Z, r24

00000706 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 706:	80 81       	ld	r24, Z

00000708 <.Loc.19>:
 708:	80 62       	ori	r24, 0x20	; 32
 70a:	80 83       	st	Z, r24

0000070c <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 70c:	ab e0       	ldi	r26, 0x0B	; 11
 70e:	b1 e0       	ldi	r27, 0x01	; 1
 710:	8c 91       	ld	r24, X
 712:	8f 7e       	andi	r24, 0xEF	; 239
 714:	8c 93       	st	X, r24

00000716 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 716:	8c 91       	ld	r24, X
 718:	8f 7d       	andi	r24, 0xDF	; 223
 71a:	8c 93       	st	X, r24

0000071c <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 71c:	80 81       	ld	r24, Z
 71e:	8d 7f       	andi	r24, 0xFD	; 253
 720:	80 83       	st	Z, r24

00000722 <.Loc.26>:
}
 722:	08 95       	ret

00000724 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 724:	0e 94 7e 03 	call	0x6fc	; 0x6fc <init_pins_ultrasoon>

00000728 <.LVL0>:
    init_timer5();
 728:	0e 94 63 03 	call	0x6c6	; 0x6c6 <init_timer5>

0000072c <.LVL1>:
}
 72c:	08 95       	ret

0000072e <__vector_50>:

volatile double distance_right;
volatile double distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 72e:	8f 93       	push	r24
 730:	8f b7       	in	r24, 0x3f	; 63
 732:	8f 93       	push	r24
 734:	8b b7       	in	r24, 0x3b	; 59
 736:	8f 93       	push	r24
 738:	ef 93       	push	r30
 73a:	ff 93       	push	r31

0000073c <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 73c:	e1 e2       	ldi	r30, 0x21	; 33
 73e:	f1 e0       	ldi	r31, 0x01	; 1
 740:	80 81       	ld	r24, Z

00000742 <.Loc.33>:
 742:	80 64       	ori	r24, 0x40	; 64
 744:	80 83       	st	Z, r24

00000746 <.Loc.34>:
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	8f 91       	pop	r24
 74c:	8b bf       	out	0x3b, r24	; 59
 74e:	8f 91       	pop	r24
 750:	8f bf       	out	0x3f, r24	; 63
 752:	8f 91       	pop	r24
 754:	18 95       	reti

00000756 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	0b b6       	in	r0, 0x3b	; 59
 762:	0f 92       	push	r0
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	00 d0       	rcall	.+0      	; 0x782 <L0^A>

00000782 <L0^A>:
 782:	0f 92       	push	r0
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62

00000788 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 788:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

0000078c <.Loc.39>:
 78c:	86 ff       	sbrs	r24, 6
 78e:	26 c0       	rjmp	.+76     	; 0x7dc <.L6>

00000790 <.Loc.40>:
        start_time = ICR5;
 790:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 794:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000798 <.Loc.42>:
 798:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <start_time.0+0x1>
 79c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <start_time.0>

000007a0 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 7a0:	e1 e2       	ldi	r30, 0x21	; 33
 7a2:	f1 e0       	ldi	r31, 0x01	; 1
 7a4:	80 81       	ld	r24, Z
 7a6:	8f 7b       	andi	r24, 0xBF	; 191
 7a8:	80 83       	st	Z, r24

000007aa <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0b be       	out	0x3b, r0	; 59
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 7dc:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 7e0:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000007e4 <.Loc.48>:
 7e4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <start_time.0>
 7e8:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <start_time.0+0x1>
 7ec:	28 1b       	sub	r18, r24
 7ee:	39 0b       	sbc	r19, r25

000007f0 <.Loc.49>:
 7f0:	a9 e0       	ldi	r26, 0x09	; 9
 7f2:	bc e8       	ldi	r27, 0x8C	; 140
 7f4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__umulhisi3>
 7f8:	00 24       	eor	r0, r0
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	00 1c       	adc	r0, r0
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	00 1c       	adc	r0, r0
 806:	89 2f       	mov	r24, r25
 808:	90 2d       	mov	r25, r0

0000080a <.Loc.50>:
        if (current_sensor == 0) {
 80a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <current_sensor>
 80e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <current_sensor+0x1>

00000812 <.Loc.52>:
 812:	23 2b       	or	r18, r19
 814:	99 f5       	brne	.+102    	; 0x87c <.L8>

00000816 <.Loc.53>:
            distance_left = distance*100;  // Store distance for Sensor A
 816:	44 e6       	ldi	r20, 0x64	; 100
 818:	48 9f       	mul	r20, r24
 81a:	90 01       	movw	r18, r0
 81c:	49 9f       	mul	r20, r25
 81e:	30 0d       	add	r19, r0
 820:	11 24       	eor	r1, r1

00000822 <.Loc.55>:
 822:	c9 01       	movw	r24, r18
 824:	33 0f       	add	r19, r19
 826:	aa 0b       	sbc	r26, r26
 828:	bb 0b       	sbc	r27, r27

0000082a <.Loc.56>:
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	9a 83       	std	Y+2, r25	; 0x02
 82e:	ab 83       	std	Y+3, r26	; 0x03
 830:	bc 83       	std	Y+4, r27	; 0x04
 832:	bc 01       	movw	r22, r24
 834:	cd 01       	movw	r24, r26
 836:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__floatsisf>

0000083a <.LVL4>:
 83a:	46 2f       	mov	r20, r22
 83c:	57 2f       	mov	r21, r23
 83e:	68 2f       	mov	r22, r24
 840:	79 2f       	mov	r23, r25
 842:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <distance_left>
 846:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <distance_left+0x1>
 84a:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <distance_left+0x2>
 84e:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <distance_left+0x3>

00000852 <.L9>:
        if (current_sensor == 0) {
 852:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <current_sensor>
 856:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <current_sensor+0x1>

0000085a <.Loc.59>:
 85a:	89 2b       	or	r24, r25
 85c:	41 f5       	brne	.+80     	; 0x8ae <.L10>

0000085e <.Loc.60>:
            current_sensor = 1;  // Switch to Sensor B
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <current_sensor+0x1>
 866:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <current_sensor>

0000086a <.Loc.62>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 86a:	e0 e2       	ldi	r30, 0x20	; 32
 86c:	f1 e0       	ldi	r31, 0x01	; 1
 86e:	80 81       	ld	r24, Z
 870:	87 7f       	andi	r24, 0xF7	; 247
 872:	80 83       	st	Z, r24

00000874 <.Loc.64>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 874:	80 81       	ld	r24, Z

00000876 <.Loc.65>:
 876:	80 62       	ori	r24, 0x20	; 32
 878:	80 83       	st	Z, r24
 87a:	97 cf       	rjmp	.-210    	; 0x7aa <.L5>

0000087c <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 87c:	9c 01       	movw	r18, r24
 87e:	99 0f       	add	r25, r25
 880:	44 0b       	sbc	r20, r20
 882:	55 0b       	sbc	r21, r21
 884:	29 83       	std	Y+1, r18	; 0x01
 886:	3a 83       	std	Y+2, r19	; 0x02
 888:	4b 83       	std	Y+3, r20	; 0x03
 88a:	5c 83       	std	Y+4, r21	; 0x04
 88c:	ca 01       	movw	r24, r20
 88e:	b9 01       	movw	r22, r18
 890:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__floatsisf>

00000894 <.LVL6>:
 894:	46 2f       	mov	r20, r22
 896:	57 2f       	mov	r21, r23
 898:	68 2f       	mov	r22, r24
 89a:	79 2f       	mov	r23, r25
 89c:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <distance_right>
 8a0:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <distance_right+0x1>
 8a4:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <distance_right+0x2>
 8a8:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <distance_right+0x3>
 8ac:	d2 cf       	rjmp	.-92     	; 0x852 <.L9>

000008ae <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 8ae:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <current_sensor+0x1>
 8b2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <current_sensor>

000008b6 <.Loc.71>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 8b6:	e0 e2       	ldi	r30, 0x20	; 32
 8b8:	f1 e0       	ldi	r31, 0x01	; 1
 8ba:	80 81       	ld	r24, Z
 8bc:	8f 7d       	andi	r24, 0xDF	; 223
 8be:	80 83       	st	Z, r24

000008c0 <.Loc.73>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 8c0:	80 81       	ld	r24, Z

000008c2 <.Loc.74>:
 8c2:	88 60       	ori	r24, 0x08	; 8
 8c4:	80 83       	st	Z, r24

000008c6 <.LBE2>:
}
 8c6:	71 cf       	rjmp	.-286    	; 0x7aa <.L5>

000008c8 <__umulhisi3>:
 8c8:	a2 9f       	mul	r26, r18

000008ca <.Loc.1>:
 8ca:	b0 01       	movw	r22, r0

000008cc <.Loc.2>:
 8cc:	b3 9f       	mul	r27, r19

000008ce <.Loc.3>:
 8ce:	c0 01       	movw	r24, r0

000008d0 <.Loc.4>:
 8d0:	a3 9f       	mul	r26, r19

000008d2 <.Loc.5>:
 8d2:	70 0d       	add	r23, r0

000008d4 <.Loc.6>:
 8d4:	81 1d       	adc	r24, r1

000008d6 <.Loc.7>:
 8d6:	11 24       	eor	r1, r1

000008d8 <.Loc.8>:
 8d8:	91 1d       	adc	r25, r1

000008da <.Loc.9>:
 8da:	b2 9f       	mul	r27, r18

000008dc <.Loc.10>:
 8dc:	70 0d       	add	r23, r0

000008de <.Loc.11>:
 8de:	81 1d       	adc	r24, r1

000008e0 <.Loc.12>:
 8e0:	11 24       	eor	r1, r1

000008e2 <.Loc.13>:
 8e2:	91 1d       	adc	r25, r1

000008e4 <.Loc.14>:
 8e4:	08 95       	ret

000008e6 <__subsf3>:
 8e6:	50 58       	subi	r21, 0x80	; 128

000008e8 <__addsf3>:
 8e8:	bb 27       	eor	r27, r27
 8ea:	aa 27       	eor	r26, r26
 8ec:	0e 94 8b 04 	call	0x916	; 0x916 <__addsf3x>
 8f0:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>

000008f4 <.L^B1>:
 8f4:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
 8f8:	38 f0       	brcs	.+14     	; 0x908 <.L_nan>
 8fa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
 8fe:	20 f0       	brcs	.+8      	; 0x908 <.L_nan>
 900:	39 f4       	brne	.+14     	; 0x910 <.L_inf>
 902:	9f 3f       	cpi	r25, 0xFF	; 255
 904:	19 f4       	brne	.+6      	; 0x90c <.L_infB>
 906:	26 f4       	brtc	.+8      	; 0x910 <.L_inf>

00000908 <.L_nan>:
 908:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>

0000090c <.L_infB>:
 90c:	0e f4       	brtc	.+2      	; 0x910 <.L_inf>
 90e:	e0 95       	com	r30

00000910 <.L_inf>:
 910:	e7 fb       	bst	r30, 7
 912:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

00000916 <__addsf3x>:
 916:	e9 2f       	mov	r30, r25
 918:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
 91c:	58 f3       	brcs	.-42     	; 0x8f4 <.L^B1>
 91e:	ba 17       	cp	r27, r26
 920:	62 07       	cpc	r22, r18
 922:	73 07       	cpc	r23, r19
 924:	84 07       	cpc	r24, r20
 926:	95 07       	cpc	r25, r21
 928:	20 f0       	brcs	.+8      	; 0x932 <.L2^B1>
 92a:	79 f4       	brne	.+30     	; 0x94a <.L4^B1>
 92c:	a6 f5       	brtc	.+104    	; 0x996 <.L_add>
 92e:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_zero>

00000932 <.L2^B1>:
 932:	0e f4       	brtc	.+2      	; 0x936 <.L3^B1>
 934:	e0 95       	com	r30

00000936 <.L3^B1>:
 936:	0b 2e       	mov	r0, r27
 938:	ba 2f       	mov	r27, r26
 93a:	a0 2d       	mov	r26, r0
 93c:	0b 01       	movw	r0, r22
 93e:	b9 01       	movw	r22, r18
 940:	90 01       	movw	r18, r0
 942:	0c 01       	movw	r0, r24
 944:	ca 01       	movw	r24, r20
 946:	a0 01       	movw	r20, r0
 948:	11 24       	eor	r1, r1

0000094a <.L4^B1>:
 94a:	ff 27       	eor	r31, r31
 94c:	59 1b       	sub	r21, r25

0000094e <.L5^B1>:
 94e:	99 f0       	breq	.+38     	; 0x976 <.L7^B1>
 950:	59 3f       	cpi	r21, 0xF9	; 249
 952:	50 f4       	brcc	.+20     	; 0x968 <.L6^B1>
 954:	50 3e       	cpi	r21, 0xE0	; 224
 956:	68 f1       	brcs	.+90     	; 0x9b2 <.L_ret>
 958:	1a 16       	cp	r1, r26
 95a:	f0 40       	sbci	r31, 0x00	; 0
 95c:	a2 2f       	mov	r26, r18
 95e:	23 2f       	mov	r18, r19
 960:	34 2f       	mov	r19, r20
 962:	44 27       	eor	r20, r20
 964:	58 5f       	subi	r21, 0xF8	; 248
 966:	f3 cf       	rjmp	.-26     	; 0x94e <.L5^B1>

00000968 <.L6^B1>:
 968:	46 95       	lsr	r20
 96a:	37 95       	ror	r19
 96c:	27 95       	ror	r18
 96e:	a7 95       	ror	r26
 970:	f0 40       	sbci	r31, 0x00	; 0
 972:	53 95       	inc	r21
 974:	c9 f7       	brne	.-14     	; 0x968 <.L6^B1>

00000976 <.L7^B1>:
 976:	7e f4       	brtc	.+30     	; 0x996 <.L_add>
 978:	1f 16       	cp	r1, r31
 97a:	ba 0b       	sbc	r27, r26
 97c:	62 0b       	sbc	r22, r18
 97e:	73 0b       	sbc	r23, r19
 980:	84 0b       	sbc	r24, r20
 982:	ba f0       	brmi	.+46     	; 0x9b2 <.L_ret>

00000984 <.L8^B1>:
 984:	91 50       	subi	r25, 0x01	; 1
 986:	a1 f0       	breq	.+40     	; 0x9b0 <.L9^B1>
 988:	ff 0f       	add	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	c2 f7       	brpl	.-16     	; 0x984 <.L8^B1>
 994:	0e c0       	rjmp	.+28     	; 0x9b2 <.L_ret>

00000996 <.L_add>:
 996:	ba 0f       	add	r27, r26
 998:	62 1f       	adc	r22, r18
 99a:	73 1f       	adc	r23, r19
 99c:	84 1f       	adc	r24, r20
 99e:	48 f4       	brcc	.+18     	; 0x9b2 <.L_ret>
 9a0:	87 95       	ror	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f7 95       	ror	r31
 9aa:	9e 3f       	cpi	r25, 0xFE	; 254
 9ac:	08 f0       	brcs	.+2      	; 0x9b0 <.L9^B1>
 9ae:	b0 cf       	rjmp	.-160    	; 0x910 <.L_inf>

000009b0 <.L9^B1>:
 9b0:	93 95       	inc	r25

000009b2 <.L_ret>:
 9b2:	88 0f       	add	r24, r24
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <.L1^B1>
 9b6:	99 27       	eor	r25, r25

000009b8 <.L1^B1>:
 9b8:	ee 0f       	add	r30, r30
 9ba:	97 95       	ror	r25
 9bc:	87 95       	ror	r24
 9be:	08 95       	ret

000009c0 <__cmpsf2>:
 9c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_cmp>
 9c4:	08 f4       	brcc	.+2      	; 0x9c8 <.L1^B1>
 9c6:	81 e0       	ldi	r24, 0x01	; 1

000009c8 <.L1^B1>:
 9c8:	08 95       	ret

000009ca <__divsf3>:
 9ca:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divsf3x>
 9ce:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>

000009d2 <.L^B1>:
 9d2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
 9d6:	58 f0       	brcs	.+22     	; 0x9ee <.L_nan>
 9d8:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
 9dc:	40 f0       	brcs	.+16     	; 0x9ee <.L_nan>
 9de:	29 f4       	brne	.+10     	; 0x9ea <.L_zr>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	29 f0       	breq	.+10     	; 0x9ee <.L_nan>

000009e4 <.L_inf>:
 9e4:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

000009e8 <.L1^B1>:
 9e8:	51 11       	cpse	r21, r1

000009ea <.L_zr>:
 9ea:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>

000009ee <.L_nan>:
 9ee:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>

000009f2 <__divsf3x>:
 9f2:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
 9f6:	68 f3       	brcs	.-38     	; 0x9d2 <.L^B1>

000009f8 <__divsf3_pse>:
 9f8:	99 23       	and	r25, r25
 9fa:	b1 f3       	breq	.-20     	; 0x9e8 <.L1^B1>
 9fc:	55 23       	and	r21, r21
 9fe:	91 f3       	breq	.-28     	; 0x9e4 <.L_inf>
 a00:	95 1b       	sub	r25, r21
 a02:	55 0b       	sbc	r21, r21
 a04:	bb 27       	eor	r27, r27
 a06:	aa 27       	eor	r26, r26

00000a08 <.L2^B1>:
 a08:	62 17       	cp	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	38 f0       	brcs	.+14     	; 0xa1e <.L3^B1>
 a10:	9f 5f       	subi	r25, 0xFF	; 255
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	22 0f       	add	r18, r18
 a16:	33 1f       	adc	r19, r19
 a18:	44 1f       	adc	r20, r20
 a1a:	aa 1f       	adc	r26, r26
 a1c:	a9 f3       	breq	.-22     	; 0xa08 <.L2^B1>

00000a1e <.L3^B1>:
 a1e:	35 d0       	rcall	.+106    	; 0xa8a <.L_div>
 a20:	0e 2e       	mov	r0, r30
 a22:	3a f0       	brmi	.+14     	; 0xa32 <.L5^B1>

00000a24 <.L4^B1>:
 a24:	e0 e8       	ldi	r30, 0x80	; 128
 a26:	32 d0       	rcall	.+100    	; 0xa8c <.L_div1>
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	e6 95       	lsr	r30
 a2e:	00 1c       	adc	r0, r0
 a30:	ca f7       	brpl	.-14     	; 0xa24 <.L4^B1>

00000a32 <.L5^B1>:
 a32:	2b d0       	rcall	.+86     	; 0xa8a <.L_div>
 a34:	fe 2f       	mov	r31, r30
 a36:	29 d0       	rcall	.+82     	; 0xa8a <.L_div>
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	bb 1f       	adc	r27, r27
 a40:	26 17       	cp	r18, r22
 a42:	37 07       	cpc	r19, r23
 a44:	48 07       	cpc	r20, r24
 a46:	ab 07       	cpc	r26, r27
 a48:	b0 e8       	ldi	r27, 0x80	; 128
 a4a:	09 f0       	breq	.+2      	; 0xa4e <.L4^B2>
 a4c:	bb 0b       	sbc	r27, r27

00000a4e <.L4^B2>:
 a4e:	80 2d       	mov	r24, r0
 a50:	bf 01       	movw	r22, r30
 a52:	ff 27       	eor	r31, r31
 a54:	93 58       	subi	r25, 0x83	; 131
 a56:	5f 4f       	sbci	r21, 0xFF	; 255
 a58:	3a f0       	brmi	.+14     	; 0xa68 <.L13^B1>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	78 f0       	brcs	.+30     	; 0xa7e <.L15^B1>
 a60:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

00000a64 <.L12^B1>:
 a64:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>

00000a68 <.L13^B1>:
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	e4 f3       	brlt	.-8      	; 0xa64 <.L12^B1>
 a6c:	98 3e       	cpi	r25, 0xE8	; 232
 a6e:	d4 f3       	brlt	.-12     	; 0xa64 <.L12^B1>

00000a70 <.L14^B1>:
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f7 95       	ror	r31
 a7a:	9f 5f       	subi	r25, 0xFF	; 255
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <.L14^B1>

00000a7e <.L15^B1>:
 a7e:	88 0f       	add	r24, r24
 a80:	91 1d       	adc	r25, r1
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	97 f9       	bld	r25, 7
 a88:	08 95       	ret

00000a8a <.L_div>:
 a8a:	e1 e0       	ldi	r30, 0x01	; 1

00000a8c <.L_div1>:
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	bb 1f       	adc	r27, r27
 a94:	62 17       	cp	r22, r18
 a96:	73 07       	cpc	r23, r19
 a98:	84 07       	cpc	r24, r20
 a9a:	ba 07       	cpc	r27, r26
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <.L2^B2>
 a9e:	62 1b       	sub	r22, r18
 aa0:	73 0b       	sbc	r23, r19
 aa2:	84 0b       	sbc	r24, r20
 aa4:	ba 0b       	sbc	r27, r26

00000aa6 <.L2^B2>:
 aa6:	ee 1f       	adc	r30, r30
 aa8:	88 f7       	brcc	.-30     	; 0xa8c <.L_div1>
 aaa:	e0 95       	com	r30
 aac:	08 95       	ret

00000aae <__fixsfsi>:
 aae:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
 ab2:	68 94       	set
 ab4:	b1 11       	cpse	r27, r1
 ab6:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>
 aba:	08 95       	ret

00000abc <__fixunssfsi>:
 abc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_splitA>
 ac0:	88 f0       	brcs	.+34     	; 0xae4 <.L_err>
 ac2:	9f 57       	subi	r25, 0x7F	; 127
 ac4:	98 f0       	brcs	.+38     	; 0xaec <.L_zr>
 ac6:	b9 2f       	mov	r27, r25
 ac8:	99 27       	eor	r25, r25
 aca:	b7 51       	subi	r27, 0x17	; 23
 acc:	b0 f0       	brcs	.+44     	; 0xafa <.L4^B1>
 ace:	e1 f0       	breq	.+56     	; 0xb08 <.L_sign>

00000ad0 <.L1^B1>:
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	99 1f       	adc	r25, r25
 ad8:	1a f0       	brmi	.+6      	; 0xae0 <.L2^B1>
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <.L1^B1>
 ade:	14 c0       	rjmp	.+40     	; 0xb08 <.L_sign>

00000ae0 <.L2^B1>:
 ae0:	b1 30       	cpi	r27, 0x01	; 1
 ae2:	91 f0       	breq	.+36     	; 0xb08 <.L_sign>

00000ae4 <.L_err>:
 ae4:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_zero>
 ae8:	b1 e0       	ldi	r27, 0x01	; 1
 aea:	08 95       	ret

00000aec <.L_zr>:
 aec:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_zero>

00000af0 <.L3^B1>:
 af0:	67 2f       	mov	r22, r23
 af2:	78 2f       	mov	r23, r24
 af4:	88 27       	eor	r24, r24
 af6:	b8 5f       	subi	r27, 0xF8	; 248
 af8:	39 f0       	breq	.+14     	; 0xb08 <.L_sign>

00000afa <.L4^B1>:
 afa:	b9 3f       	cpi	r27, 0xF9	; 249
 afc:	cc f3       	brlt	.-14     	; 0xaf0 <.L3^B1>

00000afe <.L5^B1>:
 afe:	86 95       	lsr	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b3 95       	inc	r27
 b06:	d9 f7       	brne	.-10     	; 0xafe <.L5^B1>

00000b08 <.L_sign>:
 b08:	3e f4       	brtc	.+14     	; 0xb18 <.L6^B1>
 b0a:	90 95       	com	r25
 b0c:	80 95       	com	r24
 b0e:	70 95       	com	r23
 b10:	61 95       	neg	r22
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255

00000b18 <.L6^B1>:
 b18:	08 95       	ret

00000b1a <__floatunsisf>:
 b1a:	e8 94       	clt
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <.L1^B1>

00000b1e <__floatsisf>:
 b1e:	97 fb       	bst	r25, 7
 b20:	3e f4       	brtc	.+14     	; 0xb30 <.L1^B1>
 b22:	90 95       	com	r25
 b24:	80 95       	com	r24
 b26:	70 95       	com	r23
 b28:	61 95       	neg	r22
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255

00000b30 <.L1^B1>:
 b30:	99 23       	and	r25, r25
 b32:	a9 f0       	breq	.+42     	; 0xb5e <.L4^B1>
 b34:	f9 2f       	mov	r31, r25
 b36:	96 e9       	ldi	r25, 0x96	; 150
 b38:	bb 27       	eor	r27, r27

00000b3a <.L2^B1>:
 b3a:	93 95       	inc	r25
 b3c:	f6 95       	lsr	r31
 b3e:	87 95       	ror	r24
 b40:	77 95       	ror	r23
 b42:	67 95       	ror	r22
 b44:	b7 95       	ror	r27
 b46:	f1 11       	cpse	r31, r1
 b48:	f8 cf       	rjmp	.-16     	; 0xb3a <.L2^B1>
 b4a:	fa f4       	brpl	.+62     	; 0xb8a <.L_pack>
 b4c:	bb 0f       	add	r27, r27
 b4e:	11 f4       	brne	.+4      	; 0xb54 <.L3^B1>
 b50:	60 ff       	sbrs	r22, 0
 b52:	1b c0       	rjmp	.+54     	; 0xb8a <.L_pack>

00000b54 <.L3^B1>:
 b54:	6f 5f       	subi	r22, 0xFF	; 255
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	16 c0       	rjmp	.+44     	; 0xb8a <.L_pack>

00000b5e <.L4^B1>:
 b5e:	88 23       	and	r24, r24
 b60:	11 f0       	breq	.+4      	; 0xb66 <.L5^B1>
 b62:	96 e9       	ldi	r25, 0x96	; 150
 b64:	11 c0       	rjmp	.+34     	; 0xb88 <.L8^B1>

00000b66 <.L5^B1>:
 b66:	77 23       	and	r23, r23
 b68:	21 f0       	breq	.+8      	; 0xb72 <.L6^B1>
 b6a:	9e e8       	ldi	r25, 0x8E	; 142
 b6c:	87 2f       	mov	r24, r23
 b6e:	76 2f       	mov	r23, r22
 b70:	05 c0       	rjmp	.+10     	; 0xb7c <.L7^B1>

00000b72 <.L6^B1>:
 b72:	66 23       	and	r22, r22
 b74:	71 f0       	breq	.+28     	; 0xb92 <.L9^B1>
 b76:	96 e8       	ldi	r25, 0x86	; 134
 b78:	86 2f       	mov	r24, r22
 b7a:	70 e0       	ldi	r23, 0x00	; 0

00000b7c <.L7^B1>:
 b7c:	60 e0       	ldi	r22, 0x00	; 0
 b7e:	2a f0       	brmi	.+10     	; 0xb8a <.L_pack>

00000b80 <.L10^B1>:
 b80:	9a 95       	dec	r25
 b82:	66 0f       	add	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24

00000b88 <.L8^B1>:
 b88:	da f7       	brpl	.-10     	; 0xb80 <.L10^B1>

00000b8a <.L_pack>:
 b8a:	88 0f       	add	r24, r24
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	97 f9       	bld	r25, 7

00000b92 <.L9^B1>:
 b92:	08 95       	ret

00000b94 <__fp_cmp>:
 b94:	99 0f       	add	r25, r25
 b96:	00 08       	sbc	r0, r0
 b98:	55 0f       	add	r21, r21
 b9a:	aa 0b       	sbc	r26, r26
 b9c:	e0 e8       	ldi	r30, 0x80	; 128
 b9e:	fe ef       	ldi	r31, 0xFE	; 254
 ba0:	16 16       	cp	r1, r22
 ba2:	17 06       	cpc	r1, r23
 ba4:	e8 07       	cpc	r30, r24
 ba6:	f9 07       	cpc	r31, r25
 ba8:	c0 f0       	brcs	.+48     	; 0xbda <.L9^B1>
 baa:	12 16       	cp	r1, r18
 bac:	13 06       	cpc	r1, r19
 bae:	e4 07       	cpc	r30, r20
 bb0:	f5 07       	cpc	r31, r21
 bb2:	98 f0       	brcs	.+38     	; 0xbda <.L9^B1>
 bb4:	62 1b       	sub	r22, r18
 bb6:	73 0b       	sbc	r23, r19
 bb8:	84 0b       	sbc	r24, r20
 bba:	95 0b       	sbc	r25, r21
 bbc:	39 f4       	brne	.+14     	; 0xbcc <.L1^B1>
 bbe:	0a 26       	eor	r0, r26
 bc0:	61 f0       	breq	.+24     	; 0xbda <.L9^B1>
 bc2:	23 2b       	or	r18, r19
 bc4:	24 2b       	or	r18, r20
 bc6:	25 2b       	or	r18, r21
 bc8:	21 f4       	brne	.+8      	; 0xbd2 <.L2^B1>
 bca:	08 95       	ret

00000bcc <.L1^B1>:
 bcc:	0a 26       	eor	r0, r26
 bce:	09 f4       	brne	.+2      	; 0xbd2 <.L2^B1>
 bd0:	a1 40       	sbci	r26, 0x01	; 1

00000bd2 <.L2^B1>:
 bd2:	a6 95       	lsr	r26
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	81 1d       	adc	r24, r1
 bd8:	81 1d       	adc	r24, r1

00000bda <.L9^B1>:
 bda:	08 95       	ret

00000bdc <__fp_inf>:
 bdc:	97 f9       	bld	r25, 7
 bde:	9f 67       	ori	r25, 0x7F	; 127
 be0:	80 e8       	ldi	r24, 0x80	; 128
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	60 e0       	ldi	r22, 0x00	; 0
 be6:	08 95       	ret

00000be8 <__fp_nan>:
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	80 ec       	ldi	r24, 0xC0	; 192
 bec:	08 95       	ret

00000bee <__fp_pscA>:
 bee:	00 24       	eor	r0, r0
 bf0:	0a 94       	dec	r0
 bf2:	16 16       	cp	r1, r22
 bf4:	17 06       	cpc	r1, r23
 bf6:	18 06       	cpc	r1, r24
 bf8:	09 06       	cpc	r0, r25
 bfa:	08 95       	ret

00000bfc <__fp_pscB>:
 bfc:	00 24       	eor	r0, r0
 bfe:	0a 94       	dec	r0
 c00:	12 16       	cp	r1, r18
 c02:	13 06       	cpc	r1, r19
 c04:	14 06       	cpc	r1, r20
 c06:	05 06       	cpc	r0, r21
 c08:	08 95       	ret

00000c0a <__fp_round>:
 c0a:	09 2e       	mov	r0, r25
 c0c:	03 94       	inc	r0
 c0e:	00 0c       	add	r0, r0
 c10:	11 f4       	brne	.+4      	; 0xc16 <.L1^B1>
 c12:	88 23       	and	r24, r24
 c14:	52 f0       	brmi	.+20     	; 0xc2a <.L3^B1>

00000c16 <.L1^B1>:
 c16:	bb 0f       	add	r27, r27
 c18:	40 f4       	brcc	.+16     	; 0xc2a <.L3^B1>
 c1a:	bf 2b       	or	r27, r31
 c1c:	11 f4       	brne	.+4      	; 0xc22 <.L2^B1>
 c1e:	60 ff       	sbrs	r22, 0
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <.L3^B1>

00000c22 <.L2^B1>:
 c22:	6f 5f       	subi	r22, 0xFF	; 255
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255

00000c2a <.L3^B1>:
 c2a:	08 95       	ret

00000c2c <__fp_split3>:
 c2c:	57 fd       	sbrc	r21, 7
 c2e:	90 58       	subi	r25, 0x80	; 128
 c30:	44 0f       	add	r20, r20
 c32:	55 1f       	adc	r21, r21
 c34:	59 f0       	breq	.+22     	; 0xc4c <.L4^B1>
 c36:	5f 3f       	cpi	r21, 0xFF	; 255
 c38:	71 f0       	breq	.+28     	; 0xc56 <.L5^B1>

00000c3a <.L1^B1>:
 c3a:	47 95       	ror	r20

00000c3c <__fp_splitA>:
 c3c:	88 0f       	add	r24, r24
 c3e:	97 fb       	bst	r25, 7
 c40:	99 1f       	adc	r25, r25
 c42:	61 f0       	breq	.+24     	; 0xc5c <.L6^B1>
 c44:	9f 3f       	cpi	r25, 0xFF	; 255
 c46:	79 f0       	breq	.+30     	; 0xc66 <.L7^B1>

00000c48 <.L3^B1>:
 c48:	87 95       	ror	r24
 c4a:	08 95       	ret

00000c4c <.L4^B1>:
 c4c:	12 16       	cp	r1, r18
 c4e:	13 06       	cpc	r1, r19
 c50:	14 06       	cpc	r1, r20
 c52:	55 1f       	adc	r21, r21
 c54:	f2 cf       	rjmp	.-28     	; 0xc3a <.L1^B1>

00000c56 <.L5^B1>:
 c56:	46 95       	lsr	r20
 c58:	f1 df       	rcall	.-30     	; 0xc3c <__fp_splitA>
 c5a:	08 c0       	rjmp	.+16     	; 0xc6c <.L8^B1>

00000c5c <.L6^B1>:
 c5c:	16 16       	cp	r1, r22
 c5e:	17 06       	cpc	r1, r23
 c60:	18 06       	cpc	r1, r24
 c62:	99 1f       	adc	r25, r25
 c64:	f1 cf       	rjmp	.-30     	; 0xc48 <.L3^B1>

00000c66 <.L7^B1>:
 c66:	86 95       	lsr	r24
 c68:	71 05       	cpc	r23, r1
 c6a:	61 05       	cpc	r22, r1

00000c6c <.L8^B1>:
 c6c:	08 94       	sec
 c6e:	08 95       	ret

00000c70 <__fp_zero>:
 c70:	e8 94       	clt

00000c72 <__fp_szero>:
 c72:	bb 27       	eor	r27, r27
 c74:	66 27       	eor	r22, r22
 c76:	77 27       	eor	r23, r23
 c78:	cb 01       	movw	r24, r22
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__gesf2>:
 c7e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_cmp>
 c82:	08 f4       	brcc	.+2      	; 0xc86 <.L1^B1>
 c84:	8f ef       	ldi	r24, 0xFF	; 255

00000c86 <.L1^B1>:
 c86:	08 95       	ret

00000c88 <__mulsf3>:
 c88:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3x>
 c8c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>

00000c90 <.L^B1>:
 c90:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_pscA>
 c94:	38 f0       	brcs	.+14     	; 0xca4 <.L1^B1>
 c96:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_pscB>
 c9a:	20 f0       	brcs	.+8      	; 0xca4 <.L1^B1>
 c9c:	95 23       	and	r25, r21
 c9e:	11 f0       	breq	.+4      	; 0xca4 <.L1^B1>
 ca0:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

00000ca4 <.L1^B1>:
 ca4:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_nan>

00000ca8 <.L2^B1>:
 ca8:	11 24       	eor	r1, r1
 caa:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>

00000cae <__mulsf3x>:
 cae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_split3>
 cb2:	70 f3       	brcs	.-36     	; 0xc90 <.L^B1>

00000cb4 <__mulsf3_pse>:
 cb4:	95 9f       	mul	r25, r21
 cb6:	c1 f3       	breq	.-16     	; 0xca8 <.L2^B1>
 cb8:	95 0f       	add	r25, r21
 cba:	50 e0       	ldi	r21, 0x00	; 0
 cbc:	55 1f       	adc	r21, r21
 cbe:	62 9f       	mul	r22, r18
 cc0:	f0 01       	movw	r30, r0
 cc2:	72 9f       	mul	r23, r18
 cc4:	bb 27       	eor	r27, r27
 cc6:	f0 0d       	add	r31, r0
 cc8:	b1 1d       	adc	r27, r1
 cca:	63 9f       	mul	r22, r19
 ccc:	aa 27       	eor	r26, r26
 cce:	f0 0d       	add	r31, r0
 cd0:	b1 1d       	adc	r27, r1
 cd2:	aa 1f       	adc	r26, r26
 cd4:	64 9f       	mul	r22, r20
 cd6:	66 27       	eor	r22, r22
 cd8:	b0 0d       	add	r27, r0
 cda:	a1 1d       	adc	r26, r1
 cdc:	66 1f       	adc	r22, r22
 cde:	82 9f       	mul	r24, r18
 ce0:	22 27       	eor	r18, r18
 ce2:	b0 0d       	add	r27, r0
 ce4:	a1 1d       	adc	r26, r1
 ce6:	62 1f       	adc	r22, r18
 ce8:	73 9f       	mul	r23, r19
 cea:	b0 0d       	add	r27, r0
 cec:	a1 1d       	adc	r26, r1
 cee:	62 1f       	adc	r22, r18
 cf0:	83 9f       	mul	r24, r19
 cf2:	a0 0d       	add	r26, r0
 cf4:	61 1d       	adc	r22, r1
 cf6:	22 1f       	adc	r18, r18
 cf8:	74 9f       	mul	r23, r20
 cfa:	33 27       	eor	r19, r19
 cfc:	a0 0d       	add	r26, r0
 cfe:	61 1d       	adc	r22, r1
 d00:	23 1f       	adc	r18, r19
 d02:	84 9f       	mul	r24, r20
 d04:	60 0d       	add	r22, r0
 d06:	21 1d       	adc	r18, r1
 d08:	82 2f       	mov	r24, r18
 d0a:	76 2f       	mov	r23, r22
 d0c:	6a 2f       	mov	r22, r26
 d0e:	11 24       	eor	r1, r1
 d10:	9f 57       	subi	r25, 0x7F	; 127
 d12:	50 40       	sbci	r21, 0x00	; 0
 d14:	9a f0       	brmi	.+38     	; 0xd3c <.L13^B1>
 d16:	f1 f0       	breq	.+60     	; 0xd54 <.L15^B1>

00000d18 <.L10^B1>:
 d18:	88 23       	and	r24, r24
 d1a:	4a f0       	brmi	.+18     	; 0xd2e <.L11^B1>
 d1c:	ee 0f       	add	r30, r30
 d1e:	ff 1f       	adc	r31, r31
 d20:	bb 1f       	adc	r27, r27
 d22:	66 1f       	adc	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	91 50       	subi	r25, 0x01	; 1
 d2a:	50 40       	sbci	r21, 0x00	; 0
 d2c:	a9 f7       	brne	.-22     	; 0xd18 <.L10^B1>

00000d2e <.L11^B1>:
 d2e:	9e 3f       	cpi	r25, 0xFE	; 254
 d30:	51 05       	cpc	r21, r1
 d32:	80 f0       	brcs	.+32     	; 0xd54 <.L15^B1>
 d34:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_inf>

00000d38 <.L12^B1>:
 d38:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_szero>

00000d3c <.L13^B1>:
 d3c:	5f 3f       	cpi	r21, 0xFF	; 255
 d3e:	e4 f3       	brlt	.-8      	; 0xd38 <.L12^B1>
 d40:	98 3e       	cpi	r25, 0xE8	; 232
 d42:	d4 f3       	brlt	.-12     	; 0xd38 <.L12^B1>

00000d44 <.L14^B1>:
 d44:	86 95       	lsr	r24
 d46:	77 95       	ror	r23
 d48:	67 95       	ror	r22
 d4a:	b7 95       	ror	r27
 d4c:	f7 95       	ror	r31
 d4e:	e7 95       	ror	r30
 d50:	9f 5f       	subi	r25, 0xFF	; 255
 d52:	c1 f7       	brne	.-16     	; 0xd44 <.L14^B1>

00000d54 <.L15^B1>:
 d54:	fe 2b       	or	r31, r30
 d56:	88 0f       	add	r24, r24
 d58:	91 1d       	adc	r25, r1
 d5a:	96 95       	lsr	r25
 d5c:	87 95       	ror	r24
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <_exit>:
 d62:	f8 94       	cli

00000d64 <__stop_program>:
 d64:	ff cf       	rjmp	.-2      	; 0xd64 <__stop_program>
