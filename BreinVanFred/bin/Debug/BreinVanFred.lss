
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000386  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  0000043a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000043d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000f8  00000000  00000000  00000490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000114e  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000ee6  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000839  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000160  00000000  00000000  00002df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000065b  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001c5  00000000  00000000  000035b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000083  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	ac 30       	cpi	r26, 0x0C	; 12

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 108:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 110:	3f 98       	cbi	0x07, 7	; 7

00000112 <.Loc.3>:
    ddr_led|=(1<<led1);
 112:	27 9a       	sbi	0x04, 7	; 4

00000114 <.Loc.5>:
    port_led|=(1<<led1);
 114:	2f 9a       	sbi	0x05, 7	; 5

00000116 <.Loc.7>:
}
 116:	08 95       	ret

00000118 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 118:	37 99       	sbic	0x06, 7	; 6
 11a:	11 c0       	rjmp	.+34     	; 0x13e <.L3>

0000011c <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0

00000122 <.L1^B1>:
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <.L1^B1>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <L0^A>

0000012c <L0^A>:
	...

0000012e <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 12e:	37 99       	sbic	0x06, 7	; 6
 130:	10 c0       	rjmp	.+32     	; 0x152 <.L2>

00000132 <.Loc.23>:
        {
            gedetecteerd=0;
 132:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <gedetecteerd.0+0x1>
 136:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <gedetecteerd.0>

0000013a <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 13a:	2f 98       	cbi	0x05, 7	; 5
 13c:	08 95       	ret

0000013e <.L3>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0

00000144 <.L1^B2>:
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <.L1^B2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <L0^A>

0000014e <L0^A>:
	...

00000150 <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 150:	37 9b       	sbis	0x06, 7	; 6

00000152 <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 152:	08 95       	ret

00000154 <.Loc.39>:
            if(!gedetecteerd)
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gedetecteerd.0>
 158:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gedetecteerd.0+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <.L5>

00000160 <.Loc.41>:
                tel++;
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tel>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tel+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <tel+0x1>
 16e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <tel>

00000172 <.L5>:
            gedetecteerd=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gedetecteerd.0+0x1>
 17a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gedetecteerd.0>

0000017e <.Loc.45>:
            port_led|=(1<<led1);//led uit
 17e:	2f 9a       	sbi	0x05, 7	; 5

00000180 <.Loc.47>:
}
 180:	e8 cf       	rjmp	.-48     	; 0x152 <.L2>

00000182 <main>:
int main(void)
{

    // Insert code

    while(1)
 182:	ff cf       	rjmp	.-2      	; 0x182 <main>

00000184 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 184:	26 9a       	sbi	0x04, 6	; 4

00000186 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 186:	25 9a       	sbi	0x04, 5	; 4

00000188 <.Loc.5>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 188:	2e 98       	cbi	0x05, 6	; 5

0000018a <.Loc.7>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 18a:	2d 98       	cbi	0x05, 5	; 5

0000018c <.Loc.9>:
}
 18c:	08 95       	ret

0000018e <initTimer1Stepper>:

void initTimer1Stepper(void){
    // Use mode 14, clkdiv = 1
    TCCR1A = (1<<WGM11) | (0<<WGM10) | (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B0) | (1<<COM1B1);
 18e:	82 ef       	ldi	r24, 0xF2	; 242
 190:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

00000194 <.Loc.13>:
    TCCR1B = (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
 194:	89 e1       	ldi	r24, 0x19	; 25
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>

0000019a <.Loc.15>:

	//define top value
	ICR1 = TOPVALUE;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 1a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>

000001a6 <.Loc.17>:
}
 1a6:	08 95       	ret

000001a8 <initStepper>:

void initStepper(void){
    initTimer1Stepper();
 1a8:	0e 94 c7 00 	call	0x18e	; 0x18e <initTimer1Stepper>

000001ac <.LVL0>:
    initPinsStepper();
 1ac:	0e 94 c2 00 	call	0x184	; 0x184 <initPinsStepper>

000001b0 <.LVL1>:
}
 1b0:	08 95       	ret

000001b2 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 1b2:	28 2f       	mov	r18, r24
 1b4:	39 2f       	mov	r19, r25

000001b6 <.Loc.24>:
    OCR1A = PWMRight;
 1b6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1ba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

000001be <.Loc.26>:
}
 1be:	08 95       	ret

000001c0 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 1c0:	28 2f       	mov	r18, r24
 1c2:	39 2f       	mov	r19, r25

000001c4 <.Loc.29>:
    OCR1B = PWMLeft;
 1c4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 1c8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

000001cc <.Loc.31>:
}
 1cc:	08 95       	ret

000001ce <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000001d4 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 1d4:	8a e5       	ldi	r24, 0x5A	; 90
 1d6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000001da <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 1da:	81 e2       	ldi	r24, 0x21	; 33
 1dc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000001e0 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 1e8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000001ec <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 1ec:	84 e1       	ldi	r24, 0x14	; 20
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 1f4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

000001f8 <.Loc.11>:
    OCR5C = 20;
 1f8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 1fc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000200 <.Loc.13>:
    //set enable interrupt
    sei();
 200:	78 94       	sei

00000202 <.Loc.14>:
}
 202:	08 95       	ret

00000204 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 204:	ea e0       	ldi	r30, 0x0A	; 10
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 81       	ld	r24, Z

0000020a <.Loc.17>:
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	80 83       	st	Z, r24

0000020e <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 20e:	80 81       	ld	r24, Z

00000210 <.Loc.19>:
 210:	80 62       	ori	r24, 0x20	; 32
 212:	80 83       	st	Z, r24

00000214 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 214:	ab e0       	ldi	r26, 0x0B	; 11
 216:	b1 e0       	ldi	r27, 0x01	; 1
 218:	8c 91       	ld	r24, X
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	8c 93       	st	X, r24

0000021e <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 21e:	8c 91       	ld	r24, X
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	8c 93       	st	X, r24

00000224 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 224:	80 81       	ld	r24, Z
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	80 83       	st	Z, r24

0000022a <.Loc.26>:
}
 22a:	08 95       	ret

0000022c <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 22c:	0e 94 02 01 	call	0x204	; 0x204 <init_pins_ultrasoon>

00000230 <.LVL0>:
    init_timer5();
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <init_timer5>

00000234 <.LVL1>:
}
 234:	08 95       	ret

00000236 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 236:	8f 93       	push	r24
 238:	8f b7       	in	r24, 0x3f	; 63
 23a:	8f 93       	push	r24
 23c:	8b b7       	in	r24, 0x3b	; 59
 23e:	8f 93       	push	r24
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31

00000244 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 244:	e1 e2       	ldi	r30, 0x21	; 33
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	80 81       	ld	r24, Z

0000024a <.Loc.33>:
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 83       	st	Z, r24

0000024e <.Loc.34>:
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	8f 91       	pop	r24
 254:	8b bf       	out	0x3b, r24	; 59
 256:	8f 91       	pop	r24
 258:	8f bf       	out	0x3f, r24	; 63
 25a:	8f 91       	pop	r24
 25c:	18 95       	reti

0000025e <__vector_46>:

ISR(TIMER5_CAPT_vect){
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	1f 92       	push	r1
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	2b b7       	in	r18, 0x3b	; 59
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31

00000282 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 282:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000286 <.Loc.39>:
 286:	86 ff       	sbrs	r24, 6
 288:	1f c0       	rjmp	.+62     	; 0x2c8 <.L6>

0000028a <.Loc.40>:
        start_time = ICR5;
 28a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 28e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000292 <.Loc.42>:
 292:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <start_time.0+0x1>
 296:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <start_time.0>

0000029a <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 29a:	e1 e2       	ldi	r30, 0x21	; 33
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	80 81       	ld	r24, Z
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	80 83       	st	Z, r24

000002a4 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	2b bf       	out	0x3b, r18	; 59
 2bc:	2f 91       	pop	r18
 2be:	1f 90       	pop	r1
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	18 95       	reti

000002c8 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 2c8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 2cc:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000002d0 <.Loc.48>:
 2d0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <start_time.0>
 2d4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <start_time.0+0x1>
 2d8:	28 1b       	sub	r18, r24
 2da:	39 0b       	sbc	r19, r25

000002dc <.Loc.49>:
 2dc:	a9 e0       	ldi	r26, 0x09	; 9
 2de:	bc e8       	ldi	r27, 0x8C	; 140
 2e0:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 2e4:	00 24       	eor	r0, r0
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	00 1c       	adc	r0, r0
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	00 1c       	adc	r0, r0
 2f2:	89 2f       	mov	r24, r25
 2f4:	90 2d       	mov	r25, r0

000002f6 <.Loc.50>:
        if (current_sensor == 0) {
 2f6:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <current_sensor>
 2fa:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <current_sensor+0x1>

000002fe <.Loc.52>:
 2fe:	23 2b       	or	r18, r19
 300:	f9 f4       	brne	.+62     	; 0x340 <.L8>

00000302 <.Loc.53>:
            distance_left = distance*100;  // Store distance for Sensor A
 302:	44 e6       	ldi	r20, 0x64	; 100
 304:	48 9f       	mul	r20, r24
 306:	90 01       	movw	r18, r0
 308:	49 9f       	mul	r20, r25
 30a:	30 0d       	add	r19, r0
 30c:	11 24       	eor	r1, r1

0000030e <.Loc.55>:
 30e:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <distance_left+0x1>
 312:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <distance_left>

00000316 <.L9>:
        if (current_sensor == 0) {
 316:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <current_sensor>
 31a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <current_sensor+0x1>

0000031e <.Loc.58>:
 31e:	89 2b       	or	r24, r25
 320:	a1 f4       	brne	.+40     	; 0x34a <.L10>

00000322 <.Loc.59>:
            current_sensor = 1;  // Switch to Sensor B
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <current_sensor+0x1>
 32a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <current_sensor>

0000032e <.Loc.61>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 32e:	e0 e2       	ldi	r30, 0x20	; 32
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	80 81       	ld	r24, Z
 334:	87 7f       	andi	r24, 0xF7	; 247
 336:	80 83       	st	Z, r24

00000338 <.Loc.63>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 338:	80 81       	ld	r24, Z

0000033a <.Loc.64>:
 33a:	80 62       	ori	r24, 0x20	; 32
 33c:	80 83       	st	Z, r24
 33e:	b2 cf       	rjmp	.-156    	; 0x2a4 <.L5>

00000340 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 340:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <distance_right+0x1>
 344:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <distance_right>
 348:	e6 cf       	rjmp	.-52     	; 0x316 <.L9>

0000034a <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 34a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <current_sensor+0x1>
 34e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <current_sensor>

00000352 <.Loc.69>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 352:	e0 e2       	ldi	r30, 0x20	; 32
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	80 81       	ld	r24, Z
 358:	8f 7d       	andi	r24, 0xDF	; 223
 35a:	80 83       	st	Z, r24

0000035c <.Loc.71>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 35c:	80 81       	ld	r24, Z

0000035e <.Loc.72>:
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	80 83       	st	Z, r24

00000362 <.LBE2>:
}
 362:	a0 cf       	rjmp	.-192    	; 0x2a4 <.L5>

00000364 <__umulhisi3>:
 364:	a2 9f       	mul	r26, r18

00000366 <.Loc.1>:
 366:	b0 01       	movw	r22, r0

00000368 <.Loc.2>:
 368:	b3 9f       	mul	r27, r19

0000036a <.Loc.3>:
 36a:	c0 01       	movw	r24, r0

0000036c <.Loc.4>:
 36c:	a3 9f       	mul	r26, r19

0000036e <.Loc.5>:
 36e:	70 0d       	add	r23, r0

00000370 <.Loc.6>:
 370:	81 1d       	adc	r24, r1

00000372 <.Loc.7>:
 372:	11 24       	eor	r1, r1

00000374 <.Loc.8>:
 374:	91 1d       	adc	r25, r1

00000376 <.Loc.9>:
 376:	b2 9f       	mul	r27, r18

00000378 <.Loc.10>:
 378:	70 0d       	add	r23, r0

0000037a <.Loc.11>:
 37a:	81 1d       	adc	r24, r1

0000037c <.Loc.12>:
 37c:	11 24       	eor	r1, r1

0000037e <.Loc.13>:
 37e:	91 1d       	adc	r25, r1

00000380 <.Loc.14>:
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
