
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000a36  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800220  00800220  00000b0a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000b0d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000158  00000000  00000000  00000b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000017f3  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000011e1  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000fae  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000002d0  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007a7  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000203  00000000  00000000  000050b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000001bc  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001a  00000000  00000000  00005472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_35>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_45>
  b8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e6 e3       	ldi	r30, 0x36	; 54

000000fc <.Loc.4>:
  fc:	fa e0       	ldi	r31, 0x0A	; 10

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a2 33       	cpi	r26, 0x32	; 50

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
 122:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_display>:
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display (void)
{
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
 130:	80 62       	ori	r24, 0x20	; 32
 132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 134:	80 81       	ld	r24, Z

00000136 <.Loc.4>:
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24

0000013a <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 13a:	9d 9a       	sbi	0x13, 5	; 19

0000013c <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 13c:	e2 e0       	ldi	r30, 0x02	; 2
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	80 83       	st	Z, r24

00000146 <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 146:	a5 98       	cbi	0x14, 5	; 20

00000148 <.Loc.11>:
}
 148:	08 95       	ret

0000014a <send_data>:

void send_data(char data)
{
 14a:	28 e0       	ldi	r18, 0x08	; 8
 14c:	30 e0       	ldi	r19, 0x00	; 0

0000014e <.Loc.17>:
		{
			PORT_SDI |= (1 << SDI_BIT);
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 14e:	e2 e0       	ldi	r30, 0x02	; 2
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	0e c0       	rjmp	.+28     	; 0x170 <.L5>

00000154 <.L3>:
 154:	90 81       	ld	r25, Z

00000156 <.Loc.20>:
 156:	9f 7d       	andi	r25, 0xDF	; 223
 158:	90 83       	st	Z, r25

0000015a <.L4>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 15a:	90 81       	ld	r25, Z

0000015c <.Loc.22>:
 15c:	90 61       	ori	r25, 0x10	; 16
 15e:	90 83       	st	Z, r25

00000160 <.Loc.23>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 160:	90 81       	ld	r25, Z
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	90 83       	st	Z, r25

00000166 <.Loc.25>:
	for (unsigned i = 0; i < 8; i++)
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1

0000016a <.Loc.27>:
 16a:	21 15       	cp	r18, r1
 16c:	31 05       	cpc	r19, r1
 16e:	49 f0       	breq	.+18     	; 0x182 <.L7>

00000170 <.L5>:
		int bit = data & 1;
 170:	98 2f       	mov	r25, r24
 172:	91 70       	andi	r25, 0x01	; 1

00000174 <.Loc.29>:
		data >>= 1;
 174:	85 95       	asr	r24

00000176 <.Loc.31>:
		if (bit)
 176:	99 23       	and	r25, r25
 178:	69 f3       	breq	.-38     	; 0x154 <.L3>

0000017a <.Loc.33>:
			PORT_SDI |= (1 << SDI_BIT);
 17a:	90 81       	ld	r25, Z

0000017c <.Loc.34>:
 17c:	90 62       	ori	r25, 0x20	; 32
 17e:	90 83       	st	Z, r25
 180:	ec cf       	rjmp	.-40     	; 0x15a <.L4>

00000182 <.L7>:
	}
}
 182:	08 95       	ret

00000184 <send_enable>:

void send_enable(int display_nummer)
{
	send_data(0x10 << display_nummer);
 184:	90 e1       	ldi	r25, 0x10	; 16
 186:	01 c0       	rjmp	.+2      	; 0x18a <.L2^B1>

00000188 <.L1^B1>:
 188:	99 0f       	add	r25, r25

0000018a <.L2^B1>:
 18a:	8a 95       	dec	r24
 18c:	ea f7       	brpl	.-6      	; 0x188 <.L1^B1>
 18e:	89 2f       	mov	r24, r25

00000190 <.Loc.39>:
 190:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

00000194 <.LVL11>:
}
 194:	08 95       	ret

00000196 <display>:

void display(char data, int display_nummer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d6 2f       	mov	r29, r22
 19c:	c7 2f       	mov	r28, r23

0000019e <.Loc.43>:
	send_data(data);
 19e:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

000001a2 <.LVL13>:
	send_enable(display_nummer);
 1a2:	8d 2f       	mov	r24, r29
 1a4:	9c 2f       	mov	r25, r28
 1a6:	0e 94 c2 00 	call	0x184	; 0x184 <send_enable>

000001aa <.LVL14>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 1aa:	a5 9a       	sbi	0x14, 5	; 20

000001ac <.Loc.47>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 1ac:	a5 98       	cbi	0x14, 5	; 20

000001ae <.Loc.49>:
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <display_getal>:

void display_getal(unsigned int getal)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	c8 2f       	mov	r28, r24
 1be:	d9 2f       	mov	r29, r25

000001c0 <.LBB9>:
	for (int i = 0; i < 4; i++)
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0

000001c4 <.L11>:
	{
		display(segmentcodes[getal%10], i);
 1c4:	9e 01       	movw	r18, r28
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__umulhisi3>
 1ce:	9c 01       	movw	r18, r24
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	c9 01       	movw	r24, r18
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	fe 01       	movw	r30, r28
 1f0:	e8 1b       	sub	r30, r24
 1f2:	f9 0b       	sbc	r31, r25

000001f4 <.Loc.58>:
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254

000001fc <.Loc.59>:
 1fc:	b8 01       	movw	r22, r16
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 cb 00 	call	0x196	; 0x196 <display>

00000204 <.LVL18>:
		getal /= 10;
 204:	9e 01       	movw	r18, r28
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__umulhisi3>
 20e:	ec 01       	movw	r28, r24

00000210 <.Loc.62>:
 210:	d6 95       	lsr	r29
 212:	c7 95       	ror	r28
 214:	d6 95       	lsr	r29
 216:	c7 95       	ror	r28
 218:	d6 95       	lsr	r29
 21a:	c7 95       	ror	r28

0000021c <.LBB10>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15

00000220 <.L1^B2>:
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <.L1^B2>
 224:	00 c0       	rjmp	.+0      	; 0x226 <L0^A>

00000226 <L0^A>:
	...

00000228 <.LBE10>:
	for (int i = 0; i < 4; i++)
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255

0000022c <.Loc.73>:
 22c:	04 30       	cpi	r16, 0x04	; 4
 22e:	11 05       	cpc	r17, r1
 230:	49 f6       	brne	.-110    	; 0x1c4 <.L11>

00000232 <.LBE9>:
		_delay_ms(1);   // 1 kHz
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28

00000236 <.Loc.75>:
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16

0000023a <.Loc.76>:
 23a:	08 95       	ret

0000023c <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 23c:	3f 98       	cbi	0x07, 7	; 7

0000023e <.Loc.3>:
    ddr_led|=(1<<led1);
 23e:	27 9a       	sbi	0x04, 7	; 4

00000240 <.Loc.5>:
    port_led|=(1<<led1);
 240:	2f 9a       	sbi	0x05, 7	; 5

00000242 <.Loc.7>:
}
 242:	08 95       	ret

00000244 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 244:	37 99       	sbic	0x06, 7	; 6
 246:	11 c0       	rjmp	.+34     	; 0x26a <.L3>

00000248 <.LBB6>:
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	90 e0       	ldi	r25, 0x00	; 0

0000024e <.L1^B1>:
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <.L1^B1>
 256:	00 c0       	rjmp	.+0      	; 0x258 <L0^A>

00000258 <L0^A>:
	...

0000025a <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 25a:	37 99       	sbic	0x06, 7	; 6
 25c:	10 c0       	rjmp	.+32     	; 0x27e <.L2>

0000025e <.Loc.23>:
        {
            gedetecteerd=0;
 25e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <gedetecteerd.0+0x1>
 262:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <gedetecteerd.0>

00000266 <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 266:	2f 98       	cbi	0x05, 7	; 5
 268:	08 95       	ret

0000026a <.L3>:
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0

00000270 <.L1^B2>:
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <.L1^B2>
 278:	00 c0       	rjmp	.+0      	; 0x27a <L0^A>

0000027a <L0^A>:
	...

0000027c <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 27c:	37 9b       	sbis	0x06, 7	; 6

0000027e <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 27e:	08 95       	ret

00000280 <.Loc.39>:
            if(!gedetecteerd)
 280:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <gedetecteerd.0>
 284:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <gedetecteerd.0+0x1>
 288:	89 2b       	or	r24, r25
 28a:	49 f4       	brne	.+18     	; 0x29e <.L5>

0000028c <.Loc.41>:
                tel++;
 28c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <tel>
 290:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <tel+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <tel+0x1>
 29a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <tel>

0000029e <.L5>:
            gedetecteerd=1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <gedetecteerd.0+0x1>
 2a6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <gedetecteerd.0>

000002aa <.Loc.45>:
            port_led|=(1<<led1);//led uit
 2aa:	2f 9a       	sbi	0x05, 7	; 5

000002ac <.Loc.47>:
}
 2ac:	e8 cf       	rjmp	.-48     	; 0x27e <.L2>

000002ae <main>:
#include "main.h"
#include "ultrasoon.h"

int main(void)
{
    init_ultrasoon();
 2ae:	0e 94 4d 03 	call	0x69a	; 0x69a <init_ultrasoon>

000002b2 <.LVL0>:
    initStepper();
 2b2:	0e 94 bf 02 	call	0x57e	; 0x57e <initStepper>

000002b6 <.LVL1>:

    rechtdoor();
 2b6:	0e 94 82 01 	call	0x304	; 0x304 <rechtdoor>

000002ba <.LVL2>:

    return 0;
}
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret

000002c0 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 2c0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_left>
 2c4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_left+0x1>
 2c8:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <distance_right>
 2cc:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <distance_right+0x1>
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19

000002d4 <.Loc.3>:
 2d4:	0d 96       	adiw	r24, 0x0d	; 13

000002d6 <.Loc.4>:
 2d6:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <padbreedte+0x1>
 2da:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <padbreedte>

000002de <.Loc.5>:
}
 2de:	08 95       	ret

000002e0 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(50);
 2e0:	82 e3       	ldi	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 cd 02 	call	0x59a	; 0x59a <speedStepperLeft>

000002e8 <.LVL0>:
    speedStepperRight(50);
 2e8:	82 e3       	ldi	r24, 0x32	; 50
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 c6 02 	call	0x58c	; 0x58c <speedStepperRight>

000002f0 <.LVL1>:
}
 2f0:	08 95       	ret

000002f2 <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 cd 02 	call	0x59a	; 0x59a <speedStepperLeft>

000002fa <.LVL2>:
    speedStepperRight(0);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 c6 02 	call	0x58c	; 0x58c <speedStepperRight>

00000302 <.LVL3>:
}
 302:	08 95       	ret

00000304 <rechtdoor>:

void rechtdoor(void){
    int topspeed = 50;
    //while agv binnen het pad is
    while(distance_left<50){
 304:	0b c0       	rjmp	.+22     	; 0x31c <.L7>

00000306 <.L6>:
            if (distance_right < distance_left){
                speedStepperLeft(60);
                speedStepperRight(topspeed);
            }
            if(distance_left < distance_right){
 306:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <distance_left>
 30a:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <distance_left+0x1>
 30e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <distance_right>
 312:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <distance_right+0x1>

00000316 <.Loc.20>:
 316:	28 17       	cp	r18, r24
 318:	39 07       	cpc	r19, r25
 31a:	d4 f0       	brlt	.+52     	; 0x350 <.L10>

0000031c <.L7>:
    while(distance_left<50){
 31c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_left>
 320:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_left+0x1>
 324:	c2 97       	sbiw	r24, 0x32	; 50
 326:	ec f4       	brge	.+58     	; 0x362 <.L11>

00000328 <.Loc.22>:
            if (distance_right < distance_left){
 328:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <distance_right>
 32c:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <distance_right+0x1>
 330:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_left>
 334:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_left+0x1>

00000338 <.Loc.24>:
 338:	28 17       	cp	r18, r24
 33a:	39 07       	cpc	r19, r25
 33c:	24 f7       	brge	.-56     	; 0x306 <.L6>

0000033e <.Loc.25>:
                speedStepperLeft(60);
 33e:	8c e3       	ldi	r24, 0x3C	; 60
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 cd 02 	call	0x59a	; 0x59a <speedStepperLeft>

00000346 <.LVL5>:
                speedStepperRight(topspeed);
 346:	82 e3       	ldi	r24, 0x32	; 50
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 c6 02 	call	0x58c	; 0x58c <speedStepperRight>

0000034e <.LVL6>:
 34e:	db cf       	rjmp	.-74     	; 0x306 <.L6>

00000350 <.L10>:
                speedStepperRight(60);
 350:	8c e3       	ldi	r24, 0x3C	; 60
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 c6 02 	call	0x58c	; 0x58c <speedStepperRight>

00000358 <.LVL7>:
                speedStepperLeft(topspeed);
 358:	82 e3       	ldi	r24, 0x32	; 50
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 cd 02 	call	0x59a	; 0x59a <speedStepperLeft>

00000360 <.LVL8>:
 360:	dd cf       	rjmp	.-70     	; 0x31c <.L7>

00000362 <.L11>:
            }
        }
    //stop driving
    stop();
 362:	0e 94 79 01 	call	0x2f2	; 0x2f2 <stop>

00000366 <.LVL9>:
}
 366:	08 95       	ret

00000368 <rechtsom>:

void rechtsom(void){
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <L0^A>

00000372 <L0^A>:
 372:	00 d0       	rcall	.+0      	; 0x374 <L0^A>

00000374 <L0^A>:
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62

00000378 <.Loc.32>:
    clearStepCnt();
 378:	0e 94 15 03 	call	0x62a	; 0x62a <clearStepCnt>

0000037c <.LVL10>:
    while(stepCounterLeft<20){      //agv rijdt ietsjes verder buiten het pad
 37c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 380:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 384:	44 97       	sbiw	r24, 0x14	; 20
 386:	40 f4       	brcc	.+16     	; 0x398 <.L13>

00000388 <.L14>:
        vooruit();
 388:	0e 94 70 01 	call	0x2e0	; 0x2e0 <vooruit>

0000038c <.LVL11>:
    while(stepCounterLeft<20){      //agv rijdt ietsjes verder buiten het pad
 38c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 390:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 394:	44 97       	sbiw	r24, 0x14	; 20
 396:	c0 f3       	brcs	.-16     	; 0x388 <.L14>

00000398 <.L13>:
    }
    clearStepCnt();
 398:	0e 94 15 03 	call	0x62a	; 0x62a <clearStepCnt>

0000039c <.LVL12>:
    toggleStepperDirectionRight();
 39c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <toggleStepperDirectionRight>

000003a0 <.LVL13>:
    while(stepCounterLeft<(90/5.6)){   //agv draait 90 graden
 3a0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 3a4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 3a8:	41 97       	sbiw	r24, 0x11	; 17
 3aa:	40 f4       	brcc	.+16     	; 0x3bc <.L15>

000003ac <.L16>:
        vooruit();
 3ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <vooruit>

000003b0 <.LVL14>:
    while(stepCounterLeft<(90/5.6)){   //agv draait 90 graden
 3b0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 3b4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 3b8:	41 97       	sbiw	r24, 0x11	; 17
 3ba:	c0 f3       	brcs	.-16     	; 0x3ac <.L16>

000003bc <.L15>:
    }
    toggleStepperDirectionRight();
 3bc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <toggleStepperDirectionRight>

000003c0 <.LVL15>:
    clearStepCnt();
 3c0:	0e 94 15 03 	call	0x62a	; 0x62a <clearStepCnt>

000003c4 <.LVL16>:
    while(stepCounterLeft<(padbreedte/5.6)){    //agv rijdt naar volgende pad
 3c4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 3c8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 3cc:	9c 01       	movw	r18, r24
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	29 83       	std	Y+1, r18	; 0x01
 3d4:	3a 83       	std	Y+2, r19	; 0x02
 3d6:	4b 83       	std	Y+3, r20	; 0x03
 3d8:	5c 83       	std	Y+4, r21	; 0x04
 3da:	ca 01       	movw	r24, r20
 3dc:	b9 01       	movw	r22, r18
 3de:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatunsisf>

000003e2 <.LVL17>:
 3e2:	06 2f       	mov	r16, r22
 3e4:	17 2f       	mov	r17, r23
 3e6:	8e 83       	std	Y+6, r24	; 0x06
 3e8:	9d 83       	std	Y+5, r25	; 0x05

000003ea <.Loc.47>:
 3ea:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <padbreedte>
 3ee:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <padbreedte+0x1>
 3f2:	9c 01       	movw	r18, r24
 3f4:	99 0f       	add	r25, r25
 3f6:	44 0b       	sbc	r20, r20
 3f8:	55 0b       	sbc	r21, r21
 3fa:	29 83       	std	Y+1, r18	; 0x01
 3fc:	3a 83       	std	Y+2, r19	; 0x02
 3fe:	4b 83       	std	Y+3, r20	; 0x03
 400:	5c 83       	std	Y+4, r21	; 0x04
 402:	ca 01       	movw	r24, r20
 404:	b9 01       	movw	r22, r18
 406:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__floatsisf>

0000040a <.LVL18>:
 40a:	23 e3       	ldi	r18, 0x33	; 51
 40c:	33 e3       	ldi	r19, 0x33	; 51
 40e:	43 eb       	ldi	r20, 0xB3	; 179
 410:	50 e4       	ldi	r21, 0x40	; 64
 412:	69 83       	std	Y+1, r22	; 0x01
 414:	7a 83       	std	Y+2, r23	; 0x02
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	9c 83       	std	Y+4, r25	; 0x04
 41a:	69 81       	ldd	r22, Y+1	; 0x01
 41c:	7a 81       	ldd	r23, Y+2	; 0x02
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	9c 81       	ldd	r25, Y+4	; 0x04
 422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>

00000426 <.LVL19>:
 426:	26 2f       	mov	r18, r22
 428:	37 2f       	mov	r19, r23
 42a:	48 2f       	mov	r20, r24
 42c:	59 2f       	mov	r21, r25
 42e:	09 83       	std	Y+1, r16	; 0x01
 430:	1a 83       	std	Y+2, r17	; 0x02
 432:	8e 81       	ldd	r24, Y+6	; 0x06
 434:	8b 83       	std	Y+3, r24	; 0x03
 436:	8d 81       	ldd	r24, Y+5	; 0x05
 438:	8c 83       	std	Y+4, r24	; 0x04
 43a:	69 81       	ldd	r22, Y+1	; 0x01
 43c:	7a 81       	ldd	r23, Y+2	; 0x02
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	9c 81       	ldd	r25, Y+4	; 0x04
 442:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__cmpsf2>

00000446 <.LVL20>:
 446:	88 23       	and	r24, r24
 448:	0c f0       	brlt	.+2      	; 0x44c <.L19>

0000044a <L0^A>:
 44a:	46 c0       	rjmp	.+140    	; 0x4d8 <.L17>

0000044c <.L19>:
        vooruit();
 44c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <vooruit>

00000450 <.LVL21>:
    while(stepCounterLeft<(padbreedte/5.6)){    //agv rijdt naar volgende pad
 450:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 454:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 458:	9c 01       	movw	r18, r24
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	29 83       	std	Y+1, r18	; 0x01
 460:	3a 83       	std	Y+2, r19	; 0x02
 462:	4b 83       	std	Y+3, r20	; 0x03
 464:	5c 83       	std	Y+4, r21	; 0x04
 466:	ca 01       	movw	r24, r20
 468:	b9 01       	movw	r22, r18
 46a:	0e 94 67 04 	call	0x8ce	; 0x8ce <__floatunsisf>

0000046e <.LVL22>:
 46e:	06 2f       	mov	r16, r22
 470:	17 2f       	mov	r17, r23
 472:	8e 83       	std	Y+6, r24	; 0x06
 474:	9d 83       	std	Y+5, r25	; 0x05

00000476 <.Loc.51>:
 476:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <padbreedte>
 47a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <padbreedte+0x1>
 47e:	9c 01       	movw	r18, r24
 480:	99 0f       	add	r25, r25
 482:	44 0b       	sbc	r20, r20
 484:	55 0b       	sbc	r21, r21
 486:	29 83       	std	Y+1, r18	; 0x01
 488:	3a 83       	std	Y+2, r19	; 0x02
 48a:	4b 83       	std	Y+3, r20	; 0x03
 48c:	5c 83       	std	Y+4, r21	; 0x04
 48e:	ca 01       	movw	r24, r20
 490:	b9 01       	movw	r22, r18
 492:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__floatsisf>

00000496 <.LVL23>:
 496:	23 e3       	ldi	r18, 0x33	; 51
 498:	33 e3       	ldi	r19, 0x33	; 51
 49a:	43 eb       	ldi	r20, 0xB3	; 179
 49c:	50 e4       	ldi	r21, 0x40	; 64
 49e:	69 83       	std	Y+1, r22	; 0x01
 4a0:	7a 83       	std	Y+2, r23	; 0x02
 4a2:	8b 83       	std	Y+3, r24	; 0x03
 4a4:	9c 83       	std	Y+4, r25	; 0x04
 4a6:	69 81       	ldd	r22, Y+1	; 0x01
 4a8:	7a 81       	ldd	r23, Y+2	; 0x02
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>

000004b2 <.LVL24>:
 4b2:	26 2f       	mov	r18, r22
 4b4:	37 2f       	mov	r19, r23
 4b6:	48 2f       	mov	r20, r24
 4b8:	59 2f       	mov	r21, r25
 4ba:	09 83       	std	Y+1, r16	; 0x01
 4bc:	1a 83       	std	Y+2, r17	; 0x02
 4be:	8e 81       	ldd	r24, Y+6	; 0x06
 4c0:	8b 83       	std	Y+3, r24	; 0x03
 4c2:	8d 81       	ldd	r24, Y+5	; 0x05
 4c4:	8c 83       	std	Y+4, r24	; 0x04
 4c6:	69 81       	ldd	r22, Y+1	; 0x01
 4c8:	7a 81       	ldd	r23, Y+2	; 0x02
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	9c 81       	ldd	r25, Y+4	; 0x04
 4ce:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__cmpsf2>

000004d2 <.LVL25>:
 4d2:	88 23       	and	r24, r24
 4d4:	0c f4       	brge	.+2      	; 0x4d8 <.L17>

000004d6 <L0^A>:
 4d6:	ba cf       	rjmp	.-140    	; 0x44c <.L19>

000004d8 <.L17>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 4d8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <toggleStepperDirectionRight>

000004dc <.LVL26>:
    clearStepCnt();
 4dc:	0e 94 15 03 	call	0x62a	; 0x62a <clearStepCnt>

000004e0 <.LVL27>:
    while(stepCounterLeft<(90/5.6)){
 4e0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 4e4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 4e8:	41 97       	sbiw	r24, 0x11	; 17
 4ea:	40 f4       	brcc	.+16     	; 0x4fc <.L20>

000004ec <.L21>:
        vooruit();
 4ec:	0e 94 70 01 	call	0x2e0	; 0x2e0 <vooruit>

000004f0 <.LVL28>:
    while(stepCounterLeft<(90/5.6)){
 4f0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 4f4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 4f8:	41 97       	sbiw	r24, 0x11	; 17
 4fa:	c0 f3       	brcs	.-16     	; 0x4ec <.L21>

000004fc <.L20>:
    }
    toggleStepperDirectionRight();
 4fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <toggleStepperDirectionRight>

00000500 <.LVL29>:
    clearStepCnt();
 500:	0e 94 15 03 	call	0x62a	; 0x62a <clearStepCnt>

00000504 <.LVL30>:
    vooruit();
 504:	0e 94 70 01 	call	0x2e0	; 0x2e0 <vooruit>

00000508 <.LVL31>:
    if(distance_left<25){           //agv is in het volgende pad
 508:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_left>
 50c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_left+0x1>

00000510 <.Loc.64>:
 510:	49 97       	sbiw	r24, 0x19	; 25
 512:	5c f0       	brlt	.+22     	; 0x52a <.L28>

00000514 <.L12>:
        stop();
    }
}
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <.L28>:
        stop();
 52a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <stop>

0000052e <.LVL32>:
}
 52e:	f2 cf       	rjmp	.-28     	; 0x514 <.L12>

00000530 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 530:	6b 9a       	sbi	0x0d, 3	; 13

00000532 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 532:	e1 e0       	ldi	r30, 0x01	; 1
 534:	f1 e0       	ldi	r31, 0x01	; 1
 536:	80 81       	ld	r24, Z

00000538 <.Loc.4>:
 538:	88 60       	ori	r24, 0x08	; 8
 53a:	80 83       	st	Z, r24

0000053c <.Loc.5>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 53c:	73 98       	cbi	0x0e, 3	; 14

0000053e <.Loc.7>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 53e:	e2 e0       	ldi	r30, 0x02	; 2
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	80 81       	ld	r24, Z
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	80 83       	st	Z, r24

00000548 <.Loc.9>:
}
 548:	08 95       	ret

0000054a <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 54a:	82 ec       	ldi	r24, 0xC2	; 194
 54c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000550 <.Loc.13>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 550:	8c e1       	ldi	r24, 0x1C	; 28
 552:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000556 <.Loc.15>:

	//define top value
    OCR3A = STEPVALUE;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 55e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000562 <.Loc.17>:
}
 562:	08 95       	ret

00000564 <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 564:	82 ec       	ldi	r24, 0xC2	; 194
 566:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

0000056a <.Loc.21>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 56a:	8c e1       	ldi	r24, 0x1C	; 28
 56c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000570 <.Loc.23>:

	//define top value
    OCR4A = STEPVALUE;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 578:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

0000057c <.Loc.25>:
}
 57c:	08 95       	ret

0000057e <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 57e:	0e 94 b2 02 	call	0x564	; 0x564 <initTimer4Stepper>

00000582 <.LVL0>:
    initTimer3Stepper();
 582:	0e 94 a5 02 	call	0x54a	; 0x54a <initTimer3Stepper>

00000586 <.LVL1>:
    initPinsStepper();
 586:	0e 94 98 02 	call	0x530	; 0x530 <initPinsStepper>

0000058a <.LVL2>:
}
 58a:	08 95       	ret

0000058c <speedStepperRight>:

void speedStepperRight(int PWMRight){
 58c:	28 2f       	mov	r18, r24
 58e:	39 2f       	mov	r19, r25

00000590 <.Loc.33>:
    ICR3 = PWMRight;
 590:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 594:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000598 <.Loc.35>:
}
 598:	08 95       	ret

0000059a <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 59a:	28 2f       	mov	r18, r24
 59c:	39 2f       	mov	r19, r25

0000059e <.Loc.38>:
    ICR4 = PWMLeft;
 59e:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 5a2:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000005a6 <.Loc.40>:
}
 5a6:	08 95       	ret

000005a8 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    DDR_DIR_R ^= ~(1<<PORT_DIR_R);
 5a8:	34 b3       	in	r19, 0x14	; 20

000005aa <.Loc.44>:
 5aa:	23 b3       	in	r18, 0x13	; 19

000005ac <.Loc.45>:
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <.L2^B1>

000005b2 <.L1^B1>:
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25

000005b6 <.L2^B1>:
 5b6:	3a 95       	dec	r19
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <.L1^B1>

000005ba <.Loc.46>:
 5ba:	80 95       	com	r24
 5bc:	90 95       	com	r25

000005be <.Loc.47>:
 5be:	82 27       	eor	r24, r18
 5c0:	83 bb       	out	0x13, r24	; 19

000005c2 <.Loc.48>:
}
 5c2:	08 95       	ret

000005c4 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    DDR_DIR_L ^= (1<<PORT_DIR_L);
 5c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>

000005c8 <.Loc.52>:
 5c8:	e1 e0       	ldi	r30, 0x01	; 1
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	80 81       	ld	r24, Z

000005ce <.Loc.53>:
 5ce:	21 e0       	ldi	r18, 0x01	; 1
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <.L2^B2>

000005d4 <.L1^B2>:
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19

000005d8 <.L2^B2>:
 5d8:	9a 95       	dec	r25
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <.L1^B2>

000005dc <.Loc.54>:
 5dc:	82 27       	eor	r24, r18
 5de:	80 83       	st	Z, r24

000005e0 <.Loc.55>:
}
 5e0:	08 95       	ret

000005e2 <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 5e2:	8f 93       	push	r24
 5e4:	8f b7       	in	r24, 0x3f	; 63
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25

000005ea <.Loc.57>:
    stepCounterLeft++;
 5ea:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 5ee:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <stepCounterLeft+0x1>
 5f8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <stepCounterLeft>

000005fc <.Loc.59>:
}
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	8f bf       	out	0x3f, r24	; 63
 602:	8f 91       	pop	r24
 604:	18 95       	reti

00000606 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 606:	8f 93       	push	r24
 608:	8f b7       	in	r24, 0x3f	; 63
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25

0000060e <.Loc.61>:
    stepCounterRight++;
 60e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterRight>
 612:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterRight+0x1>
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stepCounterRight+0x1>
 61c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stepCounterRight>

00000620 <.Loc.63>:
}
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	8f bf       	out	0x3f, r24	; 63
 626:	8f 91       	pop	r24
 628:	18 95       	reti

0000062a <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 62a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <stepCounterLeft+0x1>
 62e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <stepCounterLeft>

00000632 <.Loc.67>:
    stepCounterRight = 0;
 632:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <stepCounterRight+0x1>
 636:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <stepCounterRight>

0000063a <.Loc.69>:
}
 63a:	08 95       	ret

0000063c <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 63c:	8b e2       	ldi	r24, 0x2B	; 43
 63e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000642 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 642:	8a e5       	ldi	r24, 0x5A	; 90
 644:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000648 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 648:	81 e2       	ldi	r24, 0x21	; 33
 64a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

0000064e <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	9f ef       	ldi	r25, 0xFF	; 255
 652:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 656:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

0000065a <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 65a:	84 e1       	ldi	r24, 0x14	; 20
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 662:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000666 <.Loc.11>:
    OCR5C = 20;
 666:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 66a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

0000066e <.Loc.13>:
    //set enable interrupt
    sei();
 66e:	78 94       	sei

00000670 <.Loc.14>:
}
 670:	08 95       	ret

00000672 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 672:	ea e0       	ldi	r30, 0x0A	; 10
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	80 81       	ld	r24, Z

00000678 <.Loc.17>:
 678:	80 61       	ori	r24, 0x10	; 16
 67a:	80 83       	st	Z, r24

0000067c <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 67c:	80 81       	ld	r24, Z

0000067e <.Loc.19>:
 67e:	80 62       	ori	r24, 0x20	; 32
 680:	80 83       	st	Z, r24

00000682 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 682:	ab e0       	ldi	r26, 0x0B	; 11
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	8c 91       	ld	r24, X
 688:	8f 7e       	andi	r24, 0xEF	; 239
 68a:	8c 93       	st	X, r24

0000068c <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 68c:	8c 91       	ld	r24, X
 68e:	8f 7d       	andi	r24, 0xDF	; 223
 690:	8c 93       	st	X, r24

00000692 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 692:	80 81       	ld	r24, Z
 694:	8d 7f       	andi	r24, 0xFD	; 253
 696:	80 83       	st	Z, r24

00000698 <.Loc.26>:
}
 698:	08 95       	ret

0000069a <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 69a:	0e 94 39 03 	call	0x672	; 0x672 <init_pins_ultrasoon>

0000069e <.LVL0>:
    init_timer5();
 69e:	0e 94 1e 03 	call	0x63c	; 0x63c <init_timer5>

000006a2 <.LVL1>:
}
 6a2:	08 95       	ret

000006a4 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 6a4:	8f 93       	push	r24
 6a6:	8f b7       	in	r24, 0x3f	; 63
 6a8:	8f 93       	push	r24
 6aa:	8b b7       	in	r24, 0x3b	; 59
 6ac:	8f 93       	push	r24
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31

000006b2 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 6b2:	e1 e2       	ldi	r30, 0x21	; 33
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	80 81       	ld	r24, Z

000006b8 <.Loc.33>:
 6b8:	80 64       	ori	r24, 0x40	; 64
 6ba:	80 83       	st	Z, r24

000006bc <.Loc.34>:
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	8f 91       	pop	r24
 6c2:	8b bf       	out	0x3b, r24	; 59
 6c4:	8f 91       	pop	r24
 6c6:	8f bf       	out	0x3f, r24	; 63
 6c8:	8f 91       	pop	r24
 6ca:	18 95       	reti

000006cc <__vector_46>:

ISR(TIMER5_CAPT_vect){
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	1f 92       	push	r1
 6d4:	11 24       	eor	r1, r1
 6d6:	2f 93       	push	r18
 6d8:	2b b7       	in	r18, 0x3b	; 59
 6da:	2f 93       	push	r18
 6dc:	3f 93       	push	r19
 6de:	6f 93       	push	r22
 6e0:	7f 93       	push	r23
 6e2:	8f 93       	push	r24
 6e4:	9f 93       	push	r25
 6e6:	af 93       	push	r26
 6e8:	bf 93       	push	r27
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31

000006ee <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 6ee:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000006f2 <.Loc.39>:
 6f2:	86 ff       	sbrs	r24, 6
 6f4:	1e c0       	rjmp	.+60     	; 0x732 <.L6>

000006f6 <.Loc.40>:
        start_time = ICR5;
 6f6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 6fa:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000006fe <.Loc.42>:
 6fe:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <start_time.0+0x1>
 702:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <start_time.0>

00000706 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 706:	e1 e2       	ldi	r30, 0x21	; 33
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	80 81       	ld	r24, Z
 70c:	8f 7b       	andi	r24, 0xBF	; 191
 70e:	80 83       	st	Z, r24

00000710 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	bf 91       	pop	r27
 716:	af 91       	pop	r26
 718:	9f 91       	pop	r25
 71a:	8f 91       	pop	r24
 71c:	7f 91       	pop	r23
 71e:	6f 91       	pop	r22
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	2b bf       	out	0x3b, r18	; 59
 726:	2f 91       	pop	r18
 728:	1f 90       	pop	r1
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	18 95       	reti

00000732 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in mm
 732:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 736:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

0000073a <.Loc.48>:
 73a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <start_time.0>
 73e:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <start_time.0+0x1>
 742:	28 1b       	sub	r18, r24
 744:	39 0b       	sbc	r19, r25

00000746 <.Loc.49>:
 746:	a9 e0       	ldi	r26, 0x09	; 9
 748:	bc e8       	ldi	r27, 0x8C	; 140
 74a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__umulhisi3>
 74e:	00 24       	eor	r0, r0
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	00 1c       	adc	r0, r0
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	00 1c       	adc	r0, r0
 75c:	89 2f       	mov	r24, r25
 75e:	90 2d       	mov	r25, r0

00000760 <.Loc.50>:
        if (current_sensor == 0) {
 760:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <current_sensor>
 764:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <current_sensor+0x1>

00000768 <.Loc.52>:
 768:	23 2b       	or	r18, r19
 76a:	c9 f4       	brne	.+50     	; 0x79e <.L8>

0000076c <.Loc.53>:
            distance_left = distance;  // Store distance for Sensor A
 76c:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <distance_left+0x1>
 770:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <distance_left>

00000774 <.L9>:
        if (current_sensor == 0) {
 774:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <current_sensor>
 778:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <current_sensor+0x1>

0000077c <.Loc.57>:
 77c:	89 2b       	or	r24, r25
 77e:	a1 f4       	brne	.+40     	; 0x7a8 <.L10>

00000780 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <current_sensor+0x1>
 788:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <current_sensor>

0000078c <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 78c:	e0 e2       	ldi	r30, 0x20	; 32
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	80 81       	ld	r24, Z
 792:	87 7f       	andi	r24, 0xF7	; 247
 794:	80 83       	st	Z, r24

00000796 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 796:	80 81       	ld	r24, Z

00000798 <.Loc.63>:
 798:	80 62       	ori	r24, 0x20	; 32
 79a:	80 83       	st	Z, r24
 79c:	b9 cf       	rjmp	.-142    	; 0x710 <.L5>

0000079e <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 79e:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <distance_right+0x1>
 7a2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <distance_right>
 7a6:	e6 cf       	rjmp	.-52     	; 0x774 <.L9>

000007a8 <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 7a8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <current_sensor+0x1>
 7ac:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <current_sensor>

000007b0 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 7b0:	e0 e2       	ldi	r30, 0x20	; 32
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	80 81       	ld	r24, Z
 7b6:	8f 7d       	andi	r24, 0xDF	; 223
 7b8:	80 83       	st	Z, r24

000007ba <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 7ba:	80 81       	ld	r24, Z

000007bc <.Loc.71>:
 7bc:	88 60       	ori	r24, 0x08	; 8
 7be:	80 83       	st	Z, r24

000007c0 <.LBE2>:
}
 7c0:	a7 cf       	rjmp	.-178    	; 0x710 <.L5>

000007c2 <__umulhisi3>:
 7c2:	a2 9f       	mul	r26, r18

000007c4 <.Loc.1>:
 7c4:	b0 01       	movw	r22, r0

000007c6 <.Loc.2>:
 7c6:	b3 9f       	mul	r27, r19

000007c8 <.Loc.3>:
 7c8:	c0 01       	movw	r24, r0

000007ca <.Loc.4>:
 7ca:	a3 9f       	mul	r26, r19

000007cc <.Loc.5>:
 7cc:	70 0d       	add	r23, r0

000007ce <.Loc.6>:
 7ce:	81 1d       	adc	r24, r1

000007d0 <.Loc.7>:
 7d0:	11 24       	eor	r1, r1

000007d2 <.Loc.8>:
 7d2:	91 1d       	adc	r25, r1

000007d4 <.Loc.9>:
 7d4:	b2 9f       	mul	r27, r18

000007d6 <.Loc.10>:
 7d6:	70 0d       	add	r23, r0

000007d8 <.Loc.11>:
 7d8:	81 1d       	adc	r24, r1

000007da <.Loc.12>:
 7da:	11 24       	eor	r1, r1

000007dc <.Loc.13>:
 7dc:	91 1d       	adc	r25, r1

000007de <.Loc.14>:
 7de:	08 95       	ret

000007e0 <__cmpsf2>:
 7e0:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_cmp>
 7e4:	08 f4       	brcc	.+2      	; 0x7e8 <.L1^B1>
 7e6:	81 e0       	ldi	r24, 0x01	; 1

000007e8 <.L1^B1>:
 7e8:	08 95       	ret

000007ea <__divsf3>:
 7ea:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3x>
 7ee:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_round>

000007f2 <.L^B1>:
 7f2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_pscB>
 7f6:	58 f0       	brcs	.+22     	; 0x80e <.L_nan>
 7f8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_pscA>
 7fc:	40 f0       	brcs	.+16     	; 0x80e <.L_nan>
 7fe:	29 f4       	brne	.+10     	; 0x80a <.L_zr>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	29 f0       	breq	.+10     	; 0x80e <.L_nan>

00000804 <.L_inf>:
 804:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_inf>

00000808 <.L1^B1>:
 808:	51 11       	cpse	r21, r1

0000080a <.L_zr>:
 80a:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_szero>

0000080e <.L_nan>:
 80e:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_nan>

00000812 <__divsf3x>:
 812:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_split3>
 816:	68 f3       	brcs	.-38     	; 0x7f2 <.L^B1>

00000818 <__divsf3_pse>:
 818:	99 23       	and	r25, r25
 81a:	b1 f3       	breq	.-20     	; 0x808 <.L1^B1>
 81c:	55 23       	and	r21, r21
 81e:	91 f3       	breq	.-28     	; 0x804 <.L_inf>
 820:	95 1b       	sub	r25, r21
 822:	55 0b       	sbc	r21, r21
 824:	bb 27       	eor	r27, r27
 826:	aa 27       	eor	r26, r26

00000828 <.L2^B1>:
 828:	62 17       	cp	r22, r18
 82a:	73 07       	cpc	r23, r19
 82c:	84 07       	cpc	r24, r20
 82e:	38 f0       	brcs	.+14     	; 0x83e <.L3^B1>
 830:	9f 5f       	subi	r25, 0xFF	; 255
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	22 0f       	add	r18, r18
 836:	33 1f       	adc	r19, r19
 838:	44 1f       	adc	r20, r20
 83a:	aa 1f       	adc	r26, r26
 83c:	a9 f3       	breq	.-22     	; 0x828 <.L2^B1>

0000083e <.L3^B1>:
 83e:	35 d0       	rcall	.+106    	; 0x8aa <.L_div>
 840:	0e 2e       	mov	r0, r30
 842:	3a f0       	brmi	.+14     	; 0x852 <.L5^B1>

00000844 <.L4^B1>:
 844:	e0 e8       	ldi	r30, 0x80	; 128
 846:	32 d0       	rcall	.+100    	; 0x8ac <.L_div1>
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	50 40       	sbci	r21, 0x00	; 0
 84c:	e6 95       	lsr	r30
 84e:	00 1c       	adc	r0, r0
 850:	ca f7       	brpl	.-14     	; 0x844 <.L4^B1>

00000852 <.L5^B1>:
 852:	2b d0       	rcall	.+86     	; 0x8aa <.L_div>
 854:	fe 2f       	mov	r31, r30
 856:	29 d0       	rcall	.+82     	; 0x8aa <.L_div>
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	bb 1f       	adc	r27, r27
 860:	26 17       	cp	r18, r22
 862:	37 07       	cpc	r19, r23
 864:	48 07       	cpc	r20, r24
 866:	ab 07       	cpc	r26, r27
 868:	b0 e8       	ldi	r27, 0x80	; 128
 86a:	09 f0       	breq	.+2      	; 0x86e <.L4^B2>
 86c:	bb 0b       	sbc	r27, r27

0000086e <.L4^B2>:
 86e:	80 2d       	mov	r24, r0
 870:	bf 01       	movw	r22, r30
 872:	ff 27       	eor	r31, r31
 874:	93 58       	subi	r25, 0x83	; 131
 876:	5f 4f       	sbci	r21, 0xFF	; 255
 878:	3a f0       	brmi	.+14     	; 0x888 <.L13^B1>
 87a:	9e 3f       	cpi	r25, 0xFE	; 254
 87c:	51 05       	cpc	r21, r1
 87e:	78 f0       	brcs	.+30     	; 0x89e <.L15^B1>
 880:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_inf>

00000884 <.L12^B1>:
 884:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_szero>

00000888 <.L13^B1>:
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	e4 f3       	brlt	.-8      	; 0x884 <.L12^B1>
 88c:	98 3e       	cpi	r25, 0xE8	; 232
 88e:	d4 f3       	brlt	.-12     	; 0x884 <.L12^B1>

00000890 <.L14^B1>:
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b7 95       	ror	r27
 898:	f7 95       	ror	r31
 89a:	9f 5f       	subi	r25, 0xFF	; 255
 89c:	c9 f7       	brne	.-14     	; 0x890 <.L14^B1>

0000089e <.L15^B1>:
 89e:	88 0f       	add	r24, r24
 8a0:	91 1d       	adc	r25, r1
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <.L_div>:
 8aa:	e1 e0       	ldi	r30, 0x01	; 1

000008ac <.L_div1>:
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	bb 1f       	adc	r27, r27
 8b4:	62 17       	cp	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	ba 07       	cpc	r27, r26
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <.L2^B2>
 8be:	62 1b       	sub	r22, r18
 8c0:	73 0b       	sbc	r23, r19
 8c2:	84 0b       	sbc	r24, r20
 8c4:	ba 0b       	sbc	r27, r26

000008c6 <.L2^B2>:
 8c6:	ee 1f       	adc	r30, r30
 8c8:	88 f7       	brcc	.-30     	; 0x8ac <.L_div1>
 8ca:	e0 95       	com	r30
 8cc:	08 95       	ret

000008ce <__floatunsisf>:
 8ce:	e8 94       	clt
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <.L1^B1>

000008d2 <__floatsisf>:
 8d2:	97 fb       	bst	r25, 7
 8d4:	3e f4       	brtc	.+14     	; 0x8e4 <.L1^B1>
 8d6:	90 95       	com	r25
 8d8:	80 95       	com	r24
 8da:	70 95       	com	r23
 8dc:	61 95       	neg	r22
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	8f 4f       	sbci	r24, 0xFF	; 255
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255

000008e4 <.L1^B1>:
 8e4:	99 23       	and	r25, r25
 8e6:	a9 f0       	breq	.+42     	; 0x912 <.L4^B1>
 8e8:	f9 2f       	mov	r31, r25
 8ea:	96 e9       	ldi	r25, 0x96	; 150
 8ec:	bb 27       	eor	r27, r27

000008ee <.L2^B1>:
 8ee:	93 95       	inc	r25
 8f0:	f6 95       	lsr	r31
 8f2:	87 95       	ror	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f1 11       	cpse	r31, r1
 8fc:	f8 cf       	rjmp	.-16     	; 0x8ee <.L2^B1>
 8fe:	fa f4       	brpl	.+62     	; 0x93e <.L_pack>
 900:	bb 0f       	add	r27, r27
 902:	11 f4       	brne	.+4      	; 0x908 <.L3^B1>
 904:	60 ff       	sbrs	r22, 0
 906:	1b c0       	rjmp	.+54     	; 0x93e <.L_pack>

00000908 <.L3^B1>:
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	16 c0       	rjmp	.+44     	; 0x93e <.L_pack>

00000912 <.L4^B1>:
 912:	88 23       	and	r24, r24
 914:	11 f0       	breq	.+4      	; 0x91a <.L5^B1>
 916:	96 e9       	ldi	r25, 0x96	; 150
 918:	11 c0       	rjmp	.+34     	; 0x93c <.L8^B1>

0000091a <.L5^B1>:
 91a:	77 23       	and	r23, r23
 91c:	21 f0       	breq	.+8      	; 0x926 <.L6^B1>
 91e:	9e e8       	ldi	r25, 0x8E	; 142
 920:	87 2f       	mov	r24, r23
 922:	76 2f       	mov	r23, r22
 924:	05 c0       	rjmp	.+10     	; 0x930 <.L7^B1>

00000926 <.L6^B1>:
 926:	66 23       	and	r22, r22
 928:	71 f0       	breq	.+28     	; 0x946 <.L9^B1>
 92a:	96 e8       	ldi	r25, 0x86	; 134
 92c:	86 2f       	mov	r24, r22
 92e:	70 e0       	ldi	r23, 0x00	; 0

00000930 <.L7^B1>:
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	2a f0       	brmi	.+10     	; 0x93e <.L_pack>

00000934 <.L10^B1>:
 934:	9a 95       	dec	r25
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24

0000093c <.L8^B1>:
 93c:	da f7       	brpl	.-10     	; 0x934 <.L10^B1>

0000093e <.L_pack>:
 93e:	88 0f       	add	r24, r24
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7

00000946 <.L9^B1>:
 946:	08 95       	ret

00000948 <__fp_cmp>:
 948:	99 0f       	add	r25, r25
 94a:	00 08       	sbc	r0, r0
 94c:	55 0f       	add	r21, r21
 94e:	aa 0b       	sbc	r26, r26
 950:	e0 e8       	ldi	r30, 0x80	; 128
 952:	fe ef       	ldi	r31, 0xFE	; 254
 954:	16 16       	cp	r1, r22
 956:	17 06       	cpc	r1, r23
 958:	e8 07       	cpc	r30, r24
 95a:	f9 07       	cpc	r31, r25
 95c:	c0 f0       	brcs	.+48     	; 0x98e <.L9^B1>
 95e:	12 16       	cp	r1, r18
 960:	13 06       	cpc	r1, r19
 962:	e4 07       	cpc	r30, r20
 964:	f5 07       	cpc	r31, r21
 966:	98 f0       	brcs	.+38     	; 0x98e <.L9^B1>
 968:	62 1b       	sub	r22, r18
 96a:	73 0b       	sbc	r23, r19
 96c:	84 0b       	sbc	r24, r20
 96e:	95 0b       	sbc	r25, r21
 970:	39 f4       	brne	.+14     	; 0x980 <.L1^B1>
 972:	0a 26       	eor	r0, r26
 974:	61 f0       	breq	.+24     	; 0x98e <.L9^B1>
 976:	23 2b       	or	r18, r19
 978:	24 2b       	or	r18, r20
 97a:	25 2b       	or	r18, r21
 97c:	21 f4       	brne	.+8      	; 0x986 <.L2^B1>
 97e:	08 95       	ret

00000980 <.L1^B1>:
 980:	0a 26       	eor	r0, r26
 982:	09 f4       	brne	.+2      	; 0x986 <.L2^B1>
 984:	a1 40       	sbci	r26, 0x01	; 1

00000986 <.L2^B1>:
 986:	a6 95       	lsr	r26
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	81 1d       	adc	r24, r1
 98c:	81 1d       	adc	r24, r1

0000098e <.L9^B1>:
 98e:	08 95       	ret

00000990 <__fp_inf>:
 990:	97 f9       	bld	r25, 7
 992:	9f 67       	ori	r25, 0x7F	; 127
 994:	80 e8       	ldi	r24, 0x80	; 128
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	08 95       	ret

0000099c <__fp_nan>:
 99c:	9f ef       	ldi	r25, 0xFF	; 255
 99e:	80 ec       	ldi	r24, 0xC0	; 192
 9a0:	08 95       	ret

000009a2 <__fp_pscA>:
 9a2:	00 24       	eor	r0, r0
 9a4:	0a 94       	dec	r0
 9a6:	16 16       	cp	r1, r22
 9a8:	17 06       	cpc	r1, r23
 9aa:	18 06       	cpc	r1, r24
 9ac:	09 06       	cpc	r0, r25
 9ae:	08 95       	ret

000009b0 <__fp_pscB>:
 9b0:	00 24       	eor	r0, r0
 9b2:	0a 94       	dec	r0
 9b4:	12 16       	cp	r1, r18
 9b6:	13 06       	cpc	r1, r19
 9b8:	14 06       	cpc	r1, r20
 9ba:	05 06       	cpc	r0, r21
 9bc:	08 95       	ret

000009be <__fp_round>:
 9be:	09 2e       	mov	r0, r25
 9c0:	03 94       	inc	r0
 9c2:	00 0c       	add	r0, r0
 9c4:	11 f4       	brne	.+4      	; 0x9ca <.L1^B1>
 9c6:	88 23       	and	r24, r24
 9c8:	52 f0       	brmi	.+20     	; 0x9de <.L3^B1>

000009ca <.L1^B1>:
 9ca:	bb 0f       	add	r27, r27
 9cc:	40 f4       	brcc	.+16     	; 0x9de <.L3^B1>
 9ce:	bf 2b       	or	r27, r31
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <.L2^B1>
 9d2:	60 ff       	sbrs	r22, 0
 9d4:	04 c0       	rjmp	.+8      	; 0x9de <.L3^B1>

000009d6 <.L2^B1>:
 9d6:	6f 5f       	subi	r22, 0xFF	; 255
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255

000009de <.L3^B1>:
 9de:	08 95       	ret

000009e0 <__fp_split3>:
 9e0:	57 fd       	sbrc	r21, 7
 9e2:	90 58       	subi	r25, 0x80	; 128
 9e4:	44 0f       	add	r20, r20
 9e6:	55 1f       	adc	r21, r21
 9e8:	59 f0       	breq	.+22     	; 0xa00 <.L4^B1>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	71 f0       	breq	.+28     	; 0xa0a <.L5^B1>

000009ee <.L1^B1>:
 9ee:	47 95       	ror	r20

000009f0 <__fp_splitA>:
 9f0:	88 0f       	add	r24, r24
 9f2:	97 fb       	bst	r25, 7
 9f4:	99 1f       	adc	r25, r25
 9f6:	61 f0       	breq	.+24     	; 0xa10 <.L6^B1>
 9f8:	9f 3f       	cpi	r25, 0xFF	; 255
 9fa:	79 f0       	breq	.+30     	; 0xa1a <.L7^B1>

000009fc <.L3^B1>:
 9fc:	87 95       	ror	r24
 9fe:	08 95       	ret

00000a00 <.L4^B1>:
 a00:	12 16       	cp	r1, r18
 a02:	13 06       	cpc	r1, r19
 a04:	14 06       	cpc	r1, r20
 a06:	55 1f       	adc	r21, r21
 a08:	f2 cf       	rjmp	.-28     	; 0x9ee <.L1^B1>

00000a0a <.L5^B1>:
 a0a:	46 95       	lsr	r20
 a0c:	f1 df       	rcall	.-30     	; 0x9f0 <__fp_splitA>
 a0e:	08 c0       	rjmp	.+16     	; 0xa20 <.L8^B1>

00000a10 <.L6^B1>:
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	99 1f       	adc	r25, r25
 a18:	f1 cf       	rjmp	.-30     	; 0x9fc <.L3^B1>

00000a1a <.L7^B1>:
 a1a:	86 95       	lsr	r24
 a1c:	71 05       	cpc	r23, r1
 a1e:	61 05       	cpc	r22, r1

00000a20 <.L8^B1>:
 a20:	08 94       	sec
 a22:	08 95       	ret

00000a24 <__fp_zero>:
 a24:	e8 94       	clt

00000a26 <__fp_szero>:
 a26:	bb 27       	eor	r27, r27
 a28:	66 27       	eor	r22, r22
 a2a:	77 27       	eor	r23, r23
 a2c:	cb 01       	movw	r24, r22
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
