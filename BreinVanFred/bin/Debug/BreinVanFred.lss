
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000003e8  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  0000049c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  000004f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001205  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000f54  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000095b  00000000  00000000  00002769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001a4  00000000  00000000  000030c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000006a2  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001d7  00000000  00000000  0000390a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000083  00000000  00000000  00003ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	ac 30       	cpi	r26, 0x0C	; 12

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 108:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 110:	3f 98       	cbi	0x07, 7	; 7

00000112 <.Loc.3>:
    ddr_led|=(1<<led1);
 112:	27 9a       	sbi	0x04, 7	; 4

00000114 <.Loc.5>:
    port_led|=(1<<led1);
 114:	2f 9a       	sbi	0x05, 7	; 5

00000116 <.Loc.7>:
}
 116:	08 95       	ret

00000118 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 118:	37 99       	sbic	0x06, 7	; 6
 11a:	11 c0       	rjmp	.+34     	; 0x13e <.L3>

0000011c <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0

00000122 <.L1^B1>:
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <.L1^B1>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <L0^A>

0000012c <L0^A>:
	...

0000012e <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 12e:	37 99       	sbic	0x06, 7	; 6
 130:	10 c0       	rjmp	.+32     	; 0x152 <.L2>

00000132 <.Loc.23>:
        {
            gedetecteerd=0;
 132:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <gedetecteerd.0+0x1>
 136:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <gedetecteerd.0>

0000013a <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 13a:	2f 98       	cbi	0x05, 7	; 5
 13c:	08 95       	ret

0000013e <.L3>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0

00000144 <.L1^B2>:
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <.L1^B2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <L0^A>

0000014e <L0^A>:
	...

00000150 <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 150:	37 9b       	sbis	0x06, 7	; 6

00000152 <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 152:	08 95       	ret

00000154 <.Loc.39>:
            if(!gedetecteerd)
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gedetecteerd.0>
 158:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gedetecteerd.0+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <.L5>

00000160 <.Loc.41>:
                tel++;
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tel>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tel+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <tel+0x1>
 16e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <tel>

00000172 <.L5>:
            gedetecteerd=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gedetecteerd.0+0x1>
 17a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gedetecteerd.0>

0000017e <.Loc.45>:
            port_led|=(1<<led1);//led uit
 17e:	2f 9a       	sbi	0x05, 7	; 5

00000180 <.Loc.47>:
}
 180:	e8 cf       	rjmp	.-48     	; 0x152 <.L2>

00000182 <main>:
#include "main.h"

int main(void)
{

    while(1)
 182:	ff cf       	rjmp	.-2      	; 0x182 <main>

00000184 <rechtdoor>:
#include "stepperDriver.h"

void rechtdoor(void){
    //ratio bepaald welke motor langzamer moet draaien relatief aan de ander om centraal te staan aan de route
    int ratio;
    if (distance_right < distance_left)
 184:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <distance_right>
 188:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <distance_right+0x1>
 18c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 190:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>

00000194 <.Loc.4>:
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	4c f4       	brge	.+18     	; 0x1ac <.L2>

0000019a <.Loc.5>:
        ratio = distance_right / distance_left;
 19a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <distance_right>
 19e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <distance_right+0x1>
 1a2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 1a6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 1aa:	08 95       	ret

000001ac <.L2>:
    else
        ratio = distance_left / distance_right;
 1ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 1b0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 1b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <distance_right>
 1b8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <distance_right+0x1>

000001bc <.Loc.9>:
}
 1bc:	08 95       	ret

000001be <initPinsStepper>:
#include <stdbool.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pwm pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 1be:	26 9a       	sbi	0x04, 6	; 4

000001c0 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 1c0:	25 9a       	sbi	0x04, 5	; 4

000001c2 <.Loc.5>:

	// Output pwm low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 1c2:	2e 98       	cbi	0x05, 6	; 5

000001c4 <.Loc.7>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 1c4:	2d 98       	cbi	0x05, 5	; 5

000001c6 <.Loc.10>:

	//config direction pins as output
	DDR_DIR_L |= (1<<STEPPER_LEFT_DIR);
 1c6:	26 9a       	sbi	0x04, 6	; 4

000001c8 <.Loc.11>:
	DDR_DIR_R |= (1<<STEPPER_RIGHT_DIR);
 1c8:	24 9a       	sbi	0x04, 4	; 4

000001ca <.Loc.13>:

	//output direction low
	PORT_DIR_L |= (1<<STEPPER_LEFT_DIR);
 1ca:	e2 e0       	ldi	r30, 0x02	; 2
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 81       	ld	r24, Z

000001d0 <.Loc.14>:
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24

000001d4 <.Loc.15>:
	PORT_DIR_R |= (1<<STEPPER_RIGHT_DIR);
 1d4:	2c 9a       	sbi	0x05, 4	; 5

000001d6 <.Loc.17>:
}
 1d6:	08 95       	ret

000001d8 <initTimer1Stepper>:

void initTimer1Stepper(void){
    // Use mode 14, clkdiv = 1
    TCCR1A = (1<<WGM11) | (0<<WGM10) | (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B0) | (1<<COM1B1);
 1d8:	82 ef       	ldi	r24, 0xF2	; 242
 1da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

000001de <.Loc.21>:
    TCCR1B = (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
 1de:	89 e1       	ldi	r24, 0x19	; 25
 1e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>

000001e4 <.Loc.23>:

	//define top value
	ICR1 = TOPVALUE;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 1ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>

000001f0 <.Loc.25>:
}
 1f0:	08 95       	ret

000001f2 <initStepper>:

void initStepper(void){
    initTimer1Stepper();
 1f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <initTimer1Stepper>

000001f6 <.LVL0>:
    initPinsStepper();
 1f6:	0e 94 df 00 	call	0x1be	; 0x1be <initPinsStepper>

000001fa <.LVL1>:
}
 1fa:	08 95       	ret

000001fc <speedStepperRight>:

void speedStepperRight(int PWMRight){
 1fc:	28 2f       	mov	r18, r24
 1fe:	39 2f       	mov	r19, r25

00000200 <.Loc.32>:
    OCR1A = PWMRight;
 200:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 204:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

00000208 <.Loc.34>:
}
 208:	08 95       	ret

0000020a <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 20a:	28 2f       	mov	r18, r24
 20c:	39 2f       	mov	r19, r25

0000020e <.Loc.37>:
    OCR1B = PWMLeft;
 20e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 212:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

00000216 <.Loc.39>:
}
 216:	08 95       	ret

00000218 <toggledirectionStepperLeft>:

void toggledirectionStepperLeft(){
    PORT_DIR_L ^= (1<<STEPPER_LEFT_DIR);
 218:	e2 e0       	ldi	r30, 0x02	; 2
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	80 81       	ld	r24, Z

0000021e <.Loc.42>:
 21e:	90 e4       	ldi	r25, 0x40	; 64
 220:	89 27       	eor	r24, r25
 222:	80 83       	st	Z, r24

00000224 <.Loc.43>:
}
 224:	08 95       	ret

00000226 <toggledirectionStepperRight>:

void toggledirectionStepperRight(){
    PORT_DIR_R ^= (1<<STEPPER_RIGHT_DIR);
 226:	85 b1       	in	r24, 0x05	; 5

00000228 <.Loc.46>:
 228:	90 e1       	ldi	r25, 0x10	; 16
 22a:	89 27       	eor	r24, r25
 22c:	85 b9       	out	0x05, r24	; 5

0000022e <.Loc.47>:
}
 22e:	08 95       	ret

00000230 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 230:	8b e2       	ldi	r24, 0x2B	; 43
 232:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000236 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 236:	8a e5       	ldi	r24, 0x5A	; 90
 238:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

0000023c <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 23c:	81 e2       	ldi	r24, 0x21	; 33
 23e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000242 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 24a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

0000024e <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 24e:	84 e1       	ldi	r24, 0x14	; 20
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 256:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

0000025a <.Loc.11>:
    OCR5C = 20;
 25a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 25e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000262 <.Loc.13>:
    //set enable interrupt
    sei();
 262:	78 94       	sei

00000264 <.Loc.14>:
}
 264:	08 95       	ret

00000266 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 266:	ea e0       	ldi	r30, 0x0A	; 10
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	80 81       	ld	r24, Z

0000026c <.Loc.17>:
 26c:	80 61       	ori	r24, 0x10	; 16
 26e:	80 83       	st	Z, r24

00000270 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 270:	80 81       	ld	r24, Z

00000272 <.Loc.19>:
 272:	80 62       	ori	r24, 0x20	; 32
 274:	80 83       	st	Z, r24

00000276 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 276:	ab e0       	ldi	r26, 0x0B	; 11
 278:	b1 e0       	ldi	r27, 0x01	; 1
 27a:	8c 91       	ld	r24, X
 27c:	8f 7e       	andi	r24, 0xEF	; 239
 27e:	8c 93       	st	X, r24

00000280 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 280:	8c 91       	ld	r24, X
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	8c 93       	st	X, r24

00000286 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 286:	80 81       	ld	r24, Z
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	80 83       	st	Z, r24

0000028c <.Loc.26>:
}
 28c:	08 95       	ret

0000028e <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 28e:	0e 94 33 01 	call	0x266	; 0x266 <init_pins_ultrasoon>

00000292 <.LVL0>:
    init_timer5();
 292:	0e 94 18 01 	call	0x230	; 0x230 <init_timer5>

00000296 <.LVL1>:
}
 296:	08 95       	ret

00000298 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 298:	8f 93       	push	r24
 29a:	8f b7       	in	r24, 0x3f	; 63
 29c:	8f 93       	push	r24
 29e:	8b b7       	in	r24, 0x3b	; 59
 2a0:	8f 93       	push	r24
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31

000002a6 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 2a6:	e1 e2       	ldi	r30, 0x21	; 33
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	80 81       	ld	r24, Z

000002ac <.Loc.33>:
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	80 83       	st	Z, r24

000002b0 <.Loc.34>:
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	8f 91       	pop	r24
 2b6:	8b bf       	out	0x3b, r24	; 59
 2b8:	8f 91       	pop	r24
 2ba:	8f bf       	out	0x3f, r24	; 63
 2bc:	8f 91       	pop	r24
 2be:	18 95       	reti

000002c0 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	1f 92       	push	r1
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	2b b7       	in	r18, 0x3b	; 59
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31

000002e4 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 2e4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000002e8 <.Loc.39>:
 2e8:	86 ff       	sbrs	r24, 6
 2ea:	1f c0       	rjmp	.+62     	; 0x32a <.L6>

000002ec <.Loc.40>:
        start_time = ICR5;
 2ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 2f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000002f4 <.Loc.42>:
 2f4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <start_time.0+0x1>
 2f8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <start_time.0>

000002fc <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 2fc:	e1 e2       	ldi	r30, 0x21	; 33
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	80 81       	ld	r24, Z
 302:	8f 7b       	andi	r24, 0xBF	; 191
 304:	80 83       	st	Z, r24

00000306 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	2b bf       	out	0x3b, r18	; 59
 31e:	2f 91       	pop	r18
 320:	1f 90       	pop	r1
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	18 95       	reti

0000032a <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 32a:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 32e:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000332 <.Loc.48>:
 332:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <start_time.0>
 336:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <start_time.0+0x1>
 33a:	28 1b       	sub	r18, r24
 33c:	39 0b       	sbc	r19, r25

0000033e <.Loc.49>:
 33e:	a9 e0       	ldi	r26, 0x09	; 9
 340:	bc e8       	ldi	r27, 0x8C	; 140
 342:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__umulhisi3>
 346:	00 24       	eor	r0, r0
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	00 1c       	adc	r0, r0
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	00 1c       	adc	r0, r0
 354:	89 2f       	mov	r24, r25
 356:	90 2d       	mov	r25, r0

00000358 <.Loc.50>:
        if (current_sensor == 0) {
 358:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <current_sensor>
 35c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <current_sensor+0x1>

00000360 <.Loc.52>:
 360:	23 2b       	or	r18, r19
 362:	f9 f4       	brne	.+62     	; 0x3a2 <.L8>

00000364 <.Loc.53>:
            distance_left = distance*100;  // Store distance for Sensor A
 364:	44 e6       	ldi	r20, 0x64	; 100
 366:	48 9f       	mul	r20, r24
 368:	90 01       	movw	r18, r0
 36a:	49 9f       	mul	r20, r25
 36c:	30 0d       	add	r19, r0
 36e:	11 24       	eor	r1, r1

00000370 <.Loc.55>:
 370:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <distance_left+0x1>
 374:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <distance_left>

00000378 <.L9>:
        if (current_sensor == 0) {
 378:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <current_sensor>
 37c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <current_sensor+0x1>

00000380 <.Loc.58>:
 380:	89 2b       	or	r24, r25
 382:	a1 f4       	brne	.+40     	; 0x3ac <.L10>

00000384 <.Loc.59>:
            current_sensor = 1;  // Switch to Sensor B
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <current_sensor+0x1>
 38c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <current_sensor>

00000390 <.Loc.61>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 390:	e0 e2       	ldi	r30, 0x20	; 32
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	80 81       	ld	r24, Z
 396:	87 7f       	andi	r24, 0xF7	; 247
 398:	80 83       	st	Z, r24

0000039a <.Loc.63>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 39a:	80 81       	ld	r24, Z

0000039c <.Loc.64>:
 39c:	80 62       	ori	r24, 0x20	; 32
 39e:	80 83       	st	Z, r24
 3a0:	b2 cf       	rjmp	.-156    	; 0x306 <.L5>

000003a2 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 3a2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <distance_right+0x1>
 3a6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <distance_right>
 3aa:	e6 cf       	rjmp	.-52     	; 0x378 <.L9>

000003ac <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 3ac:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <current_sensor+0x1>
 3b0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <current_sensor>

000003b4 <.Loc.69>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 3b4:	e0 e2       	ldi	r30, 0x20	; 32
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	80 81       	ld	r24, Z
 3ba:	8f 7d       	andi	r24, 0xDF	; 223
 3bc:	80 83       	st	Z, r24

000003be <.Loc.71>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 3be:	80 81       	ld	r24, Z

000003c0 <.Loc.72>:
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	80 83       	st	Z, r24

000003c4 <.LBE2>:
}
 3c4:	a0 cf       	rjmp	.-192    	; 0x306 <.L5>

000003c6 <__umulhisi3>:
 3c6:	a2 9f       	mul	r26, r18

000003c8 <.Loc.1>:
 3c8:	b0 01       	movw	r22, r0

000003ca <.Loc.2>:
 3ca:	b3 9f       	mul	r27, r19

000003cc <.Loc.3>:
 3cc:	c0 01       	movw	r24, r0

000003ce <.Loc.4>:
 3ce:	a3 9f       	mul	r26, r19

000003d0 <.Loc.5>:
 3d0:	70 0d       	add	r23, r0

000003d2 <.Loc.6>:
 3d2:	81 1d       	adc	r24, r1

000003d4 <.Loc.7>:
 3d4:	11 24       	eor	r1, r1

000003d6 <.Loc.8>:
 3d6:	91 1d       	adc	r25, r1

000003d8 <.Loc.9>:
 3d8:	b2 9f       	mul	r27, r18

000003da <.Loc.10>:
 3da:	70 0d       	add	r23, r0

000003dc <.Loc.11>:
 3dc:	81 1d       	adc	r24, r1

000003de <.Loc.12>:
 3de:	11 24       	eor	r1, r1

000003e0 <.Loc.13>:
 3e0:	91 1d       	adc	r25, r1

000003e2 <.Loc.14>:
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
