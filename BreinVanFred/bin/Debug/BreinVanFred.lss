
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000089e  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800220  00800220  00000972  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000158  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000018c2  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000011fb  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000124c  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000002e4  00000000  00000000  0000482c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000799  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000203  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000230  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001a  00000000  00000000  000056dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_35>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_45>
  b8:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee e9       	ldi	r30, 0x9E	; 158

000000fc <.Loc.4>:
  fc:	f8 e0       	ldi	r31, 0x08	; 8

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a6 33       	cpi	r26, 0x36	; 54

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
 122:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_display>:
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display (void)
{
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
 130:	80 62       	ori	r24, 0x20	; 32
 132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 134:	80 81       	ld	r24, Z

00000136 <.Loc.4>:
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24

0000013a <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 13a:	9d 9a       	sbi	0x13, 5	; 19

0000013c <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 13c:	e2 e0       	ldi	r30, 0x02	; 2
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	80 83       	st	Z, r24

00000146 <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 146:	a5 98       	cbi	0x14, 5	; 20

00000148 <.Loc.11>:
}
 148:	08 95       	ret

0000014a <send_data>:

void send_data(char data)
{
 14a:	28 e0       	ldi	r18, 0x08	; 8
 14c:	30 e0       	ldi	r19, 0x00	; 0

0000014e <.Loc.17>:
		{
			PORT_SDI |= (1 << SDI_BIT);
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 14e:	e2 e0       	ldi	r30, 0x02	; 2
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	0e c0       	rjmp	.+28     	; 0x170 <.L5>

00000154 <.L3>:
 154:	90 81       	ld	r25, Z

00000156 <.Loc.20>:
 156:	9f 7d       	andi	r25, 0xDF	; 223
 158:	90 83       	st	Z, r25

0000015a <.L4>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 15a:	90 81       	ld	r25, Z

0000015c <.Loc.22>:
 15c:	90 61       	ori	r25, 0x10	; 16
 15e:	90 83       	st	Z, r25

00000160 <.Loc.23>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 160:	90 81       	ld	r25, Z
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	90 83       	st	Z, r25

00000166 <.Loc.25>:
	for (unsigned i = 0; i < 8; i++)
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1

0000016a <.Loc.27>:
 16a:	21 15       	cp	r18, r1
 16c:	31 05       	cpc	r19, r1
 16e:	49 f0       	breq	.+18     	; 0x182 <.L7>

00000170 <.L5>:
		int bit = data & 1;
 170:	98 2f       	mov	r25, r24
 172:	91 70       	andi	r25, 0x01	; 1

00000174 <.Loc.29>:
		data >>= 1;
 174:	85 95       	asr	r24

00000176 <.Loc.31>:
		if (bit)
 176:	99 23       	and	r25, r25
 178:	69 f3       	breq	.-38     	; 0x154 <.L3>

0000017a <.Loc.33>:
			PORT_SDI |= (1 << SDI_BIT);
 17a:	90 81       	ld	r25, Z

0000017c <.Loc.34>:
 17c:	90 62       	ori	r25, 0x20	; 32
 17e:	90 83       	st	Z, r25
 180:	ec cf       	rjmp	.-40     	; 0x15a <.L4>

00000182 <.L7>:
	}
}
 182:	08 95       	ret

00000184 <send_enable>:

void send_enable(int display_nummer)
{
	send_data(0x10 << display_nummer);
 184:	90 e1       	ldi	r25, 0x10	; 16
 186:	01 c0       	rjmp	.+2      	; 0x18a <.L2^B1>

00000188 <.L1^B1>:
 188:	99 0f       	add	r25, r25

0000018a <.L2^B1>:
 18a:	8a 95       	dec	r24
 18c:	ea f7       	brpl	.-6      	; 0x188 <.L1^B1>
 18e:	89 2f       	mov	r24, r25

00000190 <.Loc.39>:
 190:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

00000194 <.LVL11>:
}
 194:	08 95       	ret

00000196 <display>:

void display(char data, int display_nummer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d6 2f       	mov	r29, r22
 19c:	c7 2f       	mov	r28, r23

0000019e <.Loc.43>:
	send_data(data);
 19e:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

000001a2 <.LVL13>:
	send_enable(display_nummer);
 1a2:	8d 2f       	mov	r24, r29
 1a4:	9c 2f       	mov	r25, r28
 1a6:	0e 94 c2 00 	call	0x184	; 0x184 <send_enable>

000001aa <.LVL14>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 1aa:	a5 9a       	sbi	0x14, 5	; 20

000001ac <.Loc.47>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 1ac:	a5 98       	cbi	0x14, 5	; 20

000001ae <.Loc.49>:
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <display_getal>:

void display_getal(unsigned int getal)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	c8 2f       	mov	r28, r24
 1be:	d9 2f       	mov	r29, r25

000001c0 <.LBB9>:
	for (int i = 0; i < 4; i++)
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0

000001c4 <.L11>:
	{
		display(segmentcodes[getal%10], i);
 1c4:	9e 01       	movw	r18, r28
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	0e 94 3e 04 	call	0x87c	; 0x87c <__umulhisi3>
 1ce:	9c 01       	movw	r18, r24
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	c9 01       	movw	r24, r18
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	fe 01       	movw	r30, r28
 1f0:	e8 1b       	sub	r30, r24
 1f2:	f9 0b       	sbc	r31, r25

000001f4 <.Loc.58>:
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254

000001fc <.Loc.59>:
 1fc:	b8 01       	movw	r22, r16
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 cb 00 	call	0x196	; 0x196 <display>

00000204 <.LVL18>:
		getal /= 10;
 204:	9e 01       	movw	r18, r28
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	0e 94 3e 04 	call	0x87c	; 0x87c <__umulhisi3>
 20e:	ec 01       	movw	r28, r24

00000210 <.Loc.62>:
 210:	d6 95       	lsr	r29
 212:	c7 95       	ror	r28
 214:	d6 95       	lsr	r29
 216:	c7 95       	ror	r28
 218:	d6 95       	lsr	r29
 21a:	c7 95       	ror	r28

0000021c <.LBB10>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15

00000220 <.L1^B2>:
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <.L1^B2>
 224:	00 c0       	rjmp	.+0      	; 0x226 <L0^A>

00000226 <L0^A>:
	...

00000228 <.LBE10>:
	for (int i = 0; i < 4; i++)
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255

0000022c <.Loc.73>:
 22c:	04 30       	cpi	r16, 0x04	; 4
 22e:	11 05       	cpc	r17, r1
 230:	49 f6       	brne	.-110    	; 0x1c4 <.L11>

00000232 <.LBE9>:
		_delay_ms(1);   // 1 kHz
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28

00000236 <.Loc.75>:
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16

0000023a <.Loc.76>:
 23a:	08 95       	ret

0000023c <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 23c:	3f 98       	cbi	0x07, 7	; 7

0000023e <.Loc.3>:
    ddr_led|=(1<<led1);
 23e:	27 9a       	sbi	0x04, 7	; 4

00000240 <.Loc.5>:
    port_led|=(1<<led1);
 240:	2f 9a       	sbi	0x05, 7	; 5

00000242 <.Loc.7>:
}
 242:	08 95       	ret

00000244 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 244:	37 99       	sbic	0x06, 7	; 6
 246:	11 c0       	rjmp	.+34     	; 0x26a <.L3>

00000248 <.LBB6>:
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	90 e0       	ldi	r25, 0x00	; 0

0000024e <.L1^B1>:
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <.L1^B1>
 256:	00 c0       	rjmp	.+0      	; 0x258 <L0^A>

00000258 <L0^A>:
	...

0000025a <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 25a:	37 99       	sbic	0x06, 7	; 6
 25c:	10 c0       	rjmp	.+32     	; 0x27e <.L2>

0000025e <.Loc.23>:
        {
            gedetecteerd=0;
 25e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <gedetecteerd.0+0x1>
 262:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <gedetecteerd.0>

00000266 <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 266:	2f 98       	cbi	0x05, 7	; 5
 268:	08 95       	ret

0000026a <.L3>:
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0

00000270 <.L1^B2>:
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <.L1^B2>
 278:	00 c0       	rjmp	.+0      	; 0x27a <L0^A>

0000027a <L0^A>:
	...

0000027c <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 27c:	37 9b       	sbis	0x06, 7	; 6

0000027e <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 27e:	08 95       	ret

00000280 <.Loc.39>:
            if(!gedetecteerd)
 280:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <gedetecteerd.0>
 284:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <gedetecteerd.0+0x1>
 288:	89 2b       	or	r24, r25
 28a:	49 f4       	brne	.+18     	; 0x29e <.L5>

0000028c <.Loc.41>:
                tel++;
 28c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <tel>
 290:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <tel+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <tel+0x1>
 29a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <tel>

0000029e <.L5>:
            gedetecteerd=1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <gedetecteerd.0+0x1>
 2a6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <gedetecteerd.0>

000002aa <.Loc.45>:
            port_led|=(1<<led1);//led uit
 2aa:	2f 9a       	sbi	0x05, 7	; 5

000002ac <.Loc.47>:
}
 2ac:	e8 cf       	rjmp	.-48     	; 0x27e <.L2>

000002ae <main>:
#include "main.h"
#include "ultrasoon.h"

int main(void)
{
    init_ultrasoon();
 2ae:	0e 94 aa 03 	call	0x754	; 0x754 <init_ultrasoon>

000002b2 <.LVL0>:
    initStepper();
 2b2:	0e 94 0d 03 	call	0x61a	; 0x61a <initStepper>

000002b6 <.LVL1>:

    vooruit();
 2b6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

000002ba <.LVL2>:
    rechtsom();
 2ba:	0e 94 08 02 	call	0x410	; 0x410 <rechtsom>

000002be <.LVL3>:
    vooruit();
 2be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

000002c2 <.LVL4>:
    return 0;
}
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	08 95       	ret

000002c8 <metingPadbreedte>:

int padbreedte;

void metingPadbreedte(void){
    //neemt afmeting van de breedte van het pad in cm
    padbreedte = distance_left + distance_right + 13;
 2c8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 2cc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 2d0:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <distance_right>
 2d4:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <distance_right+0x1>
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19

000002dc <.Loc.3>:
 2dc:	0d 96       	adiw	r24, 0x0d	; 13

000002de <.Loc.4>:
 2de:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <padbreedte+0x1>
 2e2:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <padbreedte>

000002e6 <.Loc.5>:
}
 2e6:	08 95       	ret

000002e8 <vooruit>:

void vooruit(void){
    //agv rijdt ongecontroleerd vooruit
    speedStepperLeft(50);
 2e8:	82 e3       	ldi	r24, 0x32	; 50
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 1b 03 	call	0x636	; 0x636 <speedStepperLeft>

000002f0 <.LVL0>:
    speedStepperRight(50);
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 14 03 	call	0x628	; 0x628 <speedStepperRight>

000002f8 <.LVL1>:
}
 2f8:	08 95       	ret

000002fa <stop>:

void stop(void){
    //agv stopt met rijden
    speedStepperLeft(0);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 1b 03 	call	0x636	; 0x636 <speedStepperLeft>

00000302 <.LVL2>:
    speedStepperRight(0);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 14 03 	call	0x628	; 0x628 <speedStepperRight>

0000030a <.LVL3>:
}
 30a:	08 95       	ret

0000030c <rechtdoor>:

void rechtdoor(void){
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29

00000318 <.Loc.15>:
    int topspeed = 50;
    int directionState=0;
    //while agv binnen het pad is
    while(distance_left<50){
 318:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 31c:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 320:	c2 97       	sbiw	r24, 0x32	; 50
 322:	0c f0       	brlt	.+2      	; 0x326 <.Loc.19>

00000324 <L0^A>:
 324:	6c c0       	rjmp	.+216    	; 0x3fe <.L5>

00000326 <.Loc.19>:
    int directionState=0;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0

0000032a <.Loc.20>:
            }
            if(distance_left < distance_right){
                if(directionState!=3){
                speedStepperRight(60);
                speedStepperLeft(topspeed);
                directionState = 3;
 32a:	0f 2e       	mov	r0, r31
 32c:	f3 e0       	ldi	r31, 0x03	; 3
 32e:	ef 2e       	mov	r14, r31
 330:	f0 2d       	mov	r31, r0
 332:	f1 2c       	mov	r15, r1

00000334 <.Loc.21>:
            if(distance_left < distance_right){
 334:	d2 e0       	ldi	r29, 0x02	; 2
 336:	c0 e0       	ldi	r28, 0x00	; 0

00000338 <.Loc.22>:
                directionState = 1;
 338:	01 e0       	ldi	r16, 0x01	; 1
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	0b c0       	rjmp	.+22     	; 0x354 <.L10>

0000033e <.L15>:
            if(directionState!=1){
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	91 05       	cpc	r25, r1
 342:	71 f5       	brne	.+92     	; 0x3a0 <.L14>

00000344 <.L7>:
    while(distance_left<50){
 344:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <distance_left>
 348:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <distance_left+0x1>
 34c:	22 33       	cpi	r18, 0x32	; 50
 34e:	31 05       	cpc	r19, r1
 350:	0c f0       	brlt	.+2      	; 0x354 <.L10>

00000352 <L0^A>:
 352:	55 c0       	rjmp	.+170    	; 0x3fe <.L5>

00000354 <.L10>:
        if (distance_right==distance_left) {
 354:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <distance_right>
 358:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <distance_right+0x1>
 35c:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <distance_left>
 360:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <distance_left+0x1>

00000364 <.Loc.28>:
 364:	42 17       	cp	r20, r18
 366:	53 07       	cpc	r21, r19
 368:	51 f3       	breq	.-44     	; 0x33e <.L15>

0000036a <.Loc.29>:
            if (distance_right < distance_left){
 36a:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <distance_right>
 36e:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <distance_right+0x1>
 372:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <distance_left>
 376:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <distance_left+0x1>

0000037a <.Loc.31>:
 37a:	42 17       	cp	r20, r18
 37c:	53 07       	cpc	r21, r19
 37e:	24 f5       	brge	.+72     	; 0x3c8 <.L8>

00000380 <.Loc.32>:
                if(directionState!=2){
 380:	02 97       	sbiw	r24, 0x02	; 2
 382:	c9 f4       	brne	.+50     	; 0x3b6 <.L16>

00000384 <.L9>:
            if(distance_left < distance_right){
 384:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 388:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 38c:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <distance_right>
 390:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <distance_right+0x1>

00000394 <.Loc.36>:
 394:	82 17       	cp	r24, r18
 396:	93 07       	cpc	r25, r19
 398:	3c f1       	brlt	.+78     	; 0x3e8 <.L11>
 39a:	8d 2f       	mov	r24, r29
 39c:	9c 2f       	mov	r25, r28
 39e:	d2 cf       	rjmp	.-92     	; 0x344 <.L7>

000003a0 <.L14>:
                speedStepperLeft(topspeed);
 3a0:	82 e3       	ldi	r24, 0x32	; 50
 3a2:	90 e0       	ldi	r25, 0x00	; 0

000003a4 <.Loc.38>:
 3a4:	0e 94 1b 03 	call	0x636	; 0x636 <speedStepperLeft>

000003a8 <.LVL11>:
                speedStepperRight(topspeed);
 3a8:	82 e3       	ldi	r24, 0x32	; 50
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 14 03 	call	0x628	; 0x628 <speedStepperRight>

000003b0 <.LVL12>:
                directionState = 1;
 3b0:	80 2f       	mov	r24, r16
 3b2:	91 2f       	mov	r25, r17
 3b4:	c7 cf       	rjmp	.-114    	; 0x344 <.L7>

000003b6 <.L16>:
                speedStepperLeft(60);
 3b6:	8c e3       	ldi	r24, 0x3C	; 60
 3b8:	90 e0       	ldi	r25, 0x00	; 0

000003ba <.Loc.43>:
 3ba:	0e 94 1b 03 	call	0x636	; 0x636 <speedStepperLeft>

000003be <.LVL15>:
                speedStepperRight(topspeed);
 3be:	82 e3       	ldi	r24, 0x32	; 50
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 14 03 	call	0x628	; 0x628 <speedStepperRight>

000003c6 <.LVL16>:
                directionState = 2;
 3c6:	de cf       	rjmp	.-68     	; 0x384 <.L9>

000003c8 <.L8>:
            if(distance_left < distance_right){
 3c8:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <distance_left>
 3cc:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <distance_left+0x1>
 3d0:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <distance_right>
 3d4:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <distance_right+0x1>

000003d8 <.Loc.49>:
 3d8:	42 17       	cp	r20, r18
 3da:	53 07       	cpc	r21, r19
 3dc:	0c f0       	brlt	.+2      	; 0x3e0 <.Loc.50>

000003de <L0^A>:
 3de:	b2 cf       	rjmp	.-156    	; 0x344 <.L7>

000003e0 <.Loc.50>:
                if(directionState!=3){
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <.L11>

000003e6 <L0^A>:
 3e6:	ae cf       	rjmp	.-164    	; 0x344 <.L7>

000003e8 <.L11>:
                speedStepperRight(60);
 3e8:	8c e3       	ldi	r24, 0x3C	; 60
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 14 03 	call	0x628	; 0x628 <speedStepperRight>

000003f0 <.LVL19>:
                speedStepperLeft(topspeed);
 3f0:	82 e3       	ldi	r24, 0x32	; 50
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 1b 03 	call	0x636	; 0x636 <speedStepperLeft>

000003f8 <.LVL20>:
                directionState = 3;
 3f8:	8e 2d       	mov	r24, r14
 3fa:	9f 2d       	mov	r25, r15
 3fc:	a3 cf       	rjmp	.-186    	; 0x344 <.L7>

000003fe <.L5>:
                }
            }
        }
    }
    //stop driving
    stop();
 3fe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <stop>

00000402 <.LVL22>:
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	08 95       	ret

00000410 <rechtsom>:

void rechtsom(void){
    clearStepCnt();
 410:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

00000414 <.LVL23>:
    while(stepCounterLeft<2100){      //agv rijdt ietsjes verder buiten het pad
 414:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 418:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 41c:	84 33       	cpi	r24, 0x34	; 52
 41e:	98 40       	sbci	r25, 0x08	; 8
 420:	48 f4       	brcc	.+18     	; 0x434 <.L18>

00000422 <.L19>:
        vooruit();
 422:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000426 <.LVL24>:
    while(stepCounterLeft<2100){      //agv rijdt ietsjes verder buiten het pad
 426:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 42a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 42e:	84 33       	cpi	r24, 0x34	; 52
 430:	98 40       	sbci	r25, 0x08	; 8
 432:	b8 f3       	brcs	.-18     	; 0x422 <.L19>

00000434 <.L18>:
    }
    clearStepCnt();
 434:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

00000438 <.LVL25>:
    toggleStepperDirectionRight();
 438:	0e 94 22 03 	call	0x644	; 0x644 <toggleStepperDirectionRight>

0000043c <.LVL26>:
    while(stepCounterLeft<2150){   //agv draait 90 graden
 43c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 440:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 444:	86 36       	cpi	r24, 0x66	; 102
 446:	98 40       	sbci	r25, 0x08	; 8
 448:	48 f4       	brcc	.+18     	; 0x45c <.L20>

0000044a <.L21>:
        vooruit();
 44a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

0000044e <.LVL27>:
    while(stepCounterLeft<2150){   //agv draait 90 graden
 44e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 452:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 456:	86 36       	cpi	r24, 0x66	; 102
 458:	98 40       	sbci	r25, 0x08	; 8
 45a:	b8 f3       	brcs	.-18     	; 0x44a <.L21>

0000045c <.L20>:
    }
    toggleStepperDirectionRight();
 45c:	0e 94 22 03 	call	0x644	; 0x644 <toggleStepperDirectionRight>

00000460 <.LVL28>:
    clearStepCnt();
 460:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

00000464 <.LVL29>:
    while(stepCounterLeft<(7100)){    //agv rijdt naar volgende pad
 464:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 468:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 46c:	8c 3b       	cpi	r24, 0xBC	; 188
 46e:	9b 41       	sbci	r25, 0x1B	; 27
 470:	48 f4       	brcc	.+18     	; 0x484 <.L22>

00000472 <.L23>:
        vooruit();
 472:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000476 <.LVL30>:
    while(stepCounterLeft<(7100)){    //agv rijdt naar volgende pad
 476:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 47a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 47e:	8c 3b       	cpi	r24, 0xBC	; 188
 480:	9b 41       	sbci	r25, 0x1B	; 27
 482:	b8 f3       	brcs	.-18     	; 0x472 <.L23>

00000484 <.L22>:
    }
    toggleStepperDirectionRight();      //agv draati 90 graden
 484:	0e 94 22 03 	call	0x644	; 0x644 <toggleStepperDirectionRight>

00000488 <.LVL31>:
    clearStepCnt();
 488:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

0000048c <.LVL32>:
    while(stepCounterLeft<(2150)){
 48c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 490:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 494:	86 36       	cpi	r24, 0x66	; 102
 496:	98 40       	sbci	r25, 0x08	; 8
 498:	48 f4       	brcc	.+18     	; 0x4ac <.L24>

0000049a <.L25>:
        vooruit();
 49a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

0000049e <.LVL33>:
    while(stepCounterLeft<(2150)){
 49e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 4a2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 4a6:	86 36       	cpi	r24, 0x66	; 102
 4a8:	98 40       	sbci	r25, 0x08	; 8
 4aa:	b8 f3       	brcs	.-18     	; 0x49a <.L25>

000004ac <.L24>:
    }
    toggleStepperDirectionRight();
 4ac:	0e 94 22 03 	call	0x644	; 0x644 <toggleStepperDirectionRight>

000004b0 <.LVL34>:
    clearStepCnt();
 4b0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

000004b4 <.LVL35>:
    vooruit();
 4b4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

000004b8 <.LVL36>:
    while(distance_left>25){           //agv is in het volgende pad
 4b8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 4bc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 4c0:	4a 97       	sbiw	r24, 0x1a	; 26
 4c2:	44 f0       	brlt	.+16     	; 0x4d4 <.L26>

000004c4 <.L27>:
        vooruit();
 4c4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

000004c8 <.LVL37>:
    while(distance_left>25){           //agv is in het volgende pad
 4c8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 4cc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 4d0:	4a 97       	sbiw	r24, 0x1a	; 26
 4d2:	c4 f7       	brge	.-16     	; 0x4c4 <.L27>

000004d4 <.L26>:
    }
    stop();
 4d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <stop>

000004d8 <.LVL38>:
}
 4d8:	08 95       	ret

000004da <linksom>:

void linksom(void){
    clearStepCnt();
 4da:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

000004de <.LVL39>:
    while(stepCounterLeft<2100){      //agv rijdt ietsjes verder buiten het pad
 4de:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 4e2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 4e6:	84 33       	cpi	r24, 0x34	; 52
 4e8:	98 40       	sbci	r25, 0x08	; 8
 4ea:	48 f4       	brcc	.+18     	; 0x4fe <.L34>

000004ec <.L35>:
        vooruit();
 4ec:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

000004f0 <.LVL40>:
    while(stepCounterLeft<2100){      //agv rijdt ietsjes verder buiten het pad
 4f0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 4f4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 4f8:	84 33       	cpi	r24, 0x34	; 52
 4fa:	98 40       	sbci	r25, 0x08	; 8
 4fc:	b8 f3       	brcs	.-18     	; 0x4ec <.L35>

000004fe <.L34>:
    }
    clearStepCnt();
 4fe:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

00000502 <.LVL41>:
    toggleStepperDirectionLeft();
 502:	0e 94 34 03 	call	0x668	; 0x668 <toggleStepperDirectionLeft>

00000506 <.LVL42>:
    while(stepCounterLeft<2150){   //agv draait 90 graden
 506:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 50a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 50e:	86 36       	cpi	r24, 0x66	; 102
 510:	98 40       	sbci	r25, 0x08	; 8
 512:	48 f4       	brcc	.+18     	; 0x526 <.L36>

00000514 <.L37>:
        vooruit();
 514:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000518 <.LVL43>:
    while(stepCounterLeft<2150){   //agv draait 90 graden
 518:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 51c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 520:	86 36       	cpi	r24, 0x66	; 102
 522:	98 40       	sbci	r25, 0x08	; 8
 524:	b8 f3       	brcs	.-18     	; 0x514 <.L37>

00000526 <.L36>:
    }
    toggleStepperDirectionLeft();
 526:	0e 94 34 03 	call	0x668	; 0x668 <toggleStepperDirectionLeft>

0000052a <.LVL44>:
    clearStepCnt();
 52a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

0000052e <.LVL45>:
    while(stepCounterLeft<(7100)){    //agv rijdt naar volgende pad
 52e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 532:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 536:	8c 3b       	cpi	r24, 0xBC	; 188
 538:	9b 41       	sbci	r25, 0x1B	; 27
 53a:	48 f4       	brcc	.+18     	; 0x54e <.L38>

0000053c <.L39>:
        vooruit();
 53c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000540 <.LVL46>:
    while(stepCounterLeft<(7100)){    //agv rijdt naar volgende pad
 540:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 544:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 548:	8c 3b       	cpi	r24, 0xBC	; 188
 54a:	9b 41       	sbci	r25, 0x1B	; 27
 54c:	b8 f3       	brcs	.-18     	; 0x53c <.L39>

0000054e <.L38>:
    }
    toggleStepperDirectionLeft();      //agv draati 90 graden
 54e:	0e 94 34 03 	call	0x668	; 0x668 <toggleStepperDirectionLeft>

00000552 <.LVL47>:
    clearStepCnt();
 552:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

00000556 <.LVL48>:
    while(stepCounterLeft<(2150)){
 556:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 55a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 55e:	86 36       	cpi	r24, 0x66	; 102
 560:	98 40       	sbci	r25, 0x08	; 8
 562:	48 f4       	brcc	.+18     	; 0x576 <.L40>

00000564 <.L41>:
        vooruit();
 564:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000568 <.LVL49>:
    while(stepCounterLeft<(2150)){
 568:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 56c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 570:	86 36       	cpi	r24, 0x66	; 102
 572:	98 40       	sbci	r25, 0x08	; 8
 574:	b8 f3       	brcs	.-18     	; 0x564 <.L41>

00000576 <.L40>:
    }
    toggleStepperDirectionLeft();
 576:	0e 94 34 03 	call	0x668	; 0x668 <toggleStepperDirectionLeft>

0000057a <.LVL50>:
    clearStepCnt();
 57a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <clearStepCnt>

0000057e <.LVL51>:
    vooruit();
 57e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000582 <.LVL52>:
    while(distance_left>25){           //agv is in het volgende pad
 582:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 586:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 58a:	4a 97       	sbiw	r24, 0x1a	; 26
 58c:	44 f0       	brlt	.+16     	; 0x59e <.L42>

0000058e <.L43>:
        vooruit();
 58e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <vooruit>

00000592 <.LVL53>:
    while(distance_left>25){           //agv is in het volgende pad
 592:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <distance_left>
 596:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <distance_left+0x1>
 59a:	4a 97       	sbiw	r24, 0x1a	; 26
 59c:	c4 f7       	brge	.-16     	; 0x58e <.L43>

0000059e <.L42>:
    }
    stop();
 59e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <stop>

000005a2 <.LVL54>:
}
 5a2:	08 95       	ret

000005a4 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 5a4:	6b 9a       	sbi	0x0d, 3	; 13

000005a6 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 5a6:	e1 e0       	ldi	r30, 0x01	; 1
 5a8:	f1 e0       	ldi	r31, 0x01	; 1
 5aa:	80 81       	ld	r24, Z

000005ac <.Loc.4>:
 5ac:	88 60       	ori	r24, 0x08	; 8
 5ae:	80 83       	st	Z, r24

000005b0 <.Loc.5>:
	DDR_DIR_R |= (1<<DIRECTION_R);
 5b0:	9d 9a       	sbi	0x13, 5	; 19

000005b2 <.Loc.7>:
	DDR_DIR_L |= (1<<DIRECTION_L);
 5b2:	80 81       	ld	r24, Z

000005b4 <.Loc.8>:
 5b4:	80 61       	ori	r24, 0x10	; 16
 5b6:	80 83       	st	Z, r24

000005b8 <.Loc.10>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 5b8:	73 98       	cbi	0x0e, 3	; 14

000005ba <.Loc.11>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 5ba:	e2 e0       	ldi	r30, 0x02	; 2
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	80 81       	ld	r24, Z
 5c0:	87 7f       	andi	r24, 0xF7	; 247
 5c2:	80 83       	st	Z, r24

000005c4 <.Loc.13>:
	PORT_DIR_R &= ~(1<<DIRECTION_R);
 5c4:	a5 98       	cbi	0x14, 5	; 20

000005c6 <.Loc.15>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 5c6:	80 81       	ld	r24, Z
 5c8:	8f 7e       	andi	r24, 0xEF	; 239
 5ca:	80 83       	st	Z, r24

000005cc <.Loc.17>:
}
 5cc:	08 95       	ret

000005ce <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 5ce:	82 ec       	ldi	r24, 0xC2	; 194
 5d0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

000005d4 <.Loc.21>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 5d4:	8c e1       	ldi	r24, 0x1C	; 28
 5d6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

000005da <.Loc.23>:
    TIMSK3 |= (1<<TOIE4);
 5da:	e1 e7       	ldi	r30, 0x71	; 113
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z

000005e0 <.Loc.24>:
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	80 83       	st	Z, r24

000005e4 <.Loc.25>:

	//define top value
    OCR3A = STEPVALUE;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 5ec:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

000005f0 <.Loc.27>:
    sei();
 5f0:	78 94       	sei

000005f2 <.Loc.28>:
}
 5f2:	08 95       	ret

000005f4 <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 5f4:	82 ec       	ldi	r24, 0xC2	; 194
 5f6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000005fa <.Loc.32>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 5fa:	8c e1       	ldi	r24, 0x1C	; 28
 5fc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000600 <.Loc.34>:
    TIMSK4 |= (1<<TOIE4);
 600:	e2 e7       	ldi	r30, 0x72	; 114
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z

00000606 <.Loc.35>:
 606:	81 60       	ori	r24, 0x01	; 1
 608:	80 83       	st	Z, r24

0000060a <.Loc.36>:

	//define top value
    OCR4A = STEPVALUE;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 612:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000616 <.Loc.38>:
    sei();
 616:	78 94       	sei

00000618 <.Loc.39>:
}
 618:	08 95       	ret

0000061a <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 61a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <initTimer4Stepper>

0000061e <.LVL0>:
    initTimer3Stepper();
 61e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <initTimer3Stepper>

00000622 <.LVL1>:
    initPinsStepper();
 622:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <initPinsStepper>

00000626 <.LVL2>:
}
 626:	08 95       	ret

00000628 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 628:	28 2f       	mov	r18, r24
 62a:	39 2f       	mov	r19, r25

0000062c <.Loc.47>:
    ICR3 = PWMRight;
 62c:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 630:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000634 <.Loc.49>:
}
 634:	08 95       	ret

00000636 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 636:	28 2f       	mov	r18, r24
 638:	39 2f       	mov	r19, r25

0000063a <.Loc.52>:
    ICR4 = PWMLeft;
 63a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 63e:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000642 <.Loc.54>:
}
 642:	08 95       	ret

00000644 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    static int state = 0;
    if(state == 0){
 644:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <state.1>
 648:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <state.1+0x1>
 64c:	89 2b       	or	r24, r25
 64e:	41 f4       	brne	.+16     	; 0x660 <.L8>

00000650 <.Loc.59>:
        PORT_DIR_R |= (1<<DIRECTION_R);
 650:	a5 9a       	sbi	0x14, 5	; 20

00000652 <.Loc.61>:
        state = 1;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0

00000656 <.L9>:
 656:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <state.1+0x1>
 65a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <state.1>

0000065e <.Loc.63>:
    }
    else{
        PORT_DIR_R &= ~(1<<DIRECTION_R);
        state = 0;
    }
}
 65e:	08 95       	ret

00000660 <.L8>:
        PORT_DIR_R &= ~(1<<DIRECTION_R);
 660:	a5 98       	cbi	0x14, 5	; 20

00000662 <.Loc.66>:
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	f7 cf       	rjmp	.-18     	; 0x656 <.L9>

00000668 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    static int state = 0;
    if(state == 0){
 668:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <state.0>
 66c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <state.0+0x1>
 670:	89 2b       	or	r24, r25
 672:	61 f4       	brne	.+24     	; 0x68c <.L11>

00000674 <.Loc.72>:
        PORT_DIR_L |= (1<<DIRECTION_L);
 674:	e2 e0       	ldi	r30, 0x02	; 2
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	80 81       	ld	r24, Z

0000067a <.Loc.73>:
 67a:	80 61       	ori	r24, 0x10	; 16
 67c:	80 83       	st	Z, r24

0000067e <.Loc.74>:
        state = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0

00000682 <.L12>:
 682:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <state.0+0x1>
 686:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <state.0>

0000068a <.Loc.76>:
    }
    else{
        PORT_DIR_L &= ~(1<<DIRECTION_L);
        state = 0;
    }
}
 68a:	08 95       	ret

0000068c <.L11>:
        PORT_DIR_L &= ~(1<<DIRECTION_L);
 68c:	e2 e0       	ldi	r30, 0x02	; 2
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	80 81       	ld	r24, Z
 692:	8f 7e       	andi	r24, 0xEF	; 239
 694:	80 83       	st	Z, r24

00000696 <.Loc.79>:
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	f3 cf       	rjmp	.-26     	; 0x682 <.L12>

0000069c <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 69c:	8f 93       	push	r24
 69e:	8f b7       	in	r24, 0x3f	; 63
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25

000006a4 <.Loc.82>:
    stepCounterLeft++;
 6a4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <stepCounterLeft>
 6a8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <stepCounterLeft+0x1>
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <stepCounterLeft+0x1>
 6b2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <stepCounterLeft>

000006b6 <.Loc.84>:
}
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	8f bf       	out	0x3f, r24	; 63
 6bc:	8f 91       	pop	r24
 6be:	18 95       	reti

000006c0 <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 6c0:	8f 93       	push	r24
 6c2:	8f b7       	in	r24, 0x3f	; 63
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25

000006c8 <.Loc.86>:
    stepCounterRight++;
 6c8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterRight>
 6cc:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterRight+0x1>
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stepCounterRight+0x1>
 6d6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stepCounterRight>

000006da <.Loc.88>:
}
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	8f bf       	out	0x3f, r24	; 63
 6e0:	8f 91       	pop	r24
 6e2:	18 95       	reti

000006e4 <clearStepCnt>:

void clearStepCnt(void){
    stepCounterLeft = 0;
 6e4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <stepCounterLeft+0x1>
 6e8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <stepCounterLeft>

000006ec <.Loc.92>:
    stepCounterRight = 0;
 6ec:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <stepCounterRight+0x1>
 6f0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <stepCounterRight>

000006f4 <.Loc.94>:
}
 6f4:	08 95       	ret

000006f6 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 6f6:	8b e2       	ldi	r24, 0x2B	; 43
 6f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000006fc <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 6fc:	8a e5       	ldi	r24, 0x5A	; 90
 6fe:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000702 <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 702:	81 e2       	ldi	r24, 0x21	; 33
 704:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000708 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 710:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000714 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 714:	84 e1       	ldi	r24, 0x14	; 20
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 71c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000720 <.Loc.11>:
    OCR5C = 20;
 720:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 724:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000728 <.Loc.13>:
    //set enable interrupt
    sei();
 728:	78 94       	sei

0000072a <.Loc.14>:
}
 72a:	08 95       	ret

0000072c <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 72c:	ea e0       	ldi	r30, 0x0A	; 10
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	80 81       	ld	r24, Z

00000732 <.Loc.17>:
 732:	80 61       	ori	r24, 0x10	; 16
 734:	80 83       	st	Z, r24

00000736 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 736:	80 81       	ld	r24, Z

00000738 <.Loc.19>:
 738:	80 62       	ori	r24, 0x20	; 32
 73a:	80 83       	st	Z, r24

0000073c <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 73c:	ab e0       	ldi	r26, 0x0B	; 11
 73e:	b1 e0       	ldi	r27, 0x01	; 1
 740:	8c 91       	ld	r24, X
 742:	8f 7e       	andi	r24, 0xEF	; 239
 744:	8c 93       	st	X, r24

00000746 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 746:	8c 91       	ld	r24, X
 748:	8f 7d       	andi	r24, 0xDF	; 223
 74a:	8c 93       	st	X, r24

0000074c <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 74c:	80 81       	ld	r24, Z
 74e:	8d 7f       	andi	r24, 0xFD	; 253
 750:	80 83       	st	Z, r24

00000752 <.Loc.26>:
}
 752:	08 95       	ret

00000754 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 754:	0e 94 96 03 	call	0x72c	; 0x72c <init_pins_ultrasoon>

00000758 <.LVL0>:
    init_timer5();
 758:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <init_timer5>

0000075c <.LVL1>:
}
 75c:	08 95       	ret

0000075e <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 75e:	8f 93       	push	r24
 760:	8f b7       	in	r24, 0x3f	; 63
 762:	8f 93       	push	r24
 764:	8b b7       	in	r24, 0x3b	; 59
 766:	8f 93       	push	r24
 768:	ef 93       	push	r30
 76a:	ff 93       	push	r31

0000076c <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 76c:	e1 e2       	ldi	r30, 0x21	; 33
 76e:	f1 e0       	ldi	r31, 0x01	; 1
 770:	80 81       	ld	r24, Z

00000772 <.Loc.33>:
 772:	80 64       	ori	r24, 0x40	; 64
 774:	80 83       	st	Z, r24

00000776 <.Loc.34>:
}
 776:	ff 91       	pop	r31
 778:	ef 91       	pop	r30
 77a:	8f 91       	pop	r24
 77c:	8b bf       	out	0x3b, r24	; 59
 77e:	8f 91       	pop	r24
 780:	8f bf       	out	0x3f, r24	; 63
 782:	8f 91       	pop	r24
 784:	18 95       	reti

00000786 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	1f 92       	push	r1
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	2b b7       	in	r18, 0x3b	; 59
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31

000007a8 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 7a8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000007ac <.Loc.39>:
 7ac:	86 ff       	sbrs	r24, 6
 7ae:	1e c0       	rjmp	.+60     	; 0x7ec <.L6>

000007b0 <.Loc.40>:
        start_time = ICR5;
 7b0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 7b4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000007b8 <.Loc.42>:
 7b8:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <start_time.0+0x1>
 7bc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <start_time.0>

000007c0 <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 7c0:	e1 e2       	ldi	r30, 0x21	; 33
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
 7c4:	80 81       	ld	r24, Z
 7c6:	8f 7b       	andi	r24, 0xBF	; 191
 7c8:	80 83       	st	Z, r24

000007ca <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	3f 91       	pop	r19
 7dc:	2f 91       	pop	r18
 7de:	2b bf       	out	0x3b, r18	; 59
 7e0:	2f 91       	pop	r18
 7e2:	1f 90       	pop	r1
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	18 95       	reti

000007ec <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in mm
 7ec:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 7f0:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000007f4 <.Loc.48>:
 7f4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <start_time.0>
 7f8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <start_time.0+0x1>
 7fc:	28 1b       	sub	r18, r24
 7fe:	39 0b       	sbc	r19, r25

00000800 <.Loc.49>:
 800:	a9 e0       	ldi	r26, 0x09	; 9
 802:	bc e8       	ldi	r27, 0x8C	; 140
 804:	0e 94 3e 04 	call	0x87c	; 0x87c <__umulhisi3>
 808:	00 24       	eor	r0, r0
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	00 1c       	adc	r0, r0
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	00 1c       	adc	r0, r0
 816:	89 2f       	mov	r24, r25
 818:	90 2d       	mov	r25, r0

0000081a <.Loc.50>:
        if (current_sensor == 0) {
 81a:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <current_sensor>
 81e:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <current_sensor+0x1>

00000822 <.Loc.52>:
 822:	23 2b       	or	r18, r19
 824:	c9 f4       	brne	.+50     	; 0x858 <.L8>

00000826 <.Loc.53>:
            distance_left = distance;  // Store distance for Sensor A
 826:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <distance_left+0x1>
 82a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <distance_left>

0000082e <.L9>:
        if (current_sensor == 0) {
 82e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <current_sensor>
 832:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <current_sensor+0x1>

00000836 <.Loc.57>:
 836:	89 2b       	or	r24, r25
 838:	a1 f4       	brne	.+40     	; 0x862 <.L10>

0000083a <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <current_sensor+0x1>
 842:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <current_sensor>

00000846 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 846:	e0 e2       	ldi	r30, 0x20	; 32
 848:	f1 e0       	ldi	r31, 0x01	; 1
 84a:	80 81       	ld	r24, Z
 84c:	87 7f       	andi	r24, 0xF7	; 247
 84e:	80 83       	st	Z, r24

00000850 <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 850:	80 81       	ld	r24, Z

00000852 <.Loc.63>:
 852:	80 62       	ori	r24, 0x20	; 32
 854:	80 83       	st	Z, r24
 856:	b9 cf       	rjmp	.-142    	; 0x7ca <.L5>

00000858 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 858:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <distance_right+0x1>
 85c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <distance_right>
 860:	e6 cf       	rjmp	.-52     	; 0x82e <.L9>

00000862 <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 862:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <current_sensor+0x1>
 866:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <current_sensor>

0000086a <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 86a:	e0 e2       	ldi	r30, 0x20	; 32
 86c:	f1 e0       	ldi	r31, 0x01	; 1
 86e:	80 81       	ld	r24, Z
 870:	8f 7d       	andi	r24, 0xDF	; 223
 872:	80 83       	st	Z, r24

00000874 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 874:	80 81       	ld	r24, Z

00000876 <.Loc.71>:
 876:	88 60       	ori	r24, 0x08	; 8
 878:	80 83       	st	Z, r24

0000087a <.LBE2>:
}
 87a:	a7 cf       	rjmp	.-178    	; 0x7ca <.L5>

0000087c <__umulhisi3>:
 87c:	a2 9f       	mul	r26, r18

0000087e <.Loc.1>:
 87e:	b0 01       	movw	r22, r0

00000880 <.Loc.2>:
 880:	b3 9f       	mul	r27, r19

00000882 <.Loc.3>:
 882:	c0 01       	movw	r24, r0

00000884 <.Loc.4>:
 884:	a3 9f       	mul	r26, r19

00000886 <.Loc.5>:
 886:	70 0d       	add	r23, r0

00000888 <.Loc.6>:
 888:	81 1d       	adc	r24, r1

0000088a <.Loc.7>:
 88a:	11 24       	eor	r1, r1

0000088c <.Loc.8>:
 88c:	91 1d       	adc	r25, r1

0000088e <.Loc.9>:
 88e:	b2 9f       	mul	r27, r18

00000890 <.Loc.10>:
 890:	70 0d       	add	r23, r0

00000892 <.Loc.11>:
 892:	81 1d       	adc	r24, r1

00000894 <.Loc.12>:
 894:	11 24       	eor	r1, r1

00000896 <.Loc.13>:
 896:	91 1d       	adc	r25, r1

00000898 <.Loc.14>:
 898:	08 95       	ret

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
