
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000406  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  000004ba  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000004bd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00000510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000121e  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000f54  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000095f  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001b4  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000006b4  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001d7  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000083  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	ac 30       	cpi	r26, 0x0C	; 12

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 108:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 110:	3f 98       	cbi	0x07, 7	; 7

00000112 <.Loc.3>:
    ddr_led|=(1<<led1);
 112:	27 9a       	sbi	0x04, 7	; 4

00000114 <.Loc.5>:
    port_led|=(1<<led1);
 114:	2f 9a       	sbi	0x05, 7	; 5

00000116 <.Loc.7>:
}
 116:	08 95       	ret

00000118 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 118:	37 99       	sbic	0x06, 7	; 6
 11a:	11 c0       	rjmp	.+34     	; 0x13e <.L3>

0000011c <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0

00000122 <.L1^B1>:
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <.L1^B1>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <L0^A>

0000012c <L0^A>:
	...

0000012e <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 12e:	37 99       	sbic	0x06, 7	; 6
 130:	10 c0       	rjmp	.+32     	; 0x152 <.L2>

00000132 <.Loc.23>:
        {
            gedetecteerd=0;
 132:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <gedetecteerd.0+0x1>
 136:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <gedetecteerd.0>

0000013a <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 13a:	2f 98       	cbi	0x05, 7	; 5
 13c:	08 95       	ret

0000013e <.L3>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0

00000144 <.L1^B2>:
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <.L1^B2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <L0^A>

0000014e <L0^A>:
	...

00000150 <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 150:	37 9b       	sbis	0x06, 7	; 6

00000152 <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 152:	08 95       	ret

00000154 <.Loc.39>:
            if(!gedetecteerd)
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gedetecteerd.0>
 158:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gedetecteerd.0+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <.L5>

00000160 <.Loc.41>:
                tel++;
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tel>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tel+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <tel+0x1>
 16e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <tel>

00000172 <.L5>:
            gedetecteerd=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gedetecteerd.0+0x1>
 17a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gedetecteerd.0>

0000017e <.Loc.45>:
            port_led|=(1<<led1);//led uit
 17e:	2f 9a       	sbi	0x05, 7	; 5

00000180 <.Loc.47>:
}
 180:	e8 cf       	rjmp	.-48     	; 0x152 <.L2>

00000182 <main>:
#include "main.h"

int main(void)
{

    while(1)
 182:	ff cf       	rjmp	.-2      	; 0x182 <main>

00000184 <rechtdoor>:
#include "stepperDriver.h"

void rechtdoor(void){
    //ratio bepaald welke motor langzamer moet draaien relatief aan de ander om centraal te staan aan de route
    int ratio;
    if (distance_right < distance_left)
 184:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <distance_right>
 188:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <distance_right+0x1>
 18c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 190:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>

00000194 <.Loc.4>:
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	4c f4       	brge	.+18     	; 0x1ac <.L2>

0000019a <.Loc.5>:
        ratio = distance_right / distance_left;
 19a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <distance_right>
 19e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <distance_right+0x1>
 1a2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 1a6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 1aa:	08 95       	ret

000001ac <.L2>:
    else
        ratio = distance_left / distance_right;
 1ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 1b0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 1b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <distance_right>
 1b8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <distance_right+0x1>

000001bc <.Loc.9>:
}
 1bc:	08 95       	ret

000001be <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 1be:	6b 9a       	sbi	0x0d, 3	; 13

000001c0 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 1c0:	e1 e0       	ldi	r30, 0x01	; 1
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	80 81       	ld	r24, Z

000001c6 <.Loc.4>:
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	80 83       	st	Z, r24

000001ca <.Loc.5>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 1ca:	73 98       	cbi	0x0e, 3	; 14

000001cc <.Loc.7>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 1cc:	e2 e0       	ldi	r30, 0x02	; 2
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	80 83       	st	Z, r24

000001d6 <.Loc.9>:
}
 1d6:	08 95       	ret

000001d8 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 1d8:	82 ec       	ldi	r24, 0xC2	; 194
 1da:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

000001de <.Loc.13>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 1de:	8c e1       	ldi	r24, 0x1C	; 28
 1e0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

000001e4 <.Loc.15>:

	//define top value
    OCR3A = STEPVALUE;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1ec:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

000001f0 <.Loc.17>:
}
 1f0:	08 95       	ret

000001f2 <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 1f2:	82 ec       	ldi	r24, 0xC2	; 194
 1f4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000001f8 <.Loc.21>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 1f8:	8c e1       	ldi	r24, 0x1C	; 28
 1fa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000001fe <.Loc.23>:

	//define top value
    OCR4A = STEPVALUE;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 206:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

0000020a <.Loc.25>:
}
 20a:	08 95       	ret

0000020c <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 20c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <initTimer4Stepper>

00000210 <.LVL0>:
    initTimer3Stepper();
 210:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <initTimer3Stepper>

00000214 <.LVL1>:
    initPinsStepper();
 214:	0e 94 df 00 	call	0x1be	; 0x1be <initPinsStepper>

00000218 <.LVL2>:
}
 218:	08 95       	ret

0000021a <speedStepperRight>:

void speedStepperRight(int PWMRight){
 21a:	28 2f       	mov	r18, r24
 21c:	39 2f       	mov	r19, r25

0000021e <.Loc.33>:
    ICR3 = PWMRight;
 21e:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 222:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000226 <.Loc.35>:
}
 226:	08 95       	ret

00000228 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 228:	28 2f       	mov	r18, r24
 22a:	39 2f       	mov	r19, r25

0000022c <.Loc.38>:
    ICR4 = PWMLeft;
 22c:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 230:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

00000234 <.Loc.40>:
}
 234:	08 95       	ret

00000236 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    DDR_DIR_R ^= ~(1<<PORT_DIR_R);
 236:	83 b3       	in	r24, 0x13	; 19
 238:	9f ee       	ldi	r25, 0xEF	; 239
 23a:	89 27       	eor	r24, r25

0000023c <.Loc.43>:
 23c:	83 bb       	out	0x13, r24	; 19

0000023e <.Loc.44>:
}
 23e:	08 95       	ret

00000240 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    DDR_DIR_L ^= (1<<PORT_DIR_L);
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	80 81       	ld	r24, Z

00000246 <.Loc.47>:
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	89 27       	eor	r24, r25
 24a:	80 83       	st	Z, r24

0000024c <.Loc.48>:
}
 24c:	08 95       	ret

0000024e <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000254 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 254:	8a e5       	ldi	r24, 0x5A	; 90
 256:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

0000025a <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 25a:	81 e2       	ldi	r24, 0x21	; 33
 25c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

00000260 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 268:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

0000026c <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 274:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

00000278 <.Loc.11>:
    OCR5C = 20;
 278:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 27c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000280 <.Loc.13>:
    //set enable interrupt
    sei();
 280:	78 94       	sei

00000282 <.Loc.14>:
}
 282:	08 95       	ret

00000284 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 284:	ea e0       	ldi	r30, 0x0A	; 10
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	80 81       	ld	r24, Z

0000028a <.Loc.17>:
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	80 83       	st	Z, r24

0000028e <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 28e:	80 81       	ld	r24, Z

00000290 <.Loc.19>:
 290:	80 62       	ori	r24, 0x20	; 32
 292:	80 83       	st	Z, r24

00000294 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 294:	ab e0       	ldi	r26, 0x0B	; 11
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	8c 91       	ld	r24, X
 29a:	8f 7e       	andi	r24, 0xEF	; 239
 29c:	8c 93       	st	X, r24

0000029e <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 29e:	8c 91       	ld	r24, X
 2a0:	8f 7d       	andi	r24, 0xDF	; 223
 2a2:	8c 93       	st	X, r24

000002a4 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 2a4:	80 81       	ld	r24, Z
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	80 83       	st	Z, r24

000002aa <.Loc.26>:
}
 2aa:	08 95       	ret

000002ac <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 2ac:	0e 94 42 01 	call	0x284	; 0x284 <init_pins_ultrasoon>

000002b0 <.LVL0>:
    init_timer5();
 2b0:	0e 94 27 01 	call	0x24e	; 0x24e <init_timer5>

000002b4 <.LVL1>:
}
 2b4:	08 95       	ret

000002b6 <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 2b6:	8f 93       	push	r24
 2b8:	8f b7       	in	r24, 0x3f	; 63
 2ba:	8f 93       	push	r24
 2bc:	8b b7       	in	r24, 0x3b	; 59
 2be:	8f 93       	push	r24
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31

000002c4 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 2c4:	e1 e2       	ldi	r30, 0x21	; 33
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	80 81       	ld	r24, Z

000002ca <.Loc.33>:
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24

000002ce <.Loc.34>:
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	8f 91       	pop	r24
 2d4:	8b bf       	out	0x3b, r24	; 59
 2d6:	8f 91       	pop	r24
 2d8:	8f bf       	out	0x3f, r24	; 63
 2da:	8f 91       	pop	r24
 2dc:	18 95       	reti

000002de <__vector_46>:

ISR(TIMER5_CAPT_vect){
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	1f 92       	push	r1
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	2b b7       	in	r18, 0x3b	; 59
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31

00000302 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 302:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000306 <.Loc.39>:
 306:	86 ff       	sbrs	r24, 6
 308:	1f c0       	rjmp	.+62     	; 0x348 <.L6>

0000030a <.Loc.40>:
        start_time = ICR5;
 30a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 30e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000312 <.Loc.42>:
 312:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <start_time.0+0x1>
 316:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <start_time.0>

0000031a <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 31a:	e1 e2       	ldi	r30, 0x21	; 33
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	80 81       	ld	r24, Z
 320:	8f 7b       	andi	r24, 0xBF	; 191
 322:	80 83       	st	Z, r24

00000324 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	2b bf       	out	0x3b, r18	; 59
 33c:	2f 91       	pop	r18
 33e:	1f 90       	pop	r1
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	18 95       	reti

00000348 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 348:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 34c:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000350 <.Loc.48>:
 350:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <start_time.0>
 354:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <start_time.0+0x1>
 358:	28 1b       	sub	r18, r24
 35a:	39 0b       	sbc	r19, r25

0000035c <.Loc.49>:
 35c:	a9 e0       	ldi	r26, 0x09	; 9
 35e:	bc e8       	ldi	r27, 0x8C	; 140
 360:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 364:	00 24       	eor	r0, r0
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	00 1c       	adc	r0, r0
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	00 1c       	adc	r0, r0
 372:	89 2f       	mov	r24, r25
 374:	90 2d       	mov	r25, r0

00000376 <.Loc.50>:
        if (current_sensor == 0) {
 376:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <current_sensor>
 37a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <current_sensor+0x1>

0000037e <.Loc.52>:
 37e:	23 2b       	or	r18, r19
 380:	f9 f4       	brne	.+62     	; 0x3c0 <.L8>

00000382 <.Loc.53>:
            distance_left = distance*100;  // Store distance for Sensor A
 382:	44 e6       	ldi	r20, 0x64	; 100
 384:	48 9f       	mul	r20, r24
 386:	90 01       	movw	r18, r0
 388:	49 9f       	mul	r20, r25
 38a:	30 0d       	add	r19, r0
 38c:	11 24       	eor	r1, r1

0000038e <.Loc.55>:
 38e:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <distance_left+0x1>
 392:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <distance_left>

00000396 <.L9>:
        if (current_sensor == 0) {
 396:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <current_sensor>
 39a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <current_sensor+0x1>

0000039e <.Loc.58>:
 39e:	89 2b       	or	r24, r25
 3a0:	a1 f4       	brne	.+40     	; 0x3ca <.L10>

000003a2 <.Loc.59>:
            current_sensor = 1;  // Switch to Sensor B
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <current_sensor+0x1>
 3aa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <current_sensor>

000003ae <.Loc.61>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 3ae:	e0 e2       	ldi	r30, 0x20	; 32
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	80 81       	ld	r24, Z
 3b4:	87 7f       	andi	r24, 0xF7	; 247
 3b6:	80 83       	st	Z, r24

000003b8 <.Loc.63>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 3b8:	80 81       	ld	r24, Z

000003ba <.Loc.64>:
 3ba:	80 62       	ori	r24, 0x20	; 32
 3bc:	80 83       	st	Z, r24
 3be:	b2 cf       	rjmp	.-156    	; 0x324 <.L5>

000003c0 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 3c0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <distance_right+0x1>
 3c4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <distance_right>
 3c8:	e6 cf       	rjmp	.-52     	; 0x396 <.L9>

000003ca <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 3ca:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <current_sensor+0x1>
 3ce:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <current_sensor>

000003d2 <.Loc.69>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 3d2:	e0 e2       	ldi	r30, 0x20	; 32
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	80 81       	ld	r24, Z
 3d8:	8f 7d       	andi	r24, 0xDF	; 223
 3da:	80 83       	st	Z, r24

000003dc <.Loc.71>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 3dc:	80 81       	ld	r24, Z

000003de <.Loc.72>:
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	80 83       	st	Z, r24

000003e2 <.LBE2>:
}
 3e2:	a0 cf       	rjmp	.-192    	; 0x324 <.L5>

000003e4 <__umulhisi3>:
 3e4:	a2 9f       	mul	r26, r18

000003e6 <.Loc.1>:
 3e6:	b0 01       	movw	r22, r0

000003e8 <.Loc.2>:
 3e8:	b3 9f       	mul	r27, r19

000003ea <.Loc.3>:
 3ea:	c0 01       	movw	r24, r0

000003ec <.Loc.4>:
 3ec:	a3 9f       	mul	r26, r19

000003ee <.Loc.5>:
 3ee:	70 0d       	add	r23, r0

000003f0 <.Loc.6>:
 3f0:	81 1d       	adc	r24, r1

000003f2 <.Loc.7>:
 3f2:	11 24       	eor	r1, r1

000003f4 <.Loc.8>:
 3f4:	91 1d       	adc	r25, r1

000003f6 <.Loc.9>:
 3f6:	b2 9f       	mul	r27, r18

000003f8 <.Loc.10>:
 3f8:	70 0d       	add	r23, r0

000003fa <.Loc.11>:
 3fa:	81 1d       	adc	r24, r1

000003fc <.Loc.12>:
 3fc:	11 24       	eor	r1, r1

000003fe <.Loc.13>:
 3fe:	91 1d       	adc	r25, r1

00000400 <.Loc.14>:
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
