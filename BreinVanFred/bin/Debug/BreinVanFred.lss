
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000099e  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800200  00800200  00000a52  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00000aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000135d  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000f9c  00000000  00000000  00001f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000a62  00000000  00000000  00002eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001e8  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000006e6  00000000  00000000  00003b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001e7  00000000  00000000  000041ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000008d  00000000  00000000  000043d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_46>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_50>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a0 31       	cpi	r26, 0x10	; 16

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 108:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 110:	3f 98       	cbi	0x07, 7	; 7

00000112 <.Loc.3>:
    ddr_led|=(1<<led1);
 112:	27 9a       	sbi	0x04, 7	; 4

00000114 <.Loc.5>:
    port_led|=(1<<led1);
 114:	2f 9a       	sbi	0x05, 7	; 5

00000116 <.Loc.7>:
}
 116:	08 95       	ret

00000118 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 118:	37 99       	sbic	0x06, 7	; 6
 11a:	11 c0       	rjmp	.+34     	; 0x13e <.L3>

0000011c <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0

00000122 <.L1^B1>:
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <.L1^B1>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <L0^A>

0000012c <L0^A>:
	...

0000012e <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 12e:	37 99       	sbic	0x06, 7	; 6
 130:	10 c0       	rjmp	.+32     	; 0x152 <.L2>

00000132 <.Loc.23>:
        {
            gedetecteerd=0;
 132:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <gedetecteerd.0+0x1>
 136:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <gedetecteerd.0>

0000013a <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 13a:	2f 98       	cbi	0x05, 7	; 5
 13c:	08 95       	ret

0000013e <.L3>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0

00000144 <.L1^B2>:
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <.L1^B2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <L0^A>

0000014e <L0^A>:
	...

00000150 <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 150:	37 9b       	sbis	0x06, 7	; 6

00000152 <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 152:	08 95       	ret

00000154 <.Loc.39>:
            if(!gedetecteerd)
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gedetecteerd.0>
 158:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gedetecteerd.0+0x1>
 15c:	89 2b       	or	r24, r25
 15e:	49 f4       	brne	.+18     	; 0x172 <.L5>

00000160 <.Loc.41>:
                tel++;
 160:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <tel>
 164:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <tel+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <tel+0x1>
 16e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <tel>

00000172 <.L5>:
            gedetecteerd=1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gedetecteerd.0+0x1>
 17a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gedetecteerd.0>

0000017e <.Loc.45>:
            port_led|=(1<<led1);//led uit
 17e:	2f 9a       	sbi	0x05, 7	; 5

00000180 <.Loc.47>:
}
 180:	e8 cf       	rjmp	.-48     	; 0x152 <.L2>

00000182 <main>:
#include "main.h"

int main(void)
{

    while(1)
 182:	ff cf       	rjmp	.-2      	; 0x182 <main>

00000184 <rechtdoor>:

#include "navigatieLogica.h"
#include "ultrasoon.h"
#include "stepperDriver.h"

void rechtdoor(void){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <L0^A>

0000018a <L0^A>:
 18a:	0f 92       	push	r0
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62

00000190 <.Loc.1>:
    //start driving
    speedStepperLeft(TOPSPEED);
 190:	84 e6       	ldi	r24, 0x64	; 100
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 de 01 	call	0x3bc	; 0x3bc <speedStepperLeft>

00000198 <.LVL0>:
    speedStepperRight(TOPSPEED);
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <speedStepperRight>

000001a0 <.LVL1>:
    //while agv binnen het pad is
    while(distance_right||distance_left<50){
 1a0:	4f c0       	rjmp	.+158    	; 0x240 <.L2>

000001a2 <.L6>:
        //bepaal ratio van afwijking en gebruik deze om de snelheid aan te passen
        if (distance_right < distance_left)
 1a2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <distance_right>
 1a6:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <distance_right+0x1>
 1aa:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <distance_right+0x2>
 1ae:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <distance_right+0x3>
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	ab 83       	std	Y+3, r26	; 0x03
 1b8:	bc 83       	std	Y+4, r27	; 0x04
 1ba:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <distance_left>
 1be:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <distance_left+0x1>
 1c2:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <distance_left+0x2>
 1c6:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <distance_left+0x3>

000001ca <.Loc.7>:
 1ca:	bc 01       	movw	r22, r24
 1cc:	cd 01       	movw	r24, r26
 1ce:	0e 94 01 03 	call	0x602	; 0x602 <__cmpsf2>

000001d2 <.LVL2>:
 1d2:	88 23       	and	r24, r24
 1d4:	0c f0       	brlt	.+2      	; 0x1d8 <.Loc.8>

000001d6 <L0^A>:
 1d6:	6f c0       	rjmp	.+222    	; 0x2b6 <.L8>

000001d8 <.Loc.8>:
            speedStepperLeft(TOPSPEED*(distance_right/distance_left));
 1d8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <distance_right>
 1dc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <distance_right+0x1>
 1e0:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <distance_right+0x2>
 1e4:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <distance_right+0x3>
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	ab 83       	std	Y+3, r26	; 0x03
 1ee:	bc 83       	std	Y+4, r27	; 0x04
 1f0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <distance_left>
 1f4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <distance_left+0x1>
 1f8:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <distance_left+0x2>
 1fc:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <distance_left+0x3>
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 06 03 	call	0x60c	; 0x60c <__divsf3>

00000208 <.LVL3>:
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	48 ec       	ldi	r20, 0xC8	; 200
 20e:	52 e4       	ldi	r21, 0x42	; 66
 210:	69 83       	std	Y+1, r22	; 0x01
 212:	7a 83       	std	Y+2, r23	; 0x02
 214:	8b 83       	std	Y+3, r24	; 0x03
 216:	9c 83       	std	Y+4, r25	; 0x04
 218:	69 81       	ldd	r22, Y+1	; 0x01
 21a:	7a 81       	ldd	r23, Y+2	; 0x02
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>

00000224 <.LVL4>:
 224:	69 83       	std	Y+1, r22	; 0x01
 226:	7a 83       	std	Y+2, r23	; 0x02
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	9c 83       	std	Y+4, r25	; 0x04
 22c:	69 81       	ldd	r22, Y+1	; 0x01
 22e:	7a 81       	ldd	r23, Y+2	; 0x02
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixsfsi>

00000238 <.LVL5>:
 238:	86 2f       	mov	r24, r22
 23a:	97 2f       	mov	r25, r23
 23c:	0e 94 de 01 	call	0x3bc	; 0x3bc <speedStepperLeft>

00000240 <.L2>:
    while(distance_right||distance_left<50){
 240:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <distance_right>
 244:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <distance_right+0x1>
 248:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <distance_right+0x2>
 24c:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <distance_right+0x3>
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	ab 83       	std	Y+3, r26	; 0x03
 256:	bc 83       	std	Y+4, r27	; 0x04

00000258 <.Loc.14>:
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	a9 01       	movw	r20, r18
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	0e 94 01 03 	call	0x602	; 0x602 <__cmpsf2>

00000266 <.LVL7>:
 266:	81 11       	cpse	r24, r1
 268:	9c cf       	rjmp	.-200    	; 0x1a2 <.L6>

0000026a <.Loc.15>:
 26a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 26e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 272:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <distance_left+0x2>
 276:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <distance_left+0x3>
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	ab 83       	std	Y+3, r26	; 0x03
 280:	bc 83       	std	Y+4, r27	; 0x04

00000282 <.Loc.16>:
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	48 e4       	ldi	r20, 0x48	; 72
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	0e 94 01 03 	call	0x602	; 0x602 <__cmpsf2>

00000292 <.LVL8>:
 292:	88 23       	and	r24, r24
 294:	0c f4       	brge	.+2      	; 0x298 <.Loc.17>

00000296 <L0^A>:
 296:	85 cf       	rjmp	.-246    	; 0x1a2 <.L6>

00000298 <.Loc.17>:
        else
            speedStepperRight(TOPSPEED*(distance_left/distance_right));
    }
    //stop driving
    speedStepperLeft(0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 de 01 	call	0x3bc	; 0x3bc <speedStepperLeft>

000002a0 <.LVL9>:
    speedStepperRight(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <speedStepperRight>

000002a8 <.LVL10>:
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <.L8>:
            speedStepperRight(TOPSPEED*(distance_left/distance_right));
 2b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance_left>
 2ba:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance_left+0x1>
 2be:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <distance_left+0x2>
 2c2:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <distance_left+0x3>
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	ab 83       	std	Y+3, r26	; 0x03
 2cc:	bc 83       	std	Y+4, r27	; 0x04
 2ce:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <distance_right>
 2d2:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <distance_right+0x1>
 2d6:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <distance_right+0x2>
 2da:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <distance_right+0x3>
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	0e 94 06 03 	call	0x60c	; 0x60c <__divsf3>

000002e6 <.LVL11>:
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	48 ec       	ldi	r20, 0xC8	; 200
 2ec:	52 e4       	ldi	r21, 0x42	; 66
 2ee:	69 83       	std	Y+1, r22	; 0x01
 2f0:	7a 83       	std	Y+2, r23	; 0x02
 2f2:	8b 83       	std	Y+3, r24	; 0x03
 2f4:	9c 83       	std	Y+4, r25	; 0x04
 2f6:	69 81       	ldd	r22, Y+1	; 0x01
 2f8:	7a 81       	ldd	r23, Y+2	; 0x02
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>

00000302 <.LVL12>:
 302:	69 83       	std	Y+1, r22	; 0x01
 304:	7a 83       	std	Y+2, r23	; 0x02
 306:	8b 83       	std	Y+3, r24	; 0x03
 308:	9c 83       	std	Y+4, r25	; 0x04
 30a:	69 81       	ldd	r22, Y+1	; 0x01
 30c:	7a 81       	ldd	r23, Y+2	; 0x02
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	9c 81       	ldd	r25, Y+4	; 0x04
 312:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixsfsi>

00000316 <.LVL13>:
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
 31a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <speedStepperRight>

0000031e <.LVL14>:
 31e:	90 cf       	rjmp	.-224    	; 0x240 <.L2>

00000320 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 320:	6b 9a       	sbi	0x0d, 3	; 13

00000322 <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 322:	a1 e0       	ldi	r26, 0x01	; 1
 324:	b1 e0       	ldi	r27, 0x01	; 1
 326:	8c 91       	ld	r24, X

00000328 <.Loc.4>:
 328:	88 60       	ori	r24, 0x08	; 8
 32a:	8c 93       	st	X, r24

0000032c <.Loc.5>:
	DDR_DIR_R |= (1<<PORT_DIR_R);
 32c:	44 b3       	in	r20, 0x14	; 20

0000032e <.Loc.7>:
 32e:	23 b3       	in	r18, 0x13	; 19

00000330 <.Loc.8>:
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	bc 01       	movw	r22, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <.L2^B1>

00000338 <.L1^B1>:
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23

0000033c <.L2^B1>:
 33c:	4a 95       	dec	r20
 33e:	e2 f7       	brpl	.-8      	; 0x338 <.L1^B1>

00000340 <.Loc.9>:
 340:	26 2b       	or	r18, r22
 342:	23 bb       	out	0x13, r18	; 19

00000344 <.Loc.10>:
	DDR_DIR_L |= (1<<PORT_DIR_L);
 344:	e2 e0       	ldi	r30, 0x02	; 2
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	30 81       	ld	r19, Z

0000034a <.Loc.12>:
 34a:	2c 91       	ld	r18, X

0000034c <.Loc.13>:
 34c:	02 c0       	rjmp	.+4      	; 0x352 <.L2^B2>

0000034e <.L1^B2>:
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25

00000352 <.L2^B2>:
 352:	3a 95       	dec	r19
 354:	e2 f7       	brpl	.-8      	; 0x34e <.L1^B2>

00000356 <.Loc.14>:
 356:	82 2b       	or	r24, r18
 358:	8c 93       	st	X, r24

0000035a <.Loc.15>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 35a:	73 98       	cbi	0x0e, 3	; 14

0000035c <.Loc.17>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 35c:	80 81       	ld	r24, Z
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	80 83       	st	Z, r24

00000362 <.Loc.19>:
	PORT_DIR_L &= ~(1<<DIRECTION_L);
 362:	80 81       	ld	r24, Z
 364:	8f 7e       	andi	r24, 0xEF	; 239
 366:	80 83       	st	Z, r24

00000368 <.Loc.21>:
	PORT_DIR_R &= ~(1<<DIRECTION_R);
 368:	a4 98       	cbi	0x14, 4	; 20

0000036a <.Loc.23>:
}
 36a:	08 95       	ret

0000036c <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 36c:	82 ec       	ldi	r24, 0xC2	; 194
 36e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

00000372 <.Loc.27>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 372:	8c e1       	ldi	r24, 0x1C	; 28
 374:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

00000378 <.Loc.29>:

	//define top value
    OCR3A = STEPVALUE;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 380:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000384 <.Loc.31>:
}
 384:	08 95       	ret

00000386 <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 386:	82 ec       	ldi	r24, 0xC2	; 194
 388:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

0000038c <.Loc.35>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 38c:	8c e1       	ldi	r24, 0x1C	; 28
 38e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000392 <.Loc.37>:

	//define top value
    OCR4A = STEPVALUE;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 39a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

0000039e <.Loc.39>:
}
 39e:	08 95       	ret

000003a0 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 3a0:	0e 94 c3 01 	call	0x386	; 0x386 <initTimer4Stepper>

000003a4 <.LVL0>:
    initTimer3Stepper();
 3a4:	0e 94 b6 01 	call	0x36c	; 0x36c <initTimer3Stepper>

000003a8 <.LVL1>:
    initPinsStepper();
 3a8:	0e 94 90 01 	call	0x320	; 0x320 <initPinsStepper>

000003ac <.LVL2>:
}
 3ac:	08 95       	ret

000003ae <speedStepperRight>:

void speedStepperRight(int PWMRight){
 3ae:	28 2f       	mov	r18, r24
 3b0:	39 2f       	mov	r19, r25

000003b2 <.Loc.47>:
    ICR3 = PWMRight;
 3b2:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 3b6:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

000003ba <.Loc.49>:
}
 3ba:	08 95       	ret

000003bc <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 3bc:	28 2f       	mov	r18, r24
 3be:	39 2f       	mov	r19, r25

000003c0 <.Loc.52>:
    ICR4 = PWMLeft;
 3c0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 3c4:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

000003c8 <.Loc.54>:
}
 3c8:	08 95       	ret

000003ca <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    PORT_DIR_R ^= ~(1<<DIRECTION_R);
 3ca:	84 b3       	in	r24, 0x14	; 20
 3cc:	9f ee       	ldi	r25, 0xEF	; 239
 3ce:	89 27       	eor	r24, r25

000003d0 <.Loc.57>:
 3d0:	84 bb       	out	0x14, r24	; 20

000003d2 <.Loc.58>:
}
 3d2:	08 95       	ret

000003d4 <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    PORT_DIR_L ^= (1<<DIRECTION_L);
 3d4:	e2 e0       	ldi	r30, 0x02	; 2
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	80 81       	ld	r24, Z

000003da <.Loc.61>:
 3da:	90 e1       	ldi	r25, 0x10	; 16
 3dc:	89 27       	eor	r24, r25
 3de:	80 83       	st	Z, r24

000003e0 <.Loc.62>:
}
 3e0:	08 95       	ret

000003e2 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 3e2:	8b e2       	ldi	r24, 0x2B	; 43
 3e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000003e8 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 3e8:	8a e5       	ldi	r24, 0x5A	; 90
 3ea:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000003ee <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 3ee:	81 e2       	ldi	r24, 0x21	; 33
 3f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000003f4 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	9f ef       	ldi	r25, 0xFF	; 255
 3f8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

00000400 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 400:	84 e1       	ldi	r24, 0x14	; 20
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 408:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

0000040c <.Loc.11>:
    OCR5C = 20;
 40c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 410:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000414 <.Loc.13>:
    //set enable interrupt
    sei();
 414:	78 94       	sei

00000416 <.Loc.14>:
}
 416:	08 95       	ret

00000418 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 418:	ea e0       	ldi	r30, 0x0A	; 10
 41a:	f1 e0       	ldi	r31, 0x01	; 1
 41c:	80 81       	ld	r24, Z

0000041e <.Loc.17>:
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	80 83       	st	Z, r24

00000422 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 422:	80 81       	ld	r24, Z

00000424 <.Loc.19>:
 424:	80 62       	ori	r24, 0x20	; 32
 426:	80 83       	st	Z, r24

00000428 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 428:	ab e0       	ldi	r26, 0x0B	; 11
 42a:	b1 e0       	ldi	r27, 0x01	; 1
 42c:	8c 91       	ld	r24, X
 42e:	8f 7e       	andi	r24, 0xEF	; 239
 430:	8c 93       	st	X, r24

00000432 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 432:	8c 91       	ld	r24, X
 434:	8f 7d       	andi	r24, 0xDF	; 223
 436:	8c 93       	st	X, r24

00000438 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 438:	80 81       	ld	r24, Z
 43a:	8d 7f       	andi	r24, 0xFD	; 253
 43c:	80 83       	st	Z, r24

0000043e <.Loc.26>:
}
 43e:	08 95       	ret

00000440 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 440:	0e 94 0c 02 	call	0x418	; 0x418 <init_pins_ultrasoon>

00000444 <.LVL0>:
    init_timer5();
 444:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <init_timer5>

00000448 <.LVL1>:
}
 448:	08 95       	ret

0000044a <__vector_50>:

volatile double distance_right;
volatile double distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 44a:	8f 93       	push	r24
 44c:	8f b7       	in	r24, 0x3f	; 63
 44e:	8f 93       	push	r24
 450:	8b b7       	in	r24, 0x3b	; 59
 452:	8f 93       	push	r24
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31

00000458 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 458:	e1 e2       	ldi	r30, 0x21	; 33
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	80 81       	ld	r24, Z

0000045e <.Loc.33>:
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	80 83       	st	Z, r24

00000462 <.Loc.34>:
}
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	8f 91       	pop	r24
 468:	8b bf       	out	0x3b, r24	; 59
 46a:	8f 91       	pop	r24
 46c:	8f bf       	out	0x3f, r24	; 63
 46e:	8f 91       	pop	r24
 470:	18 95       	reti

00000472 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	0b b6       	in	r0, 0x3b	; 59
 47e:	0f 92       	push	r0
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <L0^A>

0000049e <L0^A>:
 49e:	0f 92       	push	r0
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62

000004a4 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 4a4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000004a8 <.Loc.39>:
 4a8:	86 ff       	sbrs	r24, 6
 4aa:	26 c0       	rjmp	.+76     	; 0x4f8 <.L6>

000004ac <.Loc.40>:
        start_time = ICR5;
 4ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 4b0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000004b4 <.Loc.42>:
 4b4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <start_time.0+0x1>
 4b8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <start_time.0>

000004bc <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 4bc:	e1 e2       	ldi	r30, 0x21	; 33
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	80 81       	ld	r24, Z
 4c2:	8f 7b       	andi	r24, 0xBF	; 191
 4c4:	80 83       	st	Z, r24

000004c6 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0b be       	out	0x3b, r0	; 59
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in cm
 4f8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 4fc:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000500 <.Loc.48>:
 500:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <start_time.0>
 504:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <start_time.0+0x1>
 508:	28 1b       	sub	r18, r24
 50a:	39 0b       	sbc	r19, r25

0000050c <.Loc.49>:
 50c:	a9 e0       	ldi	r26, 0x09	; 9
 50e:	bc e8       	ldi	r27, 0x8C	; 140
 510:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__umulhisi3>
 514:	00 24       	eor	r0, r0
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	00 1c       	adc	r0, r0
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	00 1c       	adc	r0, r0
 522:	89 2f       	mov	r24, r25
 524:	90 2d       	mov	r25, r0

00000526 <.Loc.50>:
        if (current_sensor == 0) {
 526:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <current_sensor>
 52a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <current_sensor+0x1>

0000052e <.Loc.52>:
 52e:	23 2b       	or	r18, r19
 530:	99 f5       	brne	.+102    	; 0x598 <.L8>

00000532 <.Loc.53>:
            distance_left = distance*100;  // Store distance for Sensor A
 532:	44 e6       	ldi	r20, 0x64	; 100
 534:	48 9f       	mul	r20, r24
 536:	90 01       	movw	r18, r0
 538:	49 9f       	mul	r20, r25
 53a:	30 0d       	add	r19, r0
 53c:	11 24       	eor	r1, r1

0000053e <.Loc.55>:
 53e:	c9 01       	movw	r24, r18
 540:	33 0f       	add	r19, r19
 542:	aa 0b       	sbc	r26, r26
 544:	bb 0b       	sbc	r27, r27

00000546 <.Loc.56>:
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	ab 83       	std	Y+3, r26	; 0x03
 54c:	bc 83       	std	Y+4, r27	; 0x04
 54e:	bc 01       	movw	r22, r24
 550:	cd 01       	movw	r24, r26
 552:	0e 94 b0 03 	call	0x760	; 0x760 <__floatsisf>

00000556 <.LVL4>:
 556:	46 2f       	mov	r20, r22
 558:	57 2f       	mov	r21, r23
 55a:	68 2f       	mov	r22, r24
 55c:	79 2f       	mov	r23, r25
 55e:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <distance_left>
 562:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <distance_left+0x1>
 566:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <distance_left+0x2>
 56a:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <distance_left+0x3>

0000056e <.L9>:
        if (current_sensor == 0) {
 56e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <current_sensor>
 572:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <current_sensor+0x1>

00000576 <.Loc.59>:
 576:	89 2b       	or	r24, r25
 578:	41 f5       	brne	.+80     	; 0x5ca <.L10>

0000057a <.Loc.60>:
            current_sensor = 1;  // Switch to Sensor B
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <current_sensor+0x1>
 582:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <current_sensor>

00000586 <.Loc.62>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 586:	e0 e2       	ldi	r30, 0x20	; 32
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	80 81       	ld	r24, Z
 58c:	87 7f       	andi	r24, 0xF7	; 247
 58e:	80 83       	st	Z, r24

00000590 <.Loc.64>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 590:	80 81       	ld	r24, Z

00000592 <.Loc.65>:
 592:	80 62       	ori	r24, 0x20	; 32
 594:	80 83       	st	Z, r24
 596:	97 cf       	rjmp	.-210    	; 0x4c6 <.L5>

00000598 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 598:	9c 01       	movw	r18, r24
 59a:	99 0f       	add	r25, r25
 59c:	44 0b       	sbc	r20, r20
 59e:	55 0b       	sbc	r21, r21
 5a0:	29 83       	std	Y+1, r18	; 0x01
 5a2:	3a 83       	std	Y+2, r19	; 0x02
 5a4:	4b 83       	std	Y+3, r20	; 0x03
 5a6:	5c 83       	std	Y+4, r21	; 0x04
 5a8:	ca 01       	movw	r24, r20
 5aa:	b9 01       	movw	r22, r18
 5ac:	0e 94 b0 03 	call	0x760	; 0x760 <__floatsisf>

000005b0 <.LVL6>:
 5b0:	46 2f       	mov	r20, r22
 5b2:	57 2f       	mov	r21, r23
 5b4:	68 2f       	mov	r22, r24
 5b6:	79 2f       	mov	r23, r25
 5b8:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <distance_right>
 5bc:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <distance_right+0x1>
 5c0:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <distance_right+0x2>
 5c4:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <distance_right+0x3>
 5c8:	d2 cf       	rjmp	.-92     	; 0x56e <.L9>

000005ca <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 5ca:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <current_sensor+0x1>
 5ce:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <current_sensor>

000005d2 <.Loc.71>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 5d2:	e0 e2       	ldi	r30, 0x20	; 32
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	80 81       	ld	r24, Z
 5d8:	8f 7d       	andi	r24, 0xDF	; 223
 5da:	80 83       	st	Z, r24

000005dc <.Loc.73>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 5dc:	80 81       	ld	r24, Z

000005de <.Loc.74>:
 5de:	88 60       	ori	r24, 0x08	; 8
 5e0:	80 83       	st	Z, r24

000005e2 <.LBE2>:
}
 5e2:	71 cf       	rjmp	.-286    	; 0x4c6 <.L5>

000005e4 <__umulhisi3>:
 5e4:	a2 9f       	mul	r26, r18

000005e6 <.Loc.1>:
 5e6:	b0 01       	movw	r22, r0

000005e8 <.Loc.2>:
 5e8:	b3 9f       	mul	r27, r19

000005ea <.Loc.3>:
 5ea:	c0 01       	movw	r24, r0

000005ec <.Loc.4>:
 5ec:	a3 9f       	mul	r26, r19

000005ee <.Loc.5>:
 5ee:	70 0d       	add	r23, r0

000005f0 <.Loc.6>:
 5f0:	81 1d       	adc	r24, r1

000005f2 <.Loc.7>:
 5f2:	11 24       	eor	r1, r1

000005f4 <.Loc.8>:
 5f4:	91 1d       	adc	r25, r1

000005f6 <.Loc.9>:
 5f6:	b2 9f       	mul	r27, r18

000005f8 <.Loc.10>:
 5f8:	70 0d       	add	r23, r0

000005fa <.Loc.11>:
 5fa:	81 1d       	adc	r24, r1

000005fc <.Loc.12>:
 5fc:	11 24       	eor	r1, r1

000005fe <.Loc.13>:
 5fe:	91 1d       	adc	r25, r1

00000600 <.Loc.14>:
 600:	08 95       	ret

00000602 <__cmpsf2>:
 602:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fp_cmp>
 606:	08 f4       	brcc	.+2      	; 0x60a <.L1^B1>
 608:	81 e0       	ldi	r24, 0x01	; 1

0000060a <.L1^B1>:
 60a:	08 95       	ret

0000060c <__divsf3>:
 60c:	0e 94 1a 03 	call	0x634	; 0x634 <__divsf3x>
 610:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>

00000614 <.L^B1>:
 614:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 618:	58 f0       	brcs	.+22     	; 0x630 <.L_nan>
 61a:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 61e:	40 f0       	brcs	.+16     	; 0x630 <.L_nan>
 620:	29 f4       	brne	.+10     	; 0x62c <.L_zr>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	29 f0       	breq	.+10     	; 0x630 <.L_nan>

00000626 <.L_inf>:
 626:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

0000062a <.L1^B1>:
 62a:	51 11       	cpse	r21, r1

0000062c <.L_zr>:
 62c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

00000630 <.L_nan>:
 630:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>

00000634 <__divsf3x>:
 634:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 638:	68 f3       	brcs	.-38     	; 0x614 <.L^B1>

0000063a <__divsf3_pse>:
 63a:	99 23       	and	r25, r25
 63c:	b1 f3       	breq	.-20     	; 0x62a <.L1^B1>
 63e:	55 23       	and	r21, r21
 640:	91 f3       	breq	.-28     	; 0x626 <.L_inf>
 642:	95 1b       	sub	r25, r21
 644:	55 0b       	sbc	r21, r21
 646:	bb 27       	eor	r27, r27
 648:	aa 27       	eor	r26, r26

0000064a <.L2^B1>:
 64a:	62 17       	cp	r22, r18
 64c:	73 07       	cpc	r23, r19
 64e:	84 07       	cpc	r24, r20
 650:	38 f0       	brcs	.+14     	; 0x660 <.L3^B1>
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	44 1f       	adc	r20, r20
 65c:	aa 1f       	adc	r26, r26
 65e:	a9 f3       	breq	.-22     	; 0x64a <.L2^B1>

00000660 <.L3^B1>:
 660:	35 d0       	rcall	.+106    	; 0x6cc <.L_div>
 662:	0e 2e       	mov	r0, r30
 664:	3a f0       	brmi	.+14     	; 0x674 <.L5^B1>

00000666 <.L4^B1>:
 666:	e0 e8       	ldi	r30, 0x80	; 128
 668:	32 d0       	rcall	.+100    	; 0x6ce <.L_div1>
 66a:	91 50       	subi	r25, 0x01	; 1
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	e6 95       	lsr	r30
 670:	00 1c       	adc	r0, r0
 672:	ca f7       	brpl	.-14     	; 0x666 <.L4^B1>

00000674 <.L5^B1>:
 674:	2b d0       	rcall	.+86     	; 0x6cc <.L_div>
 676:	fe 2f       	mov	r31, r30
 678:	29 d0       	rcall	.+82     	; 0x6cc <.L_div>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	bb 1f       	adc	r27, r27
 682:	26 17       	cp	r18, r22
 684:	37 07       	cpc	r19, r23
 686:	48 07       	cpc	r20, r24
 688:	ab 07       	cpc	r26, r27
 68a:	b0 e8       	ldi	r27, 0x80	; 128
 68c:	09 f0       	breq	.+2      	; 0x690 <.L4^B2>
 68e:	bb 0b       	sbc	r27, r27

00000690 <.L4^B2>:
 690:	80 2d       	mov	r24, r0
 692:	bf 01       	movw	r22, r30
 694:	ff 27       	eor	r31, r31
 696:	93 58       	subi	r25, 0x83	; 131
 698:	5f 4f       	sbci	r21, 0xFF	; 255
 69a:	3a f0       	brmi	.+14     	; 0x6aa <.L13^B1>
 69c:	9e 3f       	cpi	r25, 0xFE	; 254
 69e:	51 05       	cpc	r21, r1
 6a0:	78 f0       	brcs	.+30     	; 0x6c0 <.L15^B1>
 6a2:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

000006a6 <.L12^B1>:
 6a6:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000006aa <.L13^B1>:
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	e4 f3       	brlt	.-8      	; 0x6a6 <.L12^B1>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	d4 f3       	brlt	.-12     	; 0x6a6 <.L12^B1>

000006b2 <.L14^B1>:
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <.L14^B1>

000006c0 <.L15^B1>:
 6c0:	88 0f       	add	r24, r24
 6c2:	91 1d       	adc	r25, r1
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret

000006cc <.L_div>:
 6cc:	e1 e0       	ldi	r30, 0x01	; 1

000006ce <.L_div1>:
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	bb 1f       	adc	r27, r27
 6d6:	62 17       	cp	r22, r18
 6d8:	73 07       	cpc	r23, r19
 6da:	84 07       	cpc	r24, r20
 6dc:	ba 07       	cpc	r27, r26
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <.L2^B2>
 6e0:	62 1b       	sub	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba 0b       	sbc	r27, r26

000006e8 <.L2^B2>:
 6e8:	ee 1f       	adc	r30, r30
 6ea:	88 f7       	brcc	.-30     	; 0x6ce <.L_div1>
 6ec:	e0 95       	com	r30
 6ee:	08 95       	ret

000006f0 <__fixsfsi>:
 6f0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fixunssfsi>
 6f4:	68 94       	set
 6f6:	b1 11       	cpse	r27, r1
 6f8:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 6fc:	08 95       	ret

000006fe <__fixunssfsi>:
 6fe:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 702:	88 f0       	brcs	.+34     	; 0x726 <.L_err>
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	98 f0       	brcs	.+38     	; 0x72e <.L_zr>
 708:	b9 2f       	mov	r27, r25
 70a:	99 27       	eor	r25, r25
 70c:	b7 51       	subi	r27, 0x17	; 23
 70e:	b0 f0       	brcs	.+44     	; 0x73c <.L4^B1>
 710:	e1 f0       	breq	.+56     	; 0x74a <.L_sign>

00000712 <.L1^B1>:
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a f0       	brmi	.+6      	; 0x722 <.L2^B1>
 71c:	ba 95       	dec	r27
 71e:	c9 f7       	brne	.-14     	; 0x712 <.L1^B1>
 720:	14 c0       	rjmp	.+40     	; 0x74a <.L_sign>

00000722 <.L2^B1>:
 722:	b1 30       	cpi	r27, 0x01	; 1
 724:	91 f0       	breq	.+36     	; 0x74a <.L_sign>

00000726 <.L_err>:
 726:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_zero>
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	08 95       	ret

0000072e <.L_zr>:
 72e:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>

00000732 <.L3^B1>:
 732:	67 2f       	mov	r22, r23
 734:	78 2f       	mov	r23, r24
 736:	88 27       	eor	r24, r24
 738:	b8 5f       	subi	r27, 0xF8	; 248
 73a:	39 f0       	breq	.+14     	; 0x74a <.L_sign>

0000073c <.L4^B1>:
 73c:	b9 3f       	cpi	r27, 0xF9	; 249
 73e:	cc f3       	brlt	.-14     	; 0x732 <.L3^B1>

00000740 <.L5^B1>:
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b3 95       	inc	r27
 748:	d9 f7       	brne	.-10     	; 0x740 <.L5^B1>

0000074a <.L_sign>:
 74a:	3e f4       	brtc	.+14     	; 0x75a <.L6^B1>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255

0000075a <.L6^B1>:
 75a:	08 95       	ret

0000075c <__floatunsisf>:
 75c:	e8 94       	clt
 75e:	09 c0       	rjmp	.+18     	; 0x772 <.L1^B1>

00000760 <__floatsisf>:
 760:	97 fb       	bst	r25, 7
 762:	3e f4       	brtc	.+14     	; 0x772 <.L1^B1>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255

00000772 <.L1^B1>:
 772:	99 23       	and	r25, r25
 774:	a9 f0       	breq	.+42     	; 0x7a0 <.L4^B1>
 776:	f9 2f       	mov	r31, r25
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	bb 27       	eor	r27, r27

0000077c <.L2^B1>:
 77c:	93 95       	inc	r25
 77e:	f6 95       	lsr	r31
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f1 11       	cpse	r31, r1
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <.L2^B1>
 78c:	fa f4       	brpl	.+62     	; 0x7cc <.L_pack>
 78e:	bb 0f       	add	r27, r27
 790:	11 f4       	brne	.+4      	; 0x796 <.L3^B1>
 792:	60 ff       	sbrs	r22, 0
 794:	1b c0       	rjmp	.+54     	; 0x7cc <.L_pack>

00000796 <.L3^B1>:
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <.L_pack>

000007a0 <.L4^B1>:
 7a0:	88 23       	and	r24, r24
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <.L5^B1>
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <.L8^B1>

000007a8 <.L5^B1>:
 7a8:	77 23       	and	r23, r23
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <.L6^B1>
 7ac:	9e e8       	ldi	r25, 0x8E	; 142
 7ae:	87 2f       	mov	r24, r23
 7b0:	76 2f       	mov	r23, r22
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <.L7^B1>

000007b4 <.L6^B1>:
 7b4:	66 23       	and	r22, r22
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <.L9^B1>
 7b8:	96 e8       	ldi	r25, 0x86	; 134
 7ba:	86 2f       	mov	r24, r22
 7bc:	70 e0       	ldi	r23, 0x00	; 0

000007be <.L7^B1>:
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	2a f0       	brmi	.+10     	; 0x7cc <.L_pack>

000007c2 <.L10^B1>:
 7c2:	9a 95       	dec	r25
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24

000007ca <.L8^B1>:
 7ca:	da f7       	brpl	.-10     	; 0x7c2 <.L10^B1>

000007cc <.L_pack>:
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	97 f9       	bld	r25, 7

000007d4 <.L9^B1>:
 7d4:	08 95       	ret

000007d6 <__fp_cmp>:
 7d6:	99 0f       	add	r25, r25
 7d8:	00 08       	sbc	r0, r0
 7da:	55 0f       	add	r21, r21
 7dc:	aa 0b       	sbc	r26, r26
 7de:	e0 e8       	ldi	r30, 0x80	; 128
 7e0:	fe ef       	ldi	r31, 0xFE	; 254
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	e8 07       	cpc	r30, r24
 7e8:	f9 07       	cpc	r31, r25
 7ea:	c0 f0       	brcs	.+48     	; 0x81c <.L9^B1>
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	e4 07       	cpc	r30, r20
 7f2:	f5 07       	cpc	r31, r21
 7f4:	98 f0       	brcs	.+38     	; 0x81c <.L9^B1>
 7f6:	62 1b       	sub	r22, r18
 7f8:	73 0b       	sbc	r23, r19
 7fa:	84 0b       	sbc	r24, r20
 7fc:	95 0b       	sbc	r25, r21
 7fe:	39 f4       	brne	.+14     	; 0x80e <.L1^B1>
 800:	0a 26       	eor	r0, r26
 802:	61 f0       	breq	.+24     	; 0x81c <.L9^B1>
 804:	23 2b       	or	r18, r19
 806:	24 2b       	or	r18, r20
 808:	25 2b       	or	r18, r21
 80a:	21 f4       	brne	.+8      	; 0x814 <.L2^B1>
 80c:	08 95       	ret

0000080e <.L1^B1>:
 80e:	0a 26       	eor	r0, r26
 810:	09 f4       	brne	.+2      	; 0x814 <.L2^B1>
 812:	a1 40       	sbci	r26, 0x01	; 1

00000814 <.L2^B1>:
 814:	a6 95       	lsr	r26
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	81 1d       	adc	r24, r1
 81a:	81 1d       	adc	r24, r1

0000081c <.L9^B1>:
 81c:	08 95       	ret

0000081e <__fp_inf>:
 81e:	97 f9       	bld	r25, 7
 820:	9f 67       	ori	r25, 0x7F	; 127
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	08 95       	ret

0000082a <__fp_nan>:
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	80 ec       	ldi	r24, 0xC0	; 192
 82e:	08 95       	ret

00000830 <__fp_pscA>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	09 06       	cpc	r0, r25
 83c:	08 95       	ret

0000083e <__fp_pscB>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	05 06       	cpc	r0, r21
 84a:	08 95       	ret

0000084c <__fp_round>:
 84c:	09 2e       	mov	r0, r25
 84e:	03 94       	inc	r0
 850:	00 0c       	add	r0, r0
 852:	11 f4       	brne	.+4      	; 0x858 <.L1^B1>
 854:	88 23       	and	r24, r24
 856:	52 f0       	brmi	.+20     	; 0x86c <.L3^B1>

00000858 <.L1^B1>:
 858:	bb 0f       	add	r27, r27
 85a:	40 f4       	brcc	.+16     	; 0x86c <.L3^B1>
 85c:	bf 2b       	or	r27, r31
 85e:	11 f4       	brne	.+4      	; 0x864 <.L2^B1>
 860:	60 ff       	sbrs	r22, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <.L3^B1>

00000864 <.L2^B1>:
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255

0000086c <.L3^B1>:
 86c:	08 95       	ret

0000086e <__fp_split3>:
 86e:	57 fd       	sbrc	r21, 7
 870:	90 58       	subi	r25, 0x80	; 128
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	59 f0       	breq	.+22     	; 0x88e <.L4^B1>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	71 f0       	breq	.+28     	; 0x898 <.L5^B1>

0000087c <.L1^B1>:
 87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
 87e:	88 0f       	add	r24, r24
 880:	97 fb       	bst	r25, 7
 882:	99 1f       	adc	r25, r25
 884:	61 f0       	breq	.+24     	; 0x89e <.L6^B1>
 886:	9f 3f       	cpi	r25, 0xFF	; 255
 888:	79 f0       	breq	.+30     	; 0x8a8 <.L7^B1>

0000088a <.L3^B1>:
 88a:	87 95       	ror	r24
 88c:	08 95       	ret

0000088e <.L4^B1>:
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	14 06       	cpc	r1, r20
 894:	55 1f       	adc	r21, r21
 896:	f2 cf       	rjmp	.-28     	; 0x87c <.L1^B1>

00000898 <.L5^B1>:
 898:	46 95       	lsr	r20
 89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <.L8^B1>

0000089e <.L6^B1>:
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	f1 cf       	rjmp	.-30     	; 0x88a <.L3^B1>

000008a8 <.L7^B1>:
 8a8:	86 95       	lsr	r24
 8aa:	71 05       	cpc	r23, r1
 8ac:	61 05       	cpc	r22, r1

000008ae <.L8^B1>:
 8ae:	08 94       	sec
 8b0:	08 95       	ret

000008b2 <__fp_zero>:
 8b2:	e8 94       	clt

000008b4 <__fp_szero>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	66 27       	eor	r22, r22
 8b8:	77 27       	eor	r23, r23
 8ba:	cb 01       	movw	r24, r22
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__mulsf3>:
 8c0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 8c4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>

000008c8 <.L^B1>:
 8c8:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <.L1^B1>
 8ce:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <.L1^B1>
 8d4:	95 23       	and	r25, r21
 8d6:	11 f0       	breq	.+4      	; 0x8dc <.L1^B1>
 8d8:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

000008dc <.L1^B1>:
 8dc:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>

000008e0 <.L2^B1>:
 8e0:	11 24       	eor	r1, r1
 8e2:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000008e6 <__mulsf3x>:
 8e6:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 8ea:	70 f3       	brcs	.-36     	; 0x8c8 <.L^B1>

000008ec <__mulsf3_pse>:
 8ec:	95 9f       	mul	r25, r21
 8ee:	c1 f3       	breq	.-16     	; 0x8e0 <.L2^B1>
 8f0:	95 0f       	add	r25, r21
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	55 1f       	adc	r21, r21
 8f6:	62 9f       	mul	r22, r18
 8f8:	f0 01       	movw	r30, r0
 8fa:	72 9f       	mul	r23, r18
 8fc:	bb 27       	eor	r27, r27
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	63 9f       	mul	r22, r19
 904:	aa 27       	eor	r26, r26
 906:	f0 0d       	add	r31, r0
 908:	b1 1d       	adc	r27, r1
 90a:	aa 1f       	adc	r26, r26
 90c:	64 9f       	mul	r22, r20
 90e:	66 27       	eor	r22, r22
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	66 1f       	adc	r22, r22
 916:	82 9f       	mul	r24, r18
 918:	22 27       	eor	r18, r18
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	73 9f       	mul	r23, r19
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	62 1f       	adc	r22, r18
 928:	83 9f       	mul	r24, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	22 1f       	adc	r18, r18
 930:	74 9f       	mul	r23, r20
 932:	33 27       	eor	r19, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	23 1f       	adc	r18, r19
 93a:	84 9f       	mul	r24, r20
 93c:	60 0d       	add	r22, r0
 93e:	21 1d       	adc	r18, r1
 940:	82 2f       	mov	r24, r18
 942:	76 2f       	mov	r23, r22
 944:	6a 2f       	mov	r22, r26
 946:	11 24       	eor	r1, r1
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	9a f0       	brmi	.+38     	; 0x974 <.L13^B1>
 94e:	f1 f0       	breq	.+60     	; 0x98c <.L15^B1>

00000950 <.L10^B1>:
 950:	88 23       	and	r24, r24
 952:	4a f0       	brmi	.+18     	; 0x966 <.L11^B1>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	91 50       	subi	r25, 0x01	; 1
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	a9 f7       	brne	.-22     	; 0x950 <.L10^B1>

00000966 <.L11^B1>:
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	80 f0       	brcs	.+32     	; 0x98c <.L15^B1>
 96c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

00000970 <.L12^B1>:
 970:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

00000974 <.L13^B1>:
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	e4 f3       	brlt	.-8      	; 0x970 <.L12^B1>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	d4 f3       	brlt	.-12     	; 0x970 <.L12^B1>

0000097c <.L14^B1>:
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <.L14^B1>

0000098c <.L15^B1>:
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <_exit>:
 99a:	f8 94       	cli

0000099c <__stop_program>:
 99c:	ff cf       	rjmp	.-2      	; 0x99c <__stop_program>
