
bin\Debug\BreinVanFred.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000c0c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800220  00800220  00000ce0  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000158  00000000  00000000  00000d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000017ed  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000011a5  00000000  00000000  0000267d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000f61  00000000  00000000  00003822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000002a4  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000007a9  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000203  00000000  00000000  000051d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000002ad  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000001a  00000000  00000000  00005681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_35>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_45>
  b8:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ec e0       	ldi	r30, 0x0C	; 12

000000fc <.Loc.4>:
  fc:	fc e0       	ldi	r31, 0x0C	; 12

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a0 33       	cpi	r26, 0x30	; 48

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
 122:	0c 94 04 06 	jmp	0xc08	; 0xc08 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_display>:
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display (void)
{
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
 130:	80 62       	ori	r24, 0x20	; 32
 132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 134:	80 81       	ld	r24, Z

00000136 <.Loc.4>:
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24

0000013a <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 13a:	9d 9a       	sbi	0x13, 5	; 19

0000013c <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 13c:	e2 e0       	ldi	r30, 0x02	; 2
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	80 83       	st	Z, r24

00000146 <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 146:	a5 98       	cbi	0x14, 5	; 20

00000148 <.Loc.11>:
}
 148:	08 95       	ret

0000014a <send_data>:

void send_data(char data)
{
 14a:	28 e0       	ldi	r18, 0x08	; 8
 14c:	30 e0       	ldi	r19, 0x00	; 0

0000014e <.Loc.17>:
		{
			PORT_SDI |= (1 << SDI_BIT);
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 14e:	e2 e0       	ldi	r30, 0x02	; 2
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	0e c0       	rjmp	.+28     	; 0x170 <.L5>

00000154 <.L3>:
 154:	90 81       	ld	r25, Z

00000156 <.Loc.20>:
 156:	9f 7d       	andi	r25, 0xDF	; 223
 158:	90 83       	st	Z, r25

0000015a <.L4>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 15a:	90 81       	ld	r25, Z

0000015c <.Loc.22>:
 15c:	90 61       	ori	r25, 0x10	; 16
 15e:	90 83       	st	Z, r25

00000160 <.Loc.23>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 160:	90 81       	ld	r25, Z
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	90 83       	st	Z, r25

00000166 <.Loc.25>:
	for (unsigned i = 0; i < 8; i++)
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1

0000016a <.Loc.27>:
 16a:	21 15       	cp	r18, r1
 16c:	31 05       	cpc	r19, r1
 16e:	49 f0       	breq	.+18     	; 0x182 <.L7>

00000170 <.L5>:
		int bit = data & 1;
 170:	98 2f       	mov	r25, r24
 172:	91 70       	andi	r25, 0x01	; 1

00000174 <.Loc.29>:
		data >>= 1;
 174:	85 95       	asr	r24

00000176 <.Loc.31>:
		if (bit)
 176:	99 23       	and	r25, r25
 178:	69 f3       	breq	.-38     	; 0x154 <.L3>

0000017a <.Loc.33>:
			PORT_SDI |= (1 << SDI_BIT);
 17a:	90 81       	ld	r25, Z

0000017c <.Loc.34>:
 17c:	90 62       	ori	r25, 0x20	; 32
 17e:	90 83       	st	Z, r25
 180:	ec cf       	rjmp	.-40     	; 0x15a <.L4>

00000182 <.L7>:
	}
}
 182:	08 95       	ret

00000184 <send_enable>:

void send_enable(int display_nummer)
{
	send_data(0x10 << display_nummer);
 184:	90 e1       	ldi	r25, 0x10	; 16
 186:	01 c0       	rjmp	.+2      	; 0x18a <.L2^B1>

00000188 <.L1^B1>:
 188:	99 0f       	add	r25, r25

0000018a <.L2^B1>:
 18a:	8a 95       	dec	r24
 18c:	ea f7       	brpl	.-6      	; 0x188 <.L1^B1>
 18e:	89 2f       	mov	r24, r25

00000190 <.Loc.39>:
 190:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

00000194 <.LVL11>:
}
 194:	08 95       	ret

00000196 <display>:

void display(char data, int display_nummer)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d6 2f       	mov	r29, r22
 19c:	c7 2f       	mov	r28, r23

0000019e <.Loc.43>:
	send_data(data);
 19e:	0e 94 a5 00 	call	0x14a	; 0x14a <send_data>

000001a2 <.LVL13>:
	send_enable(display_nummer);
 1a2:	8d 2f       	mov	r24, r29
 1a4:	9c 2f       	mov	r25, r28
 1a6:	0e 94 c2 00 	call	0x184	; 0x184 <send_enable>

000001aa <.LVL14>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 1aa:	a5 9a       	sbi	0x14, 5	; 20

000001ac <.Loc.47>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 1ac:	a5 98       	cbi	0x14, 5	; 20

000001ae <.Loc.49>:
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <display_getal>:

void display_getal(unsigned int getal)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	c8 2f       	mov	r28, r24
 1be:	d9 2f       	mov	r29, r25

000001c0 <.LBB9>:
	for (int i = 0; i < 4; i++)
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0

000001c4 <.L11>:
	{
		display(segmentcodes[getal%10], i);
 1c4:	9e 01       	movw	r18, r28
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	0e 94 24 04 	call	0x848	; 0x848 <__umulhisi3>
 1ce:	9c 01       	movw	r18, r24
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	c9 01       	movw	r24, r18
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	fe 01       	movw	r30, r28
 1f0:	e8 1b       	sub	r30, r24
 1f2:	f9 0b       	sbc	r31, r25

000001f4 <.Loc.58>:
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254

000001fc <.Loc.59>:
 1fc:	b8 01       	movw	r22, r16
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 cb 00 	call	0x196	; 0x196 <display>

00000204 <.LVL18>:
		getal /= 10;
 204:	9e 01       	movw	r18, r28
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	0e 94 24 04 	call	0x848	; 0x848 <__umulhisi3>
 20e:	ec 01       	movw	r28, r24

00000210 <.Loc.62>:
 210:	d6 95       	lsr	r29
 212:	c7 95       	ror	r28
 214:	d6 95       	lsr	r29
 216:	c7 95       	ror	r28
 218:	d6 95       	lsr	r29
 21a:	c7 95       	ror	r28

0000021c <.LBB10>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15

00000220 <.L1^B2>:
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <.L1^B2>
 224:	00 c0       	rjmp	.+0      	; 0x226 <L0^A>

00000226 <L0^A>:
	...

00000228 <.LBE10>:
	for (int i = 0; i < 4; i++)
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255

0000022c <.Loc.73>:
 22c:	04 30       	cpi	r16, 0x04	; 4
 22e:	11 05       	cpc	r17, r1
 230:	49 f6       	brne	.-110    	; 0x1c4 <.L11>

00000232 <.LBE9>:
		_delay_ms(1);   // 1 kHz
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28

00000236 <.Loc.75>:
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16

0000023a <.Loc.76>:
 23a:	08 95       	ret

0000023c <IR_init>:

int tel=0;

void IR_init()
{
    ddr_irout&=~(1<<pinnummer_ir);
 23c:	3f 98       	cbi	0x07, 7	; 7

0000023e <.Loc.3>:
    ddr_led|=(1<<led1);
 23e:	27 9a       	sbi	0x04, 7	; 4

00000240 <.Loc.5>:
    port_led|=(1<<led1);
 240:	2f 9a       	sbi	0x05, 7	; 5

00000242 <.Loc.7>:
}
 242:	08 95       	ret

00000244 <IR_RUN>:


void IR_RUN()// check of pin hoog of laag is
{
    static int gedetecteerd = 0;
    if ((pin_ir&(1<<pinnummer_ir))==0)
 244:	37 99       	sbic	0x06, 7	; 6
 246:	11 c0       	rjmp	.+34     	; 0x26a <.L3>

00000248 <.LBB6>:
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	90 e0       	ldi	r25, 0x00	; 0

0000024e <.L1^B1>:
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <.L1^B1>
 256:	00 c0       	rjmp	.+0      	; 0x258 <L0^A>

00000258 <L0^A>:
	...

0000025a <.LBE6>:
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))==0)
 25a:	37 99       	sbic	0x06, 7	; 6
 25c:	10 c0       	rjmp	.+32     	; 0x27e <.L2>

0000025e <.Loc.23>:
        {
            gedetecteerd=0;
 25e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <gedetecteerd.0+0x1>
 262:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <gedetecteerd.0>

00000266 <.Loc.25>:
            port_led&=~(1<<led1);//led aan
 266:	2f 98       	cbi	0x05, 7	; 5
 268:	08 95       	ret

0000026a <.L3>:
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0

00000270 <.L1^B2>:
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <.L1^B2>
 278:	00 c0       	rjmp	.+0      	; 0x27a <L0^A>

0000027a <L0^A>:
	...

0000027c <.LBE8>:
        }
    }
    else
    {
        _delay_ms(20); // debounce
        if ((pin_ir&(1<<pinnummer_ir))!=0)
 27c:	37 9b       	sbis	0x06, 7	; 6

0000027e <.L2>:
            }
            gedetecteerd=1;
            port_led|=(1<<led1);//led uit
        }
    }
}
 27e:	08 95       	ret

00000280 <.Loc.39>:
            if(!gedetecteerd)
 280:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <gedetecteerd.0>
 284:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <gedetecteerd.0+0x1>
 288:	89 2b       	or	r24, r25
 28a:	49 f4       	brne	.+18     	; 0x29e <.L5>

0000028c <.Loc.41>:
                tel++;
 28c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <tel>
 290:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <tel+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <tel+0x1>
 29a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <tel>

0000029e <.L5>:
            gedetecteerd=1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <gedetecteerd.0+0x1>
 2a6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <gedetecteerd.0>

000002aa <.Loc.45>:
            port_led|=(1<<led1);//led uit
 2aa:	2f 9a       	sbi	0x05, 7	; 5

000002ac <.Loc.47>:
}
 2ac:	e8 cf       	rjmp	.-48     	; 0x27e <.L2>

000002ae <main>:
#include "main.h"
#include "ultrasoon.h"

int main(void)
{
    init_ultrasoon();
 2ae:	0e 94 90 03 	call	0x720	; 0x720 <init_ultrasoon>

000002b2 <.LVL0>:
    initStepper();
 2b2:	0e 94 0b 03 	call	0x616	; 0x616 <initStepper>

000002b6 <.L2>:

    while(1){
        rechtdoor();
 2b6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <rechtdoor>

000002ba <.LVL2>:
    while(1){
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <.L2>

000002bc <rechtdoor>:

#include "navigatieLogica.h"

void rechtdoor(void){
    //while agv binnen het pad is
    while(distance_right||distance_left>100){
 2bc:	21 c0       	rjmp	.+66     	; 0x300 <.L2>

000002be <.L6>:
        if(distance_left==distance_right){
 2be:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <distance_left>
 2c2:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <distance_left+0x1>
 2c6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_right>
 2ca:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_right+0x1>

000002ce <.Loc.5>:
 2ce:	28 17       	cp	r18, r24
 2d0:	39 07       	cpc	r19, r25
 2d2:	61 f1       	breq	.+88     	; 0x32c <.L7>

000002d4 <.Loc.6>:
            speedStepperLeft(TOPSPEED);
            speedStepperRight(TOPSPEED);
        }
        else{
            if (distance_right < distance_left){
 2d4:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <distance_right>
 2d8:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <distance_right+0x1>
 2dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <distance_left>
 2e0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <distance_left+0x1>

000002e4 <.Loc.8>:
 2e4:	28 17       	cp	r18, r24
 2e6:	39 07       	cpc	r19, r25
 2e8:	54 f1       	brlt	.+84     	; 0x33e <.L8>

000002ea <.L5>:
                speedStepperLeft(85);
                speedStepperRight(TOPSPEED);
            }
            if(distance_left< distance_right){
 2ea:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <distance_left>
 2ee:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <distance_left+0x1>
 2f2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_right>
 2f6:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_right+0x1>

000002fa <.Loc.11>:
 2fa:	28 17       	cp	r18, r24
 2fc:	39 07       	cpc	r19, r25
 2fe:	44 f1       	brlt	.+80     	; 0x350 <.L9>

00000300 <.L2>:
    while(distance_right||distance_left>100){
 300:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_right>
 304:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_right+0x1>

00000308 <.Loc.14>:
 308:	89 2b       	or	r24, r25
 30a:	c9 f6       	brne	.-78     	; 0x2be <.L6>

0000030c <.Loc.15>:
 30c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <distance_left>
 310:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <distance_left+0x1>

00000314 <.Loc.16>:
 314:	85 36       	cpi	r24, 0x65	; 101
 316:	91 05       	cpc	r25, r1
 318:	94 f6       	brge	.-92     	; 0x2be <.L6>

0000031a <.Loc.17>:
                speedStepperLeft(TOPSPEED);
            }
        }
    }
    //stop driving
    speedStepperLeft(0);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

00000322 <.LVL0>:
    speedStepperRight(0);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

0000032a <.LVL1>:
}
 32a:	08 95       	ret

0000032c <.L7>:
            speedStepperLeft(TOPSPEED);
 32c:	82 e3       	ldi	r24, 0x32	; 50
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

00000334 <.LVL2>:
            speedStepperRight(TOPSPEED);
 334:	82 e3       	ldi	r24, 0x32	; 50
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

0000033c <.LVL3>:
 33c:	e1 cf       	rjmp	.-62     	; 0x300 <.L2>

0000033e <.L8>:
                speedStepperLeft(85);
 33e:	85 e5       	ldi	r24, 0x55	; 85
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

00000346 <.LVL4>:
                speedStepperRight(TOPSPEED);
 346:	82 e3       	ldi	r24, 0x32	; 50
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

0000034e <.LVL5>:
 34e:	cd cf       	rjmp	.-102    	; 0x2ea <.L5>

00000350 <.L9>:
                speedStepperRight(85);
 350:	85 e5       	ldi	r24, 0x55	; 85
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

00000358 <.LVL6>:
                speedStepperLeft(TOPSPEED);
 358:	82 e3       	ldi	r24, 0x32	; 50
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

00000360 <.LVL7>:
 360:	cf cf       	rjmp	.-98     	; 0x300 <.L2>

00000362 <rechtsom>:

void rechtsom(void){
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <L0^A>

00000374 <L0^A>:
 374:	00 d0       	rcall	.+0      	; 0x376 <L0^A>

00000376 <L0^A>:
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62

0000037a <.Loc.27>:
    double stepsOuter = ((((distance_left + breedteAGV + afstandWielAgv)*M_PI)/omtrekWiel)*360)/STEPANGLE;
 37a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <distance_left>
 37e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <distance_left+0x1>
 382:	8d 56       	subi	r24, 0x6D	; 109
 384:	9f 4f       	sbci	r25, 0xFF	; 255

00000386 <.Loc.29>:
 386:	9c 01       	movw	r18, r24
 388:	99 0f       	add	r25, r25
 38a:	44 0b       	sbc	r20, r20
 38c:	55 0b       	sbc	r21, r21
 38e:	29 83       	std	Y+1, r18	; 0x01
 390:	3a 83       	std	Y+2, r19	; 0x02
 392:	4b 83       	std	Y+3, r20	; 0x03
 394:	5c 83       	std	Y+4, r21	; 0x04
 396:	ca 01       	movw	r24, r20
 398:	b9 01       	movw	r22, r18
 39a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>

0000039e <.LVL8>:
 39e:	2b ed       	ldi	r18, 0xDB	; 219
 3a0:	3f e0       	ldi	r19, 0x0F	; 15
 3a2:	49 e4       	ldi	r20, 0x49	; 73
 3a4:	50 e4       	ldi	r21, 0x40	; 64
 3a6:	69 83       	std	Y+1, r22	; 0x01
 3a8:	7a 83       	std	Y+2, r23	; 0x02
 3aa:	8b 83       	std	Y+3, r24	; 0x03
 3ac:	9c 83       	std	Y+4, r25	; 0x04
 3ae:	69 81       	ldd	r22, Y+1	; 0x01
 3b0:	7a 81       	ldd	r23, Y+2	; 0x02
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	9c 81       	ldd	r25, Y+4	; 0x04
 3b6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>

000003ba <.LVL9>:
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e8       	ldi	r19, 0x80	; 128
 3be:	4c e3       	ldi	r20, 0x3C	; 60
 3c0:	53 e4       	ldi	r21, 0x43	; 67
 3c2:	69 83       	std	Y+1, r22	; 0x01
 3c4:	7a 83       	std	Y+2, r23	; 0x02
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	9c 83       	std	Y+4, r25	; 0x04
 3ca:	69 81       	ldd	r22, Y+1	; 0x01
 3cc:	7a 81       	ldd	r23, Y+2	; 0x02
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	9c 81       	ldd	r25, Y+4	; 0x04
 3d2:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3>

000003d6 <.LVL10>:
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	44 eb       	ldi	r20, 0xB4	; 180
 3dc:	53 e4       	ldi	r21, 0x43	; 67
 3de:	69 83       	std	Y+1, r22	; 0x01
 3e0:	7a 83       	std	Y+2, r23	; 0x02
 3e2:	8b 83       	std	Y+3, r24	; 0x03
 3e4:	9c 83       	std	Y+4, r25	; 0x04
 3e6:	69 81       	ldd	r22, Y+1	; 0x01
 3e8:	7a 81       	ldd	r23, Y+2	; 0x02
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	9c 81       	ldd	r25, Y+4	; 0x04
 3ee:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>

000003f2 <.LVL11>:
 3f2:	23 e3       	ldi	r18, 0x33	; 51
 3f4:	33 e3       	ldi	r19, 0x33	; 51
 3f6:	43 eb       	ldi	r20, 0xB3	; 179
 3f8:	50 e4       	ldi	r21, 0x40	; 64
 3fa:	69 83       	std	Y+1, r22	; 0x01
 3fc:	7a 83       	std	Y+2, r23	; 0x02
 3fe:	8b 83       	std	Y+3, r24	; 0x03
 400:	9c 83       	std	Y+4, r25	; 0x04
 402:	69 81       	ldd	r22, Y+1	; 0x01
 404:	7a 81       	ldd	r23, Y+2	; 0x02
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	9c 81       	ldd	r25, Y+4	; 0x04
 40a:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3>

0000040e <.LVL12>:
 40e:	06 2f       	mov	r16, r22
 410:	17 2f       	mov	r17, r23
 412:	8e 83       	std	Y+6, r24	; 0x06
 414:	9d 83       	std	Y+5, r25	; 0x05

00000416 <.Loc.33>:
    double stepsInner = ((((distance_right - afstandWielAgv)*M_PI)/omtrekWiel)*360)/STEPANGLE;
 416:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <distance_right>
 41a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <distance_right+0x1>

0000041e <.Loc.35>:
 41e:	0d 97       	sbiw	r24, 0x0d	; 13

00000420 <.Loc.37>:
 420:	9c 01       	movw	r18, r24
 422:	99 0f       	add	r25, r25
 424:	44 0b       	sbc	r20, r20
 426:	55 0b       	sbc	r21, r21
 428:	29 83       	std	Y+1, r18	; 0x01
 42a:	3a 83       	std	Y+2, r19	; 0x02
 42c:	4b 83       	std	Y+3, r20	; 0x03
 42e:	5c 83       	std	Y+4, r21	; 0x04
 430:	ca 01       	movw	r24, r20
 432:	b9 01       	movw	r22, r18
 434:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>

00000438 <.LVL16>:
 438:	2b ed       	ldi	r18, 0xDB	; 219
 43a:	3f e0       	ldi	r19, 0x0F	; 15
 43c:	49 e4       	ldi	r20, 0x49	; 73
 43e:	50 e4       	ldi	r21, 0x40	; 64
 440:	69 83       	std	Y+1, r22	; 0x01

00000442 <.Loc.39>:
 442:	7a 83       	std	Y+2, r23	; 0x02
 444:	8b 83       	std	Y+3, r24	; 0x03
 446:	9c 83       	std	Y+4, r25	; 0x04
 448:	69 81       	ldd	r22, Y+1	; 0x01
 44a:	7a 81       	ldd	r23, Y+2	; 0x02
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	9c 81       	ldd	r25, Y+4	; 0x04
 450:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>

00000454 <.LVL18>:
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e8       	ldi	r19, 0x80	; 128
 458:	4c e3       	ldi	r20, 0x3C	; 60
 45a:	53 e4       	ldi	r21, 0x43	; 67
 45c:	69 83       	std	Y+1, r22	; 0x01
 45e:	7a 83       	std	Y+2, r23	; 0x02
 460:	8b 83       	std	Y+3, r24	; 0x03
 462:	9c 83       	std	Y+4, r25	; 0x04
 464:	69 81       	ldd	r22, Y+1	; 0x01
 466:	7a 81       	ldd	r23, Y+2	; 0x02
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	9c 81       	ldd	r25, Y+4	; 0x04
 46c:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3>

00000470 <.LVL19>:
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	44 eb       	ldi	r20, 0xB4	; 180
 476:	53 e4       	ldi	r21, 0x43	; 67
 478:	69 83       	std	Y+1, r22	; 0x01
 47a:	7a 83       	std	Y+2, r23	; 0x02
 47c:	8b 83       	std	Y+3, r24	; 0x03
 47e:	9c 83       	std	Y+4, r25	; 0x04
 480:	69 81       	ldd	r22, Y+1	; 0x01
 482:	7a 81       	ldd	r23, Y+2	; 0x02
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>

0000048c <.LVL20>:
 48c:	23 e3       	ldi	r18, 0x33	; 51
 48e:	33 e3       	ldi	r19, 0x33	; 51
 490:	43 eb       	ldi	r20, 0xB3	; 179
 492:	50 e4       	ldi	r21, 0x40	; 64
 494:	69 83       	std	Y+1, r22	; 0x01
 496:	7a 83       	std	Y+2, r23	; 0x02
 498:	8b 83       	std	Y+3, r24	; 0x03
 49a:	9c 83       	std	Y+4, r25	; 0x04
 49c:	69 81       	ldd	r22, Y+1	; 0x01
 49e:	7a 81       	ldd	r23, Y+2	; 0x02
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	9c 81       	ldd	r25, Y+4	; 0x04
 4a4:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3>

000004a8 <.LVL21>:
    double stepRatio = stepsOuter/stepsInner;
 4a8:	26 2f       	mov	r18, r22
 4aa:	37 2f       	mov	r19, r23
 4ac:	48 2f       	mov	r20, r24
 4ae:	59 2f       	mov	r21, r25
 4b0:	09 83       	std	Y+1, r16	; 0x01
 4b2:	1a 83       	std	Y+2, r17	; 0x02
 4b4:	8e 81       	ldd	r24, Y+6	; 0x06
 4b6:	8b 83       	std	Y+3, r24	; 0x03
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	8c 83       	std	Y+4, r24	; 0x04
 4bc:	69 81       	ldd	r22, Y+1	; 0x01
 4be:	7a 81       	ldd	r23, Y+2	; 0x02
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	9c 81       	ldd	r25, Y+4	; 0x04
 4c4:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3>

000004c8 <.LVL22>:
 4c8:	c6 2e       	mov	r12, r22
 4ca:	d7 2e       	mov	r13, r23
 4cc:	e8 2e       	mov	r14, r24
 4ce:	f9 2e       	mov	r15, r25

000004d0 <.Loc.44>:

    //clear stepcounter
    stepCounterLeft=0;
 4d0:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <stepCounterLeft+0x1>
 4d4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <stepCounterLeft>

000004d8 <.Loc.46>:
    //start turning
    while(stepCounterLeft<stepsOuter){
 4d8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 4dc:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 4e0:	9c 01       	movw	r18, r24
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	29 83       	std	Y+1, r18	; 0x01
 4e8:	3a 83       	std	Y+2, r19	; 0x02
 4ea:	4b 83       	std	Y+3, r20	; 0x03
 4ec:	5c 83       	std	Y+4, r21	; 0x04
 4ee:	ca 01       	movw	r24, r20
 4f0:	b9 01       	movw	r22, r18
 4f2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatunsisf>

000004f6 <.LVL24>:
 4f6:	26 2f       	mov	r18, r22
 4f8:	37 2f       	mov	r19, r23
 4fa:	48 2f       	mov	r20, r24
 4fc:	59 2f       	mov	r21, r25
 4fe:	09 83       	std	Y+1, r16	; 0x01
 500:	1a 83       	std	Y+2, r17	; 0x02
 502:	8e 81       	ldd	r24, Y+6	; 0x06
 504:	8b 83       	std	Y+3, r24	; 0x03
 506:	8d 81       	ldd	r24, Y+5	; 0x05
 508:	8c 83       	std	Y+4, r24	; 0x04
 50a:	69 81       	ldd	r22, Y+1	; 0x01
 50c:	7a 81       	ldd	r23, Y+2	; 0x02
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	9c 81       	ldd	r25, Y+4	; 0x04
 512:	0e 94 92 05 	call	0xb24	; 0xb24 <__gesf2>

00000516 <.LVL25>:
 516:	18 16       	cp	r1, r24
 518:	0c f0       	brlt	.+2      	; 0x51c <.L13>

0000051a <L0^A>:
 51a:	3f c0       	rjmp	.+126    	; 0x59a <.L11>

0000051c <.L13>:
        speedStepperLeft(TOPSPEED);
 51c:	82 e3       	ldi	r24, 0x32	; 50
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

00000524 <.LVL26>:
        speedStepperRight(TOPSPEED*stepRatio);
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	48 e4       	ldi	r20, 0x48	; 72
 52a:	52 e4       	ldi	r21, 0x42	; 66
 52c:	c9 82       	std	Y+1, r12	; 0x01
 52e:	da 82       	std	Y+2, r13	; 0x02
 530:	eb 82       	std	Y+3, r14	; 0x03
 532:	fc 82       	std	Y+4, r15	; 0x04
 534:	69 81       	ldd	r22, Y+1	; 0x01
 536:	7a 81       	ldd	r23, Y+2	; 0x02
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	9c 81       	ldd	r25, Y+4	; 0x04
 53c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>

00000540 <.LVL27>:
 540:	69 83       	std	Y+1, r22	; 0x01
 542:	7a 83       	std	Y+2, r23	; 0x02
 544:	8b 83       	std	Y+3, r24	; 0x03
 546:	9c 83       	std	Y+4, r25	; 0x04
 548:	69 81       	ldd	r22, Y+1	; 0x01
 54a:	7a 81       	ldd	r23, Y+2	; 0x02
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	0e 94 aa 04 	call	0x954	; 0x954 <__fixsfsi>

00000554 <.LVL28>:
 554:	86 2f       	mov	r24, r22
 556:	97 2f       	mov	r25, r23
 558:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

0000055c <.LVL29>:
    while(stepCounterLeft<stepsOuter){
 55c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 560:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 564:	9c 01       	movw	r18, r24
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	29 83       	std	Y+1, r18	; 0x01
 56c:	3a 83       	std	Y+2, r19	; 0x02
 56e:	4b 83       	std	Y+3, r20	; 0x03
 570:	5c 83       	std	Y+4, r21	; 0x04
 572:	ca 01       	movw	r24, r20
 574:	b9 01       	movw	r22, r18
 576:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatunsisf>

0000057a <.LVL30>:
 57a:	20 2f       	mov	r18, r16
 57c:	31 2f       	mov	r19, r17
 57e:	4e 81       	ldd	r20, Y+6	; 0x06
 580:	5d 81       	ldd	r21, Y+5	; 0x05
 582:	69 83       	std	Y+1, r22	; 0x01
 584:	7a 83       	std	Y+2, r23	; 0x02
 586:	8b 83       	std	Y+3, r24	; 0x03
 588:	9c 83       	std	Y+4, r25	; 0x04
 58a:	69 81       	ldd	r22, Y+1	; 0x01
 58c:	7a 81       	ldd	r23, Y+2	; 0x02
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	0e 94 33 04 	call	0x866	; 0x866 <__cmpsf2>

00000596 <.LVL31>:
 596:	88 23       	and	r24, r24
 598:	0c f2       	brlt	.-126    	; 0x51c <.L13>

0000059a <.L11>:
    }
    //stop turning
    speedStepperLeft(0);
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 19 03 	call	0x632	; 0x632 <speedStepperLeft>

000005a2 <.LVL32>:
    speedStepperRight(0);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 12 03 	call	0x624	; 0x624 <speedStepperRight>

000005aa <.LVL33>:
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17

000005bc <.Loc.56>:
 5bc:	0f 91       	pop	r16

000005be <.Loc.57>:
 5be:	ff 90       	pop	r15

000005c0 <.Loc.58>:
 5c0:	ef 90       	pop	r14

000005c2 <.Loc.59>:
 5c2:	df 90       	pop	r13

000005c4 <.Loc.60>:
 5c4:	cf 90       	pop	r12

000005c6 <.Loc.61>:
 5c6:	08 95       	ret

000005c8 <initPinsStepper>:
#include <avr/interrupt.h>
#include "stepperDriver.h"

void initPinsStepper (void){
	// Config pins as output
	DDR_STEP_R |= (1<<STEPPER_RIGHT);
 5c8:	6b 9a       	sbi	0x0d, 3	; 13

000005ca <.Loc.3>:
	DDR_STEP_L |= (1<<STEPPER_LEFT);
 5ca:	e1 e0       	ldi	r30, 0x01	; 1
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	80 81       	ld	r24, Z

000005d0 <.Loc.4>:
 5d0:	88 60       	ori	r24, 0x08	; 8
 5d2:	80 83       	st	Z, r24

000005d4 <.Loc.5>:

	// Output low
	PORT_STEP_R &= ~(1<<STEPPER_RIGHT);
 5d4:	73 98       	cbi	0x0e, 3	; 14

000005d6 <.Loc.7>:
	PORT_STEP_L &= ~(1<<STEPPER_LEFT);
 5d6:	e2 e0       	ldi	r30, 0x02	; 2
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	80 81       	ld	r24, Z
 5dc:	87 7f       	andi	r24, 0xF7	; 247
 5de:	80 83       	st	Z, r24

000005e0 <.Loc.9>:
}
 5e0:	08 95       	ret

000005e2 <initTimer3Stepper>:

//stepper right
void initTimer3Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR3A = (1<<WGM31) | (0<<WGM30) | (1<<COM3A1) | (1<<COM3A0);
 5e2:	82 ec       	ldi	r24, 0xC2	; 194
 5e4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

000005e8 <.Loc.13>:
    TCCR3B = (1<<WGM33) | (1<<WGM32) | (1<<CS32) | (0<<CS31) | (0<<CS30);
 5e8:	8c e1       	ldi	r24, 0x1C	; 28
 5ea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

000005ee <.Loc.15>:

	//define top value
    OCR3A = STEPVALUE;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 5f6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

000005fa <.Loc.17>:
}
 5fa:	08 95       	ret

000005fc <initTimer4Stepper>:

//stepper left
void initTimer4Stepper(void){
    // Use mode 14, prescaler = 256
    TCCR4A = (1<<WGM41) | (0<<WGM40) | (1<<COM4A1) | (1<<COM4A0);
 5fc:	82 ec       	ldi	r24, 0xC2	; 194
 5fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000602 <.Loc.21>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (1<<CS42) | (0<<CS41) | (0<<CS40);
 602:	8c e1       	ldi	r24, 0x1C	; 28
 604:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000608 <.Loc.23>:

	//define top value
    OCR4A = STEPVALUE;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 610:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000614 <.Loc.25>:
}
 614:	08 95       	ret

00000616 <initStepper>:


void initStepper(void){
    initTimer4Stepper();
 616:	0e 94 fe 02 	call	0x5fc	; 0x5fc <initTimer4Stepper>

0000061a <.LVL0>:
    initTimer3Stepper();
 61a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <initTimer3Stepper>

0000061e <.LVL1>:
    initPinsStepper();
 61e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <initPinsStepper>

00000622 <.LVL2>:
}
 622:	08 95       	ret

00000624 <speedStepperRight>:

void speedStepperRight(int PWMRight){
 624:	28 2f       	mov	r18, r24
 626:	39 2f       	mov	r19, r25

00000628 <.Loc.33>:
    ICR3 = PWMRight;
 628:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 62c:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000630 <.Loc.35>:
}
 630:	08 95       	ret

00000632 <speedStepperLeft>:

void speedStepperLeft(int PWMLeft){
 632:	28 2f       	mov	r18, r24
 634:	39 2f       	mov	r19, r25

00000636 <.Loc.38>:
    ICR4 = PWMLeft;
 636:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 63a:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>

0000063e <.Loc.40>:
}
 63e:	08 95       	ret

00000640 <toggleStepperDirectionRight>:

void toggleStepperDirectionRight(void){
    DDR_DIR_R ^= ~(1<<PORT_DIR_R);
 640:	34 b3       	in	r19, 0x14	; 20

00000642 <.Loc.44>:
 642:	23 b3       	in	r18, 0x13	; 19

00000644 <.Loc.45>:
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <.L2^B1>

0000064a <.L1^B1>:
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25

0000064e <.L2^B1>:
 64e:	3a 95       	dec	r19
 650:	e2 f7       	brpl	.-8      	; 0x64a <.L1^B1>

00000652 <.Loc.46>:
 652:	80 95       	com	r24
 654:	90 95       	com	r25

00000656 <.Loc.47>:
 656:	82 27       	eor	r24, r18
 658:	83 bb       	out	0x13, r24	; 19

0000065a <.Loc.48>:
}
 65a:	08 95       	ret

0000065c <toggleStepperDirectionLeft>:

void toggleStepperDirectionLeft(void){
    DDR_DIR_L ^= (1<<PORT_DIR_L);
 65c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>

00000660 <.Loc.52>:
 660:	e1 e0       	ldi	r30, 0x01	; 1
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	80 81       	ld	r24, Z

00000666 <.Loc.53>:
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <.L2^B2>

0000066c <.L1^B2>:
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19

00000670 <.L2^B2>:
 670:	9a 95       	dec	r25
 672:	e2 f7       	brpl	.-8      	; 0x66c <.L1^B2>

00000674 <.Loc.54>:
 674:	82 27       	eor	r24, r18
 676:	80 83       	st	Z, r24

00000678 <.Loc.55>:
}
 678:	08 95       	ret

0000067a <__vector_45>:


volatile unsigned int stepCounterLeft = 0;
ISR(TIMER4_OVF_vect){
 67a:	8f 93       	push	r24
 67c:	8f b7       	in	r24, 0x3f	; 63
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25

00000682 <.Loc.57>:
    stepCounterLeft++;
 682:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stepCounterLeft>
 686:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stepCounterLeft+0x1>
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stepCounterLeft+0x1>
 690:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stepCounterLeft>

00000694 <.Loc.59>:
}
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	8f bf       	out	0x3f, r24	; 63
 69a:	8f 91       	pop	r24
 69c:	18 95       	reti

0000069e <__vector_35>:

volatile unsigned int stepCounterRight = 0;
ISR(TIMER3_OVF_vect){
 69e:	8f 93       	push	r24
 6a0:	8f b7       	in	r24, 0x3f	; 63
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25

000006a6 <.Loc.61>:
    stepCounterRight++;
 6a6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <stepCounterRight>
 6aa:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <stepCounterRight+0x1>
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <stepCounterRight+0x1>
 6b4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <stepCounterRight>

000006b8 <.Loc.63>:
}
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	8f bf       	out	0x3f, r24	; 63
 6be:	8f 91       	pop	r24
 6c0:	18 95       	reti

000006c2 <init_timer5>:
#include <avr/interrupt.h>
#include "ultrasoon.h"

void init_timer5(void){
    //set timer mode 15
    TCCR5A = (1<<COM5B1) | (1<<COM5C1) | (1<<WGM51) | (1<<WGM50); //set output compare on B and C
 6c2:	8b e2       	ldi	r24, 0x2B	; 43
 6c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000006c8 <.Loc.3>:
    TCCR5B = (1<<ICES5) | (1<<WGM53) | (1<<WGM52) | (1<<CS51);  //set input capture to rising edge and prescaler 8
 6c8:	8a e5       	ldi	r24, 0x5A	; 90
 6ca:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000006ce <.Loc.5>:
    //set interrupt register for input capture and overflow
    TIMSK5 = (1<<ICIE5) | (1<<TOIE5);
 6ce:	81 e2       	ldi	r24, 0x21	; 33
 6d0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000006d4 <.Loc.7>:
    //define top value
    OCR5A = 0XFFFF;
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	9f ef       	ldi	r25, 0xFF	; 255
 6d8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 6dc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000006e0 <.Loc.10>:
    //set trigger start signal
    OCR5B = 20;
 6e0:	84 e1       	ldi	r24, 0x14	; 20
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 6e8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

000006ec <.Loc.11>:
    OCR5C = 20;
 6ec:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 6f0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

000006f4 <.Loc.13>:
    //set enable interrupt
    sei();
 6f4:	78 94       	sei

000006f6 <.Loc.14>:
}
 6f6:	08 95       	ret

000006f8 <init_pins_ultrasoon>:

void init_pins_ultrasoon(void){
    //set trigger pins to output
    DDRL |= (1<<Pin_Trig_Left);
 6f8:	ea e0       	ldi	r30, 0x0A	; 10
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	80 81       	ld	r24, Z

000006fe <.Loc.17>:
 6fe:	80 61       	ori	r24, 0x10	; 16
 700:	80 83       	st	Z, r24

00000702 <.Loc.18>:
    DDRL |= (1<<Pin_Trig_Right);
 702:	80 81       	ld	r24, Z

00000704 <.Loc.19>:
 704:	80 62       	ori	r24, 0x20	; 32
 706:	80 83       	st	Z, r24

00000708 <.Loc.20>:
    //set trigger pins to low
    PORTL &= ~(1<<Pin_Trig_Left);
 708:	ab e0       	ldi	r26, 0x0B	; 11
 70a:	b1 e0       	ldi	r27, 0x01	; 1
 70c:	8c 91       	ld	r24, X
 70e:	8f 7e       	andi	r24, 0xEF	; 239
 710:	8c 93       	st	X, r24

00000712 <.Loc.22>:
    PORTL &= ~(1<<Pin_Trig_Right);
 712:	8c 91       	ld	r24, X
 714:	8f 7d       	andi	r24, 0xDF	; 223
 716:	8c 93       	st	X, r24

00000718 <.Loc.24>:
    //set echo pin to input
    DDRL &= ~(1<<Pin_echo);
 718:	80 81       	ld	r24, Z
 71a:	8d 7f       	andi	r24, 0xFD	; 253
 71c:	80 83       	st	Z, r24

0000071e <.Loc.26>:
}
 71e:	08 95       	ret

00000720 <init_ultrasoon>:

void init_ultrasoon(void){
    init_pins_ultrasoon();
 720:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_pins_ultrasoon>

00000724 <.LVL0>:
    init_timer5();
 724:	0e 94 61 03 	call	0x6c2	; 0x6c2 <init_timer5>

00000728 <.LVL1>:
}
 728:	08 95       	ret

0000072a <__vector_50>:

volatile int distance_right;
volatile int distance_left;
volatile int current_sensor=0;

ISR(TIMER5_OVF_vect){
 72a:	8f 93       	push	r24
 72c:	8f b7       	in	r24, 0x3f	; 63
 72e:	8f 93       	push	r24
 730:	8b b7       	in	r24, 0x3b	; 59
 732:	8f 93       	push	r24
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31

00000738 <.Loc.32>:
    //set input capture to rising edge
    TCCR5B |= (1<<ICES5);
 738:	e1 e2       	ldi	r30, 0x21	; 33
 73a:	f1 e0       	ldi	r31, 0x01	; 1
 73c:	80 81       	ld	r24, Z

0000073e <.Loc.33>:
 73e:	80 64       	ori	r24, 0x40	; 64
 740:	80 83       	st	Z, r24

00000742 <.Loc.34>:
}
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	8f 91       	pop	r24
 748:	8b bf       	out	0x3b, r24	; 59
 74a:	8f 91       	pop	r24
 74c:	8f bf       	out	0x3f, r24	; 63
 74e:	8f 91       	pop	r24
 750:	18 95       	reti

00000752 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	1f 92       	push	r1
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	2b b7       	in	r18, 0x3b	; 59
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31

00000774 <.Loc.36>:
    static volatile int start_time;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 774:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

00000778 <.Loc.39>:
 778:	86 ff       	sbrs	r24, 6
 77a:	1e c0       	rjmp	.+60     	; 0x7b8 <.L6>

0000077c <.Loc.40>:
        start_time = ICR5;
 77c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 780:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000784 <.Loc.42>:
 784:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <start_time.0+0x1>
 788:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <start_time.0>

0000078c <.Loc.43>:
        TCCR5B &= ~(1 << ICES5);  // Switch to falling edge
 78c:	e1 e2       	ldi	r30, 0x21	; 33
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	80 81       	ld	r24, Z
 792:	8f 7b       	andi	r24, 0xBF	; 191
 794:	80 83       	st	Z, r24

00000796 <.L5>:
            current_sensor = 0;  // Switch to Sensor A
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
        }
    }
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	3f 91       	pop	r19
 7a8:	2f 91       	pop	r18
 7aa:	2b bf       	out	0x3b, r18	; 59
 7ac:	2f 91       	pop	r18
 7ae:	1f 90       	pop	r1
 7b0:	0f 90       	pop	r0
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	0f 90       	pop	r0
 7b6:	18 95       	reti

000007b8 <.L6>:
        int distance = (ICR5 - start_time) / 117;  // Calculate distance in mm
 7b8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 7bc:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000007c0 <.Loc.48>:
 7c0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <start_time.0>
 7c4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <start_time.0+0x1>
 7c8:	28 1b       	sub	r18, r24
 7ca:	39 0b       	sbc	r19, r25

000007cc <.Loc.49>:
 7cc:	a9 e0       	ldi	r26, 0x09	; 9
 7ce:	bc e8       	ldi	r27, 0x8C	; 140
 7d0:	0e 94 24 04 	call	0x848	; 0x848 <__umulhisi3>
 7d4:	00 24       	eor	r0, r0
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	00 1c       	adc	r0, r0
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	00 1c       	adc	r0, r0
 7e2:	89 2f       	mov	r24, r25
 7e4:	90 2d       	mov	r25, r0

000007e6 <.Loc.50>:
        if (current_sensor == 0) {
 7e6:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <current_sensor>
 7ea:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <current_sensor+0x1>

000007ee <.Loc.52>:
 7ee:	23 2b       	or	r18, r19
 7f0:	c9 f4       	brne	.+50     	; 0x824 <.L8>

000007f2 <.Loc.53>:
            distance_left = distance;  // Store distance for Sensor A
 7f2:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <distance_left+0x1>
 7f6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <distance_left>

000007fa <.L9>:
        if (current_sensor == 0) {
 7fa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <current_sensor>
 7fe:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <current_sensor+0x1>

00000802 <.Loc.57>:
 802:	89 2b       	or	r24, r25
 804:	a1 f4       	brne	.+40     	; 0x82e <.L10>

00000806 <.Loc.58>:
            current_sensor = 1;  // Switch to Sensor B
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <current_sensor+0x1>
 80e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <current_sensor>

00000812 <.Loc.60>:
            TCCR5A &= ~(1 << COM5C1);  // Turn off Sensor Left
 812:	e0 e2       	ldi	r30, 0x20	; 32
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	80 81       	ld	r24, Z
 818:	87 7f       	andi	r24, 0xF7	; 247
 81a:	80 83       	st	Z, r24

0000081c <.Loc.62>:
            TCCR5A |= (1 << COM5B1);   // Turn on Sensor Right
 81c:	80 81       	ld	r24, Z

0000081e <.Loc.63>:
 81e:	80 62       	ori	r24, 0x20	; 32
 820:	80 83       	st	Z, r24
 822:	b9 cf       	rjmp	.-142    	; 0x796 <.L5>

00000824 <.L8>:
            distance_right = distance;  // Store distance for Sensor B
 824:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <distance_right+0x1>
 828:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <distance_right>
 82c:	e6 cf       	rjmp	.-52     	; 0x7fa <.L9>

0000082e <.L10>:
            current_sensor = 0;  // Switch to Sensor A
 82e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <current_sensor+0x1>
 832:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <current_sensor>

00000836 <.Loc.68>:
            TCCR5A &= ~(1 << COM5B1);  // Turn off Sensor Right
 836:	e0 e2       	ldi	r30, 0x20	; 32
 838:	f1 e0       	ldi	r31, 0x01	; 1
 83a:	80 81       	ld	r24, Z
 83c:	8f 7d       	andi	r24, 0xDF	; 223
 83e:	80 83       	st	Z, r24

00000840 <.Loc.70>:
            TCCR5A |= (1 << COM5C1);   // Turn on Sensor Left
 840:	80 81       	ld	r24, Z

00000842 <.Loc.71>:
 842:	88 60       	ori	r24, 0x08	; 8
 844:	80 83       	st	Z, r24

00000846 <.LBE2>:
}
 846:	a7 cf       	rjmp	.-178    	; 0x796 <.L5>

00000848 <__umulhisi3>:
 848:	a2 9f       	mul	r26, r18

0000084a <.Loc.1>:
 84a:	b0 01       	movw	r22, r0

0000084c <.Loc.2>:
 84c:	b3 9f       	mul	r27, r19

0000084e <.Loc.3>:
 84e:	c0 01       	movw	r24, r0

00000850 <.Loc.4>:
 850:	a3 9f       	mul	r26, r19

00000852 <.Loc.5>:
 852:	70 0d       	add	r23, r0

00000854 <.Loc.6>:
 854:	81 1d       	adc	r24, r1

00000856 <.Loc.7>:
 856:	11 24       	eor	r1, r1

00000858 <.Loc.8>:
 858:	91 1d       	adc	r25, r1

0000085a <.Loc.9>:
 85a:	b2 9f       	mul	r27, r18

0000085c <.Loc.10>:
 85c:	70 0d       	add	r23, r0

0000085e <.Loc.11>:
 85e:	81 1d       	adc	r24, r1

00000860 <.Loc.12>:
 860:	11 24       	eor	r1, r1

00000862 <.Loc.13>:
 862:	91 1d       	adc	r25, r1

00000864 <.Loc.14>:
 864:	08 95       	ret

00000866 <__cmpsf2>:
 866:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_cmp>
 86a:	08 f4       	brcc	.+2      	; 0x86e <.L1^B1>
 86c:	81 e0       	ldi	r24, 0x01	; 1

0000086e <.L1^B1>:
 86e:	08 95       	ret

00000870 <__divsf3>:
 870:	0e 94 4c 04 	call	0x898	; 0x898 <__divsf3x>
 874:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>

00000878 <.L^B1>:
 878:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 87c:	58 f0       	brcs	.+22     	; 0x894 <.L_nan>
 87e:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 882:	40 f0       	brcs	.+16     	; 0x894 <.L_nan>
 884:	29 f4       	brne	.+10     	; 0x890 <.L_zr>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	29 f0       	breq	.+10     	; 0x894 <.L_nan>

0000088a <.L_inf>:
 88a:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>

0000088e <.L1^B1>:
 88e:	51 11       	cpse	r21, r1

00000890 <.L_zr>:
 890:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>

00000894 <.L_nan>:
 894:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>

00000898 <__divsf3x>:
 898:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_split3>
 89c:	68 f3       	brcs	.-38     	; 0x878 <.L^B1>

0000089e <__divsf3_pse>:
 89e:	99 23       	and	r25, r25
 8a0:	b1 f3       	breq	.-20     	; 0x88e <.L1^B1>
 8a2:	55 23       	and	r21, r21
 8a4:	91 f3       	breq	.-28     	; 0x88a <.L_inf>
 8a6:	95 1b       	sub	r25, r21
 8a8:	55 0b       	sbc	r21, r21
 8aa:	bb 27       	eor	r27, r27
 8ac:	aa 27       	eor	r26, r26

000008ae <.L2^B1>:
 8ae:	62 17       	cp	r22, r18
 8b0:	73 07       	cpc	r23, r19
 8b2:	84 07       	cpc	r24, r20
 8b4:	38 f0       	brcs	.+14     	; 0x8c4 <.L3^B1>
 8b6:	9f 5f       	subi	r25, 0xFF	; 255
 8b8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ba:	22 0f       	add	r18, r18
 8bc:	33 1f       	adc	r19, r19
 8be:	44 1f       	adc	r20, r20
 8c0:	aa 1f       	adc	r26, r26
 8c2:	a9 f3       	breq	.-22     	; 0x8ae <.L2^B1>

000008c4 <.L3^B1>:
 8c4:	35 d0       	rcall	.+106    	; 0x930 <.L_div>
 8c6:	0e 2e       	mov	r0, r30
 8c8:	3a f0       	brmi	.+14     	; 0x8d8 <.L5^B1>

000008ca <.L4^B1>:
 8ca:	e0 e8       	ldi	r30, 0x80	; 128
 8cc:	32 d0       	rcall	.+100    	; 0x932 <.L_div1>
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	e6 95       	lsr	r30
 8d4:	00 1c       	adc	r0, r0
 8d6:	ca f7       	brpl	.-14     	; 0x8ca <.L4^B1>

000008d8 <.L5^B1>:
 8d8:	2b d0       	rcall	.+86     	; 0x930 <.L_div>
 8da:	fe 2f       	mov	r31, r30
 8dc:	29 d0       	rcall	.+82     	; 0x930 <.L_div>
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	bb 1f       	adc	r27, r27
 8e6:	26 17       	cp	r18, r22
 8e8:	37 07       	cpc	r19, r23
 8ea:	48 07       	cpc	r20, r24
 8ec:	ab 07       	cpc	r26, r27
 8ee:	b0 e8       	ldi	r27, 0x80	; 128
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <.L4^B2>
 8f2:	bb 0b       	sbc	r27, r27

000008f4 <.L4^B2>:
 8f4:	80 2d       	mov	r24, r0
 8f6:	bf 01       	movw	r22, r30
 8f8:	ff 27       	eor	r31, r31
 8fa:	93 58       	subi	r25, 0x83	; 131
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	3a f0       	brmi	.+14     	; 0x90e <.L13^B1>
 900:	9e 3f       	cpi	r25, 0xFE	; 254
 902:	51 05       	cpc	r21, r1
 904:	78 f0       	brcs	.+30     	; 0x924 <.L15^B1>
 906:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>

0000090a <.L12^B1>:
 90a:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>

0000090e <.L13^B1>:
 90e:	5f 3f       	cpi	r21, 0xFF	; 255
 910:	e4 f3       	brlt	.-8      	; 0x90a <.L12^B1>
 912:	98 3e       	cpi	r25, 0xE8	; 232
 914:	d4 f3       	brlt	.-12     	; 0x90a <.L12^B1>

00000916 <.L14^B1>:
 916:	86 95       	lsr	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f7 95       	ror	r31
 920:	9f 5f       	subi	r25, 0xFF	; 255
 922:	c9 f7       	brne	.-14     	; 0x916 <.L14^B1>

00000924 <.L15^B1>:
 924:	88 0f       	add	r24, r24
 926:	91 1d       	adc	r25, r1
 928:	96 95       	lsr	r25
 92a:	87 95       	ror	r24
 92c:	97 f9       	bld	r25, 7
 92e:	08 95       	ret

00000930 <.L_div>:
 930:	e1 e0       	ldi	r30, 0x01	; 1

00000932 <.L_div1>:
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	bb 1f       	adc	r27, r27
 93a:	62 17       	cp	r22, r18
 93c:	73 07       	cpc	r23, r19
 93e:	84 07       	cpc	r24, r20
 940:	ba 07       	cpc	r27, r26
 942:	20 f0       	brcs	.+8      	; 0x94c <.L2^B2>
 944:	62 1b       	sub	r22, r18
 946:	73 0b       	sbc	r23, r19
 948:	84 0b       	sbc	r24, r20
 94a:	ba 0b       	sbc	r27, r26

0000094c <.L2^B2>:
 94c:	ee 1f       	adc	r30, r30
 94e:	88 f7       	brcc	.-30     	; 0x932 <.L_div1>
 950:	e0 95       	com	r30
 952:	08 95       	ret

00000954 <__fixsfsi>:
 954:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 958:	68 94       	set
 95a:	b1 11       	cpse	r27, r1
 95c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>
 960:	08 95       	ret

00000962 <__fixunssfsi>:
 962:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_splitA>
 966:	88 f0       	brcs	.+34     	; 0x98a <.L_err>
 968:	9f 57       	subi	r25, 0x7F	; 127
 96a:	98 f0       	brcs	.+38     	; 0x992 <.L_zr>
 96c:	b9 2f       	mov	r27, r25
 96e:	99 27       	eor	r25, r25
 970:	b7 51       	subi	r27, 0x17	; 23
 972:	b0 f0       	brcs	.+44     	; 0x9a0 <.L4^B1>
 974:	e1 f0       	breq	.+56     	; 0x9ae <.L_sign>

00000976 <.L1^B1>:
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	1a f0       	brmi	.+6      	; 0x986 <.L2^B1>
 980:	ba 95       	dec	r27
 982:	c9 f7       	brne	.-14     	; 0x976 <.L1^B1>
 984:	14 c0       	rjmp	.+40     	; 0x9ae <.L_sign>

00000986 <.L2^B1>:
 986:	b1 30       	cpi	r27, 0x01	; 1
 988:	91 f0       	breq	.+36     	; 0x9ae <.L_sign>

0000098a <.L_err>:
 98a:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_zero>
 98e:	b1 e0       	ldi	r27, 0x01	; 1
 990:	08 95       	ret

00000992 <.L_zr>:
 992:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_zero>

00000996 <.L3^B1>:
 996:	67 2f       	mov	r22, r23
 998:	78 2f       	mov	r23, r24
 99a:	88 27       	eor	r24, r24
 99c:	b8 5f       	subi	r27, 0xF8	; 248
 99e:	39 f0       	breq	.+14     	; 0x9ae <.L_sign>

000009a0 <.L4^B1>:
 9a0:	b9 3f       	cpi	r27, 0xF9	; 249
 9a2:	cc f3       	brlt	.-14     	; 0x996 <.L3^B1>

000009a4 <.L5^B1>:
 9a4:	86 95       	lsr	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b3 95       	inc	r27
 9ac:	d9 f7       	brne	.-10     	; 0x9a4 <.L5^B1>

000009ae <.L_sign>:
 9ae:	3e f4       	brtc	.+14     	; 0x9be <.L6^B1>
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255

000009be <.L6^B1>:
 9be:	08 95       	ret

000009c0 <__floatunsisf>:
 9c0:	e8 94       	clt
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <.L1^B1>

000009c4 <__floatsisf>:
 9c4:	97 fb       	bst	r25, 7
 9c6:	3e f4       	brtc	.+14     	; 0x9d6 <.L1^B1>
 9c8:	90 95       	com	r25
 9ca:	80 95       	com	r24
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255

000009d6 <.L1^B1>:
 9d6:	99 23       	and	r25, r25
 9d8:	a9 f0       	breq	.+42     	; 0xa04 <.L4^B1>
 9da:	f9 2f       	mov	r31, r25
 9dc:	96 e9       	ldi	r25, 0x96	; 150
 9de:	bb 27       	eor	r27, r27

000009e0 <.L2^B1>:
 9e0:	93 95       	inc	r25
 9e2:	f6 95       	lsr	r31
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f1 11       	cpse	r31, r1
 9ee:	f8 cf       	rjmp	.-16     	; 0x9e0 <.L2^B1>
 9f0:	fa f4       	brpl	.+62     	; 0xa30 <.L_pack>
 9f2:	bb 0f       	add	r27, r27
 9f4:	11 f4       	brne	.+4      	; 0x9fa <.L3^B1>
 9f6:	60 ff       	sbrs	r22, 0
 9f8:	1b c0       	rjmp	.+54     	; 0xa30 <.L_pack>

000009fa <.L3^B1>:
 9fa:	6f 5f       	subi	r22, 0xFF	; 255
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <.L_pack>

00000a04 <.L4^B1>:
 a04:	88 23       	and	r24, r24
 a06:	11 f0       	breq	.+4      	; 0xa0c <.L5^B1>
 a08:	96 e9       	ldi	r25, 0x96	; 150
 a0a:	11 c0       	rjmp	.+34     	; 0xa2e <.L8^B1>

00000a0c <.L5^B1>:
 a0c:	77 23       	and	r23, r23
 a0e:	21 f0       	breq	.+8      	; 0xa18 <.L6^B1>
 a10:	9e e8       	ldi	r25, 0x8E	; 142
 a12:	87 2f       	mov	r24, r23
 a14:	76 2f       	mov	r23, r22
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <.L7^B1>

00000a18 <.L6^B1>:
 a18:	66 23       	and	r22, r22
 a1a:	71 f0       	breq	.+28     	; 0xa38 <.L9^B1>
 a1c:	96 e8       	ldi	r25, 0x86	; 134
 a1e:	86 2f       	mov	r24, r22
 a20:	70 e0       	ldi	r23, 0x00	; 0

00000a22 <.L7^B1>:
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	2a f0       	brmi	.+10     	; 0xa30 <.L_pack>

00000a26 <.L10^B1>:
 a26:	9a 95       	dec	r25
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24

00000a2e <.L8^B1>:
 a2e:	da f7       	brpl	.-10     	; 0xa26 <.L10^B1>

00000a30 <.L_pack>:
 a30:	88 0f       	add	r24, r24
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7

00000a38 <.L9^B1>:
 a38:	08 95       	ret

00000a3a <__fp_cmp>:
 a3a:	99 0f       	add	r25, r25
 a3c:	00 08       	sbc	r0, r0
 a3e:	55 0f       	add	r21, r21
 a40:	aa 0b       	sbc	r26, r26
 a42:	e0 e8       	ldi	r30, 0x80	; 128
 a44:	fe ef       	ldi	r31, 0xFE	; 254
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	e8 07       	cpc	r30, r24
 a4c:	f9 07       	cpc	r31, r25
 a4e:	c0 f0       	brcs	.+48     	; 0xa80 <.L9^B1>
 a50:	12 16       	cp	r1, r18
 a52:	13 06       	cpc	r1, r19
 a54:	e4 07       	cpc	r30, r20
 a56:	f5 07       	cpc	r31, r21
 a58:	98 f0       	brcs	.+38     	; 0xa80 <.L9^B1>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	95 0b       	sbc	r25, r21
 a62:	39 f4       	brne	.+14     	; 0xa72 <.L1^B1>
 a64:	0a 26       	eor	r0, r26
 a66:	61 f0       	breq	.+24     	; 0xa80 <.L9^B1>
 a68:	23 2b       	or	r18, r19
 a6a:	24 2b       	or	r18, r20
 a6c:	25 2b       	or	r18, r21
 a6e:	21 f4       	brne	.+8      	; 0xa78 <.L2^B1>
 a70:	08 95       	ret

00000a72 <.L1^B1>:
 a72:	0a 26       	eor	r0, r26
 a74:	09 f4       	brne	.+2      	; 0xa78 <.L2^B1>
 a76:	a1 40       	sbci	r26, 0x01	; 1

00000a78 <.L2^B1>:
 a78:	a6 95       	lsr	r26
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	81 1d       	adc	r24, r1
 a7e:	81 1d       	adc	r24, r1

00000a80 <.L9^B1>:
 a80:	08 95       	ret

00000a82 <__fp_inf>:
 a82:	97 f9       	bld	r25, 7
 a84:	9f 67       	ori	r25, 0x7F	; 127
 a86:	80 e8       	ldi	r24, 0x80	; 128
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	08 95       	ret

00000a8e <__fp_nan>:
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	80 ec       	ldi	r24, 0xC0	; 192
 a92:	08 95       	ret

00000a94 <__fp_pscA>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	09 06       	cpc	r0, r25
 aa0:	08 95       	ret

00000aa2 <__fp_pscB>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	14 06       	cpc	r1, r20
 aac:	05 06       	cpc	r0, r21
 aae:	08 95       	ret

00000ab0 <__fp_round>:
 ab0:	09 2e       	mov	r0, r25
 ab2:	03 94       	inc	r0
 ab4:	00 0c       	add	r0, r0
 ab6:	11 f4       	brne	.+4      	; 0xabc <.L1^B1>
 ab8:	88 23       	and	r24, r24
 aba:	52 f0       	brmi	.+20     	; 0xad0 <.L3^B1>

00000abc <.L1^B1>:
 abc:	bb 0f       	add	r27, r27
 abe:	40 f4       	brcc	.+16     	; 0xad0 <.L3^B1>
 ac0:	bf 2b       	or	r27, r31
 ac2:	11 f4       	brne	.+4      	; 0xac8 <.L2^B1>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <.L3^B1>

00000ac8 <.L2^B1>:
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255

00000ad0 <.L3^B1>:
 ad0:	08 95       	ret

00000ad2 <__fp_split3>:
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	90 58       	subi	r25, 0x80	; 128
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	59 f0       	breq	.+22     	; 0xaf2 <.L4^B1>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	71 f0       	breq	.+28     	; 0xafc <.L5^B1>

00000ae0 <.L1^B1>:
 ae0:	47 95       	ror	r20

00000ae2 <__fp_splitA>:
 ae2:	88 0f       	add	r24, r24
 ae4:	97 fb       	bst	r25, 7
 ae6:	99 1f       	adc	r25, r25
 ae8:	61 f0       	breq	.+24     	; 0xb02 <.L6^B1>
 aea:	9f 3f       	cpi	r25, 0xFF	; 255
 aec:	79 f0       	breq	.+30     	; 0xb0c <.L7^B1>

00000aee <.L3^B1>:
 aee:	87 95       	ror	r24
 af0:	08 95       	ret

00000af2 <.L4^B1>:
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	14 06       	cpc	r1, r20
 af8:	55 1f       	adc	r21, r21
 afa:	f2 cf       	rjmp	.-28     	; 0xae0 <.L1^B1>

00000afc <.L5^B1>:
 afc:	46 95       	lsr	r20
 afe:	f1 df       	rcall	.-30     	; 0xae2 <__fp_splitA>
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <.L8^B1>

00000b02 <.L6^B1>:
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	f1 cf       	rjmp	.-30     	; 0xaee <.L3^B1>

00000b0c <.L7^B1>:
 b0c:	86 95       	lsr	r24
 b0e:	71 05       	cpc	r23, r1
 b10:	61 05       	cpc	r22, r1

00000b12 <.L8^B1>:
 b12:	08 94       	sec
 b14:	08 95       	ret

00000b16 <__fp_zero>:
 b16:	e8 94       	clt

00000b18 <__fp_szero>:
 b18:	bb 27       	eor	r27, r27
 b1a:	66 27       	eor	r22, r22
 b1c:	77 27       	eor	r23, r23
 b1e:	cb 01       	movw	r24, r22
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <__gesf2>:
 b24:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_cmp>
 b28:	08 f4       	brcc	.+2      	; 0xb2c <.L1^B1>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255

00000b2c <.L1^B1>:
 b2c:	08 95       	ret

00000b2e <__mulsf3>:
 b2e:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3x>
 b32:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>

00000b36 <.L^B1>:
 b36:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 b3a:	38 f0       	brcs	.+14     	; 0xb4a <.L1^B1>
 b3c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 b40:	20 f0       	brcs	.+8      	; 0xb4a <.L1^B1>
 b42:	95 23       	and	r25, r21
 b44:	11 f0       	breq	.+4      	; 0xb4a <.L1^B1>
 b46:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>

00000b4a <.L1^B1>:
 b4a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>

00000b4e <.L2^B1>:
 b4e:	11 24       	eor	r1, r1
 b50:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>

00000b54 <__mulsf3x>:
 b54:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_split3>
 b58:	70 f3       	brcs	.-36     	; 0xb36 <.L^B1>

00000b5a <__mulsf3_pse>:
 b5a:	95 9f       	mul	r25, r21
 b5c:	c1 f3       	breq	.-16     	; 0xb4e <.L2^B1>
 b5e:	95 0f       	add	r25, r21
 b60:	50 e0       	ldi	r21, 0x00	; 0
 b62:	55 1f       	adc	r21, r21
 b64:	62 9f       	mul	r22, r18
 b66:	f0 01       	movw	r30, r0
 b68:	72 9f       	mul	r23, r18
 b6a:	bb 27       	eor	r27, r27
 b6c:	f0 0d       	add	r31, r0
 b6e:	b1 1d       	adc	r27, r1
 b70:	63 9f       	mul	r22, r19
 b72:	aa 27       	eor	r26, r26
 b74:	f0 0d       	add	r31, r0
 b76:	b1 1d       	adc	r27, r1
 b78:	aa 1f       	adc	r26, r26
 b7a:	64 9f       	mul	r22, r20
 b7c:	66 27       	eor	r22, r22
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	66 1f       	adc	r22, r22
 b84:	82 9f       	mul	r24, r18
 b86:	22 27       	eor	r18, r18
 b88:	b0 0d       	add	r27, r0
 b8a:	a1 1d       	adc	r26, r1
 b8c:	62 1f       	adc	r22, r18
 b8e:	73 9f       	mul	r23, r19
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	62 1f       	adc	r22, r18
 b96:	83 9f       	mul	r24, r19
 b98:	a0 0d       	add	r26, r0
 b9a:	61 1d       	adc	r22, r1
 b9c:	22 1f       	adc	r18, r18
 b9e:	74 9f       	mul	r23, r20
 ba0:	33 27       	eor	r19, r19
 ba2:	a0 0d       	add	r26, r0
 ba4:	61 1d       	adc	r22, r1
 ba6:	23 1f       	adc	r18, r19
 ba8:	84 9f       	mul	r24, r20
 baa:	60 0d       	add	r22, r0
 bac:	21 1d       	adc	r18, r1
 bae:	82 2f       	mov	r24, r18
 bb0:	76 2f       	mov	r23, r22
 bb2:	6a 2f       	mov	r22, r26
 bb4:	11 24       	eor	r1, r1
 bb6:	9f 57       	subi	r25, 0x7F	; 127
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	9a f0       	brmi	.+38     	; 0xbe2 <.L13^B1>
 bbc:	f1 f0       	breq	.+60     	; 0xbfa <.L15^B1>

00000bbe <.L10^B1>:
 bbe:	88 23       	and	r24, r24
 bc0:	4a f0       	brmi	.+18     	; 0xbd4 <.L11^B1>
 bc2:	ee 0f       	add	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	bb 1f       	adc	r27, r27
 bc8:	66 1f       	adc	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	91 50       	subi	r25, 0x01	; 1
 bd0:	50 40       	sbci	r21, 0x00	; 0
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <.L10^B1>

00000bd4 <.L11^B1>:
 bd4:	9e 3f       	cpi	r25, 0xFE	; 254
 bd6:	51 05       	cpc	r21, r1
 bd8:	80 f0       	brcs	.+32     	; 0xbfa <.L15^B1>
 bda:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>

00000bde <.L12^B1>:
 bde:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>

00000be2 <.L13^B1>:
 be2:	5f 3f       	cpi	r21, 0xFF	; 255
 be4:	e4 f3       	brlt	.-8      	; 0xbde <.L12^B1>
 be6:	98 3e       	cpi	r25, 0xE8	; 232
 be8:	d4 f3       	brlt	.-12     	; 0xbde <.L12^B1>

00000bea <.L14^B1>:
 bea:	86 95       	lsr	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b7 95       	ror	r27
 bf2:	f7 95       	ror	r31
 bf4:	e7 95       	ror	r30
 bf6:	9f 5f       	subi	r25, 0xFF	; 255
 bf8:	c1 f7       	brne	.-16     	; 0xbea <.L14^B1>

00000bfa <.L15^B1>:
 bfa:	fe 2b       	or	r31, r30
 bfc:	88 0f       	add	r24, r24
 bfe:	91 1d       	adc	r25, r1
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <_exit>:
 c08:	f8 94       	cli

00000c0a <__stop_program>:
 c0a:	ff cf       	rjmp	.-2      	; 0xc0a <__stop_program>
